(()=>{"use strict";var __webpack_modules__={385:()=>{eval('\n// UNUSED EXPORTS: consoleClicked, onscrollIn_Out\n\n;// CONCATENATED MODULE: ./src/Backend/Manipulator.ts\nclass Manipulator {\r\n    constructor() { }\r\n    static splitStringHalf(addr, ch) {\r\n        let reString = [];\r\n        let p = addr.indexOf(ch);\r\n        if (p != -1 && p != undefined) {\r\n            reString[0] = addr.slice(0, p).trim();\r\n            reString[1] = addr.slice(p + 1).trim();\r\n        }\r\n        else\r\n            reString[0] = addr;\r\n        return reString;\r\n    }\r\n    static removeExcessWhiteSpace(addr) {\r\n        return addr.replace(/\\s+/g, \' \').trim();\r\n    }\r\n    static isHex(addr) {\r\n        let newS = addr.replace(/^0+/, \'\');\r\n        if (addr.endsWith("h") || addr.endsWith("H")) {\r\n            newS = addr.replace(/h$/i, "");\r\n            if (!/[^0-9A-F]/i.test(newS)) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        /* else if(!/[^0-9A-F]/i.test(newS)){\r\n            return true;\r\n        } */\r\n        else\r\n            return false;\r\n    }\r\n    static isDec(addr) {\r\n        if (!/[^0-9]/.test(addr)) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDat_8(addr) {\r\n        addr = addr.replace(/^0+/, \'\');\r\n        if (this.isDec(addr)) {\r\n            if (this.decToHex(addr).length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isHex(addr)) {\r\n            if (addr.length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDat_16(addr) {\r\n        if (this.isDec(addr)) {\r\n            if (this.decToHex(addr).length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isHex(addr)) {\r\n            if (addr.length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static formatHex(addr) {\r\n        addr = addr.replace(/^0+/, \'\');\r\n        //addr=addr.replace(/^0/,\'\');\r\n        if (Manipulator.isDat_8(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = Manipulator.decToHex(addr);\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        else if (Manipulator.isDat_16(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = Manipulator.decToHex(addr);\r\n            }\r\n            if (addr.length == 4) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat8(addr) {\r\n        addr = addr.replace(/^0+/, \'\');\r\n        //addr=addr.replace(/^0/,\'\');\r\n        if (Manipulator.isDat_8(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = Manipulator.decToHex(addr);\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat8WithoutH(addr) {\r\n        addr = addr.replace(/^0+/, \'\');\r\n        //addr=addr.replace(/^0/,\'\');\r\n        if (Manipulator.isDat_8(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = Manipulator.decToHex(addr);\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        return addr.replace(/h$/, "");\r\n    }\r\n    static formatHextoDat16(addr) {\r\n        addr = addr.replace(/^0+/, \'\');\r\n        if (this.isDat_16(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            switch (addr.length) {\r\n                case 1:\r\n                    addr = "0000" + addr;\r\n                    break;\r\n                case 2:\r\n                    addr = \'000\' + addr;\r\n                    break;\r\n                case 3:\r\n                    addr = \'00\' + addr;\r\n                    break;\r\n                case 4:\r\n                    addr = \'0\' + addr;\r\n                    break;\r\n            }\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat16WithoutH(addr) {\r\n        addr = addr.replace(/^0+/, \'\');\r\n        if (this.isDat_16(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            switch (addr.length) {\r\n                case 1:\r\n                    addr = "0000" + addr;\r\n                    break;\r\n                case 2:\r\n                    addr = \'000\' + addr;\r\n                    break;\r\n                case 3:\r\n                    addr = \'00\' + addr;\r\n                    break;\r\n                case 4:\r\n                    addr = \'0\' + addr;\r\n                    break;\r\n            }\r\n        }\r\n        return addr.replace(/h$/g, "");\r\n    }\r\n    static splitDat16InDat8(addr) {\r\n        let r = [];\r\n        if (this.isDat_16(addr)) {\r\n            addr = this.formatHextoDat16(addr);\r\n            r[0] = addr[2] + addr[3];\r\n            r[1] = addr[0] + addr[1];\r\n        }\r\n        return r;\r\n    }\r\n    static formatLabelDisplay(s, b) {\r\n        let ss = "";\r\n        let toReturn = "";\r\n        if (s.length < 1) {\r\n            return "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";\r\n        }\r\n        s = s.concat(": ");\r\n        while (s.length < 10) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        toReturn = b ? s : ss;\r\n        return toReturn;\r\n    }\r\n    static formatBefehlDisplay(s, b) {\r\n        let ss = "";\r\n        let toReturn = "";\r\n        while (s.length < 16) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        toReturn = b ? s : ss;\r\n        return toReturn;\r\n    }\r\n    static formatLabelandBefehlDisplay(s1, s2) {\r\n        let ss = "";\r\n        if (s1.length < 8) {\r\n            return this.formatLabelDisplay(s1, false).concat(this.formatBefehlDisplay(s2, false));\r\n        }\r\n        s1 = this.formatLabelDisplay(s1, true);\r\n        s2 = this.formatBefehlDisplay(s2, true);\r\n        ss = (s1.concat(s2)).trim();\r\n        if (ss.length < 26) {\r\n            while (ss.length < 26) {\r\n                ss = ss.concat(" ");\r\n            }\r\n        }\r\n        console.log(ss);\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        console.log(ss);\r\n        return ss;\r\n    }\r\n}\r\nManipulator.binToHex = (addr) => {\r\n    return parseInt(addr, 2).toString(16).toUpperCase() + "h";\r\n};\r\nManipulator.decToHex = (addr) => {\r\n    return parseInt(addr, 10).toString(16).toUpperCase() + "h";\r\n};\r\nManipulator.hexToDec = (addr) => {\r\n    /*  if(addr.indexOf("h")!=-1){ */\r\n    addr = addr.replace(/h/g, "");\r\n    return Number(parseInt(addr, 16).toString(10));\r\n    /*         }\r\n            else return Number(addr); */\r\n};\r\n\n;// CONCATENATED MODULE: ./src/Backend/Label.ts\nclass Label {\r\n    constructor(n, p) {\r\n        this.name = "";\r\n        this.position = undefined;\r\n        this.name = n;\r\n        this.position = p;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    setPosition(addr) {\r\n        this.position = addr;\r\n    }\r\n    toString() {\r\n        return `<span class="gray">Label:</span> &nbsp;&nbsp;&nbsp;&nbsp; Label Wert:0000h (little endian:0000h)`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/Constant.ts\nclass Constant {\r\n    constructor(n, v) {\r\n        this.name = "";\r\n        this.value = "";\r\n        this.name = n;\r\n        this.value = v;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    setValue(addr) {\r\n        this.value = addr;\r\n    }\r\n    toStringtoMovable() {\r\n        return `${this.name} Wert:${this.value}`;\r\n    }\r\n    toString() {\r\n        return `<span class="gray">Konst.:</span> ;&nbsp;&nbsp;&nbsp; ${this.name} Wert:${this.value}`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/SymbolList.ts\n\r\n\r\n\r\nclass SymbolList {\r\n    constructor() {\r\n        this.Labels = [];\r\n        this.Consts = [];\r\n        this.sequence = [];\r\n    }\r\n    static getInstance() {\r\n        if (!SymbolList.instance) {\r\n            SymbolList.instance = new SymbolList();\r\n        }\r\n        return SymbolList.instance;\r\n    }\r\n    empty() {\r\n        this.Labels = [];\r\n        this.Consts = [];\r\n        this.sequence = [];\r\n    }\r\n    pushValidLabelConst(s) {\r\n        if (this.sequence.find(e => { e == s; }) == undefined) {\r\n            this.sequence.push(s);\r\n        }\r\n    }\r\n    isEligible(addr) {\r\n        if (addr.length < 3) {\r\n            return false;\r\n        }\r\n        if (/^\\d/.test(addr)) {\r\n            return false;\r\n        }\r\n        if (/^\\s+/g.test(addr)) {\r\n            return false;\r\n        }\r\n        if (!/^[a-zA-Z0-9_]*$/.test(addr)) {\r\n            return false;\r\n        }\r\n        if (!/^[\\W_]/.test(addr)) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    updateLabel(s, addr) {\r\n        let l = this.getSpecificLabelByName(s);\r\n        if (l != undefined && Manipulator.isDat_16(addr)) {\r\n            l.setPosition(Manipulator.formatHextoDat16(addr));\r\n            this.pushValidLabelConst(l);\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isLabel(addr) {\r\n        //  case-sensitive\r\n        /* if(this.Labels.find(element => element.getName()==addr) !=undefined){\r\n            return true;\r\n        }\r\n        else return false; */\r\n        //  NOT case-sensitive\r\n        if (this.Labels.find(element => element.getName().toLowerCase() == addr.toLowerCase()) != undefined) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    setLabel(s, p) {\r\n        let l;\r\n        if (!this.isLabel(s) && Manipulator.isDat_16(p)) {\r\n            l = new Label(s, Manipulator.formatHextoDat16(p));\r\n            this.Labels.push(l);\r\n            this.pushValidLabelConst(l);\r\n        }\r\n    }\r\n    setLabelWithoutPosition(addr) {\r\n        if (!this.isLabel(addr)) {\r\n            this.Labels.push(new Label(addr, "????"));\r\n            return true;\r\n        }\r\n        else if (this.getPositionOfSpecificLabel(addr) == undefined) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isConst(s) {\r\n        if (this.Consts.find(element => element.getName() == s) != undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getSequence() {\r\n        return this.sequence;\r\n    }\r\n    setConst(s, v) {\r\n        let l;\r\n        if (!this.isConst(s)) {\r\n            l = new Constant(s, v);\r\n            this.Consts.push(new Constant(s, v));\r\n            this.pushValidLabelConst(l);\r\n        }\r\n    }\r\n    removeLabel(s) {\r\n        //  case-sensitive\r\n        /*\r\n        this.Labels.filter(e=>{\r\n            e.getName()!=s;\r\n        })\r\n        */\r\n        //   NOT case-sensitive\r\n        this.Labels.filter(e => {\r\n            e.getName().toLowerCase() != s.toLowerCase();\r\n        });\r\n    }\r\n    getLabels() {\r\n        return this.Labels;\r\n    }\r\n    getConsts() {\r\n        return this.Consts;\r\n    }\r\n    getSpecificConstantByName(addr) {\r\n        return this.Consts.find(e => e.getName() == addr);\r\n    }\r\n    getSpecificLabelByName(addr) {\r\n        //  case-sensitive\r\n        /*\r\n        return this.Labels.find(e=>e.getName()==addr);\r\n        */\r\n        //   NOT case-sensitive\r\n        return this.Labels.find(e => e.getName().toLowerCase() == addr.toLowerCase());\r\n    }\r\n    getPositionOfSpecificLabel(addr) {\r\n        let r = this.getSpecificLabelByName(addr);\r\n        if (r == undefined) {\r\n            this.setLabelWithoutPosition(addr);\r\n            return undefined;\r\n        }\r\n        else {\r\n            if (r.getPosition() == "????") {\r\n                return undefined;\r\n            }\r\n            else\r\n                return r.getPosition();\r\n        }\r\n    }\r\n}\r\nlet SymbolL = SymbolList.getInstance();\r\n\n;// CONCATENATED MODULE: ./src/Backend/Enums.ts\nvar DataType;\r\n(function (DataType) {\r\n    DataType["dat_8"] = "dat_8";\r\n    DataType["dat_16"] = "dat_16";\r\n    DataType["LABEL"] = "label";\r\n    DataType["CONSTANT"] = "const";\r\n    DataType["ELLIGIBLE"] = "elligible";\r\n    DataType["NONE"] = "none";\r\n})(DataType || (DataType = {}));\r\nvar InputLineType;\r\n(function (InputLineType) {\r\n    InputLineType["TRANSLATED"] = "TRANSLATED";\r\n    InputLineType["NOTTRANSLATED"] = "NOTTRANSLATED";\r\n    InputLineType["EMPTY"] = "EMPTY";\r\n})(InputLineType || (InputLineType = {}));\r\n\n;// CONCATENATED MODULE: ./src/Backend/InputLine.ts\n\r\n\r\n\r\nclass InputLine {\r\n    constructor(init, id) {\r\n        this.startingAddr = "";\r\n        this.length = -1;\r\n        this.id = -1;\r\n        this.hCode = "";\r\n        this.initialLine = "";\r\n        this.commandLine = "";\r\n        this.firstPart = "";\r\n        this.secondPart = "";\r\n        this.thirdPart = "";\r\n        this.error = "";\r\n        this.rest = "";\r\n        this.commentary = "";\r\n        this.label = "";\r\n        this.translation = "";\r\n        this.description = [];\r\n        this.valid = false;\r\n        this.type = InputLineType.NOTTRANSLATED;\r\n        this.setTranslation = (s) => {\r\n            this.translation = s;\r\n        };\r\n        this.getTranslation = () => {\r\n            return this.translation;\r\n        };\r\n        this.getDescriptionLine = () => {\r\n            return this.description;\r\n        };\r\n        this.getStartingAddr = () => { return this.startingAddr; };\r\n        this.getLength = () => { return this.length; };\r\n        this.getHCode = () => {\r\n            return this.hCode;\r\n        };\r\n        this.getId = () => { return this.id; };\r\n        this.getLabel = () => {\r\n            return this.label;\r\n        };\r\n        this.getFirstPart = () => { return this.firstPart; };\r\n        this.getSecondPart = () => { return this.secondPart; };\r\n        this.getThirdPart = () => { return this.thirdPart; };\r\n        this.getCommentary = () => {\r\n            return this.commentary;\r\n        };\r\n        this.getValid = () => { return this.valid; };\r\n        this.getType = () => { return this.type; };\r\n        this.setComment = (s) => {\r\n            this.commentary = s;\r\n        };\r\n        this.setLabelTo = (s) => {\r\n            this.label = s;\r\n        };\r\n        this.setCommandLine = () => {\r\n            let s = Manipulator.splitStringHalf(this.initialLine, ":");\r\n            let ss = Manipulator.splitStringHalf(this.initialLine, ";");\r\n            let addr = this.initialLine.replace(s[0] + \':\', \'\').replace(\';\' + ss[1], \'\');\r\n            if (ss[1] != undefined) {\r\n                this.commentary = ss[1];\r\n            }\r\n            return addr.trim();\r\n        };\r\n        this.commandLinetoString = (b) => {\r\n            let first = this.firstPart, second = this.secondPart, third = this.thirdPart;\r\n            if (this.valid == true) {\r\n                if (b) {\r\n                    if (second.toUpperCase() == "EQU") {\r\n                        second = second.toUpperCase();\r\n                    }\r\n                    else {\r\n                        first = first.toUpperCase();\r\n                        if (!SymbolL.isLabel(second) && !SymbolL.isConst(second) && !Manipulator.isDat_16(second)) {\r\n                            second = second.toUpperCase();\r\n                        }\r\n                        else if (second != "") {\r\n                            if (Manipulator.isDat_8(second)) {\r\n                                second = Manipulator.formatHextoDat8(second);\r\n                            }\r\n                            else if (Manipulator.isDat_16(second)) {\r\n                                second = Manipulator.formatHextoDat16(second);\r\n                            }\r\n                        }\r\n                        if (!SymbolL.isLabel(third) && !SymbolL.isConst(third) && !Manipulator.isDat_16(third)) {\r\n                            third = third.toUpperCase();\r\n                        }\r\n                        else if (third != "") {\r\n                            if (Manipulator.isDat_8(third)) {\r\n                                third = Manipulator.formatHextoDat8(third);\r\n                            }\r\n                            else if (Manipulator.isDat_16(third)) {\r\n                                third = Manipulator.formatHextoDat16(third);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (second.toUpperCase() == "EQU") {\r\n                    // this.secondPart = "EQU";\r\n                    return (`${first} ${second} ${third}`);\r\n                }\r\n                else {\r\n                    return (`${first} ${second}${(third == "" ? "" : \',\' + third)}`);\r\n                }\r\n            }\r\n            else {\r\n                return this.commandLine;\r\n            }\r\n        };\r\n        this.hasLabel = () => {\r\n            return this.label != "";\r\n        };\r\n        this.initialLine = init.replace(/\\s+/g, \' \').trim();\r\n        this.id = id;\r\n        this.commandLine = this.setCommandLine();\r\n        this.preemptiveValidation();\r\n    }\r\n    preemptiveValidation() {\r\n        if (this.commandLine == "") {\r\n            this.valid = true;\r\n            this.type = InputLineType.EMPTY;\r\n        }\r\n    }\r\n    setError(s) {\r\n        this.error = s;\r\n    }\r\n    setStartingAddr(s) { this.startingAddr = s; }\r\n    setLength(n) {\r\n        if (Manipulator.isHex(String(n))) {\r\n            this.length = Manipulator.hexToDec(String(n));\r\n        }\r\n        else\r\n            this.length = Number(n);\r\n    }\r\n    setHCode(s) {\r\n        this.hCode = s;\r\n    }\r\n    setFirstPart(s) { this.firstPart = s; }\r\n    setSecondPart(s) {\r\n        /* if(this.firstPart=="RS"){\r\n            this.secondPart=s;\r\n        }\r\n        if(Manipulator.isDat_8(s)){\r\n            this.secondPart=s=Manipulator.formatHextoDat8(s);\r\n        }\r\n        else if(Manipulator.isDat_16(s)){\r\n            this.secondPart=s=Manipulator.formatHextoDat16(s);\r\n        }\r\n        else{\r\n            this.secondPart=s;\r\n        } */\r\n        this.secondPart = s;\r\n    }\r\n    getEndAddr() {\r\n        if (this.firstPart.toUpperCase() == "ORG") {\r\n            return Manipulator.formatHextoDat16(String(this.length));\r\n        }\r\n        if (this.startingAddr != "") {\r\n            return Manipulator.formatHextoDat16(String(Manipulator.hexToDec(this.startingAddr) + this.length));\r\n        }\r\n        else\r\n            return "";\r\n    }\r\n    setThirdPart(s) {\r\n        /* if(Manipulator.isDat_8(s)){\r\n            this.thirdPart=Manipulator.formatHextoDat8(s);\r\n        }\r\n        else if(Manipulator.isDat_16(s)){\r\n            this.thirdPart=Manipulator.formatHextoDat16(s);\r\n        }\r\n        else{\r\n            this.thirdPart=s;\r\n        } */\r\n        this.thirdPart = s;\r\n    }\r\n    setRest(s) {\r\n        this.rest = s;\r\n    }\r\n    setValid(b) { this.valid = b; }\r\n    setType(t) { this.type = t; }\r\n    saveDescriptionLine(s) {\r\n        this.description.push(s);\r\n    }\r\n    getInitialLine() {\r\n        return this.initialLine;\r\n    }\r\n    formatInputToDisplay() {\r\n        if (this.valid) {\r\n            if (this.secondPart.toUpperCase() == "EQU") {\r\n                this.secondPart = this.secondPart.toUpperCase();\r\n            }\r\n            else {\r\n                this.firstPart = this.firstPart.toUpperCase();\r\n                if (!SymbolL.isLabel(this.secondPart) && !SymbolL.isConst(this.secondPart) && !Manipulator.isDat_16(this.secondPart)) {\r\n                    this.secondPart = this.secondPart.toUpperCase();\r\n                }\r\n                else if (this.secondPart != "") {\r\n                    if (Manipulator.isDat_8(this.secondPart)) {\r\n                        this.secondPart = Manipulator.formatHextoDat8(this.secondPart);\r\n                    }\r\n                    else if (Manipulator.isDat_16(this.secondPart)) {\r\n                        this.secondPart = Manipulator.formatHextoDat16(this.secondPart);\r\n                    }\r\n                }\r\n                if (!SymbolL.isLabel(this.thirdPart) && !SymbolL.isConst(this.thirdPart) && !Manipulator.isDat_16(this.thirdPart)) {\r\n                    this.thirdPart = this.thirdPart.toUpperCase();\r\n                }\r\n                if (this.thirdPart != "") {\r\n                    if (Manipulator.isDat_8(this.thirdPart)) {\r\n                        this.thirdPart = Manipulator.formatHextoDat8(this.thirdPart);\r\n                    }\r\n                    else if (Manipulator.isDat_16(this.thirdPart)) {\r\n                        this.thirdPart = Manipulator.formatHextoDat16(this.thirdPart);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getCommandLineToCurrentLine() {\r\n        let dsrl = "";\r\n        if (this.label != "") {\r\n            dsrl += `<span id="crLabel">${this.label}</span>: `;\r\n        }\r\n        if (this.firstPart != "") {\r\n            dsrl += `<span id="crFirst">${this.firstPart}</span> `;\r\n        }\r\n        if (this.secondPart != "" && this.secondPart.toUpperCase() == "EQU") {\r\n            dsrl += `<span id="crSecond">${this.secondPart}</span> `;\r\n        }\r\n        else if (this.secondPart != "" && this.secondPart.toUpperCase() != "EQU" && this.thirdPart == "") {\r\n            dsrl += `<span id="crSecond">${this.secondPart}</span> `;\r\n        }\r\n        else if (this.secondPart != "") {\r\n            dsrl += `<span id="crSecond">${this.secondPart}</span>,`;\r\n        }\r\n        if (this.thirdPart != "") {\r\n            dsrl += `<span id="crThird">${this.thirdPart}</span>`;\r\n        }\r\n        if (this.error != "") {\r\n            dsrl += `<span id="crError">${this.error}</span>`;\r\n        }\r\n        if (this.rest != "") {\r\n            dsrl += `<span id="crRest">${this.rest}</span>`;\r\n        }\r\n        return dsrl;\r\n    }\r\n    getAllV() {\r\n        return [this.label != "" ? 1 : 0, this.firstPart != "" ? 1 : 0, this.secondPart != "" ? 1 : 0, this.thirdPart != "" ? 1 : 0, this.error != "" ? 1 : 0, this.rest != "" ? 1 : 0];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/MnemoCommand.ts\n\r\nclass MnemoCommand {\r\n    constructor(c, d, addr, bC, l) {\r\n        this.mCode = "";\r\n        this.destination = "";\r\n        this.source = "";\r\n        this.binaryCode = "";\r\n        this.hexCode = "";\r\n        this.size = 0;\r\n        this.mCode = c.toUpperCase();\r\n        this.destination = d;\r\n        this.source = addr;\r\n        this.binaryCode = bC.replace(/\\s/g, "");\r\n        this.hexCode = Manipulator.binToHex(bC.replace(/\\s/g, ""));\r\n        this.size = l;\r\n    }\r\n    toString() {\r\n        return `${this.mCode} ${this.destination} ${this.source} \\n ${this.hexCode}`;\r\n    }\r\n    getMCode() {\r\n        return this.mCode;\r\n    }\r\n    getDestination() {\r\n        return this.destination;\r\n    }\r\n    getSource() {\r\n        return this.source;\r\n    }\r\n    getHexCode() {\r\n        return this.hexCode;\r\n    }\r\n    getLength() {\r\n        let i = 1;\r\n        if (this.destination != "") {\r\n            i++;\r\n        }\r\n        if (this.source != "") {\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/CommandMap.ts\n\r\n\r\n\r\n\r\nconst parse1 = `<span class="gray">parse Labelfeld/Befehlsfeld ...</span>`;\r\nconst parse2 = `<span class="gray">parse Befehlsfeld ...</span>`;\r\nconst parse3 = `<span class="gray">parse Operandenfeld (1) ...</span>`;\r\nconst parse4 = `<span class="gray">parse Operandenfeld (2) ...</span>`;\r\nconst parse5 = `<span class="gray">gesamter Befehl:</span>`;\r\nconst addressierungDirekt = (/* unused pure expression or super */ null && (`erkannt Direkte Adressierung`));\r\nconst addressierungIndirekt = (/* unused pure expression or super */ null && (`erkannt Indirekte Adressierung`));\r\nconst addressierungEinAusgabe = (/* unused pure expression or super */ null && (``));\r\nconst addressierungImmediate = (/* unused pure expression or super */ null && (`erkannt Immediate Adressierung`));\r\nconst saveInput = (I, n) => {\r\n    switch (n) {\r\n        case 1:\r\n            I.saveDescriptionLine(parse1);\r\n            break;\r\n        case 2:\r\n            I.saveDescriptionLine(parse2);\r\n            break;\r\n        case 3:\r\n            I.saveDescriptionLine(parse3);\r\n            break;\r\n        case 4:\r\n            I.saveDescriptionLine(parse4);\r\n            break;\r\n        case 5:\r\n            I.saveDescriptionLine(parse5);\r\n            break;\r\n    }\r\n};\r\nconst save2 = (i) => {\r\n    saveInput(i, 2);\r\n};\r\nconst save3 = (i) => {\r\n    saveInput(i, 3);\r\n};\r\nconst save4 = (i) => {\r\n    saveInput(i, 4);\r\n};\r\nclass CommandMap {\r\n    constructor() {\r\n        this.mnemoCommands = [\r\n            //TRANSPORTBEFEHLE\r\n            //Immediate laden\r\n            new MnemoCommand("MOV", "A", "dat_8", "00 111 110", 2),\r\n            new MnemoCommand("MOV", "B", "dat_8", "00 000 110", 2),\r\n            new MnemoCommand("MOV", "C", "dat_8", "00 001 110", 2),\r\n            new MnemoCommand("MOV", "IX", "dat_16", "11 011 10100 100 001", 4),\r\n            new MnemoCommand("MOV", "HL", "dat_16", "00 100 001", 3),\r\n            new MnemoCommand("MOV", "SP", "dat_16", "00 110 001", 3),\r\n            //Direkte Adressierung Register<>Register\r\n            new MnemoCommand("MOV", "A", "B", "01 111 000", 1),\r\n            new MnemoCommand("MOV", "A", "C", "01 111 001", 1),\r\n            new MnemoCommand("MOV", "B", "A", "01 000 111", 1),\r\n            new MnemoCommand("MOV", "B", "C", "01 000 001", 1),\r\n            new MnemoCommand("MOV", "C", "A", "01 001 111", 1),\r\n            new MnemoCommand("MOV", "C", "B", "01 001 000", 1),\r\n            //Direkte Adressierung Register<>Speicher\r\n            new MnemoCommand("MOV", "A", "label", "00 111 010", 3),\r\n            new MnemoCommand("MOV", "label", "A", "00 110 010", 3),\r\n            new MnemoCommand("MOV", "HL", "label", "00 101 010", 3),\r\n            new MnemoCommand("MOV", "label", "HL", "00 100 010", 3),\r\n            new MnemoCommand("MOV", "IX", "label", "11 011 10100 101 010", 4),\r\n            new MnemoCommand("MOV", "label", "IX", "11 011 10100 100 010", 4),\r\n            //Registerindirekte Adressierung\r\n            new MnemoCommand("MOV", "A", "[HL]", "01 111 110", 1),\r\n            new MnemoCommand("MOV", "[HL]", "A", "01 110 111", 1),\r\n            //Stackbefehle\r\n            new MnemoCommand("PUSH", "", "", "11 110 101", 1),\r\n            new MnemoCommand("POP", "", "", "11 110 001", 1),\r\n            //Ein-Ausgabebefehle\r\n            new MnemoCommand("IN", "A", "port", "11 011 011", 2),\r\n            new MnemoCommand("OUT", "port", "A", "11 010 011", 2),\r\n            //BEFEHLE ZUR DATENBEARBEITUNG\r\n            //Inkrement- und Dekrementbefehle\r\n            new MnemoCommand("INC", "A", "", "00 111 100", 1),\r\n            new MnemoCommand("INC", "B", "", "00 000 100", 1),\r\n            new MnemoCommand("INC", "C", "", "00 001 100", 1),\r\n            new MnemoCommand("INC", "HL", "", "00 100 011", 1),\r\n            new MnemoCommand("INC", "IX", "", "11 011 10100 100 011", 2),\r\n            new MnemoCommand("DEC", "A", "", "00 111 101", 1),\r\n            new MnemoCommand("DEC", "B", "", "00 000 101", 1),\r\n            new MnemoCommand("DEC", "C", "", "00 001 101", 1),\r\n            new MnemoCommand("DEC", "HL", "", "00 101 011", 1),\r\n            new MnemoCommand("DEC", "IX", "", "11 011 10100 101 011", 2),\r\n            //Arithmetische Operationen\r\n            new MnemoCommand("ADD", "A", "", "10 000 111", 1),\r\n            new MnemoCommand("ADD", "B", "", "10 000 000", 1),\r\n            new MnemoCommand("ADD", "C", "", "10 000 001", 1),\r\n            new MnemoCommand("ADD", "dat_8", "", "11 000 110", 2),\r\n            new MnemoCommand("SUB", "A", "", "10 010 111", 1),\r\n            new MnemoCommand("SUB", "B", "", "10 010 000", 1),\r\n            new MnemoCommand("SUB", "C", "", "10 010 001", 1),\r\n            new MnemoCommand("SUB", "dat_8", "", "11 010 110", 2),\r\n            //Logische Operationen\r\n            new MnemoCommand("AND", "A", "", "10 100 111", 1),\r\n            new MnemoCommand("AND", "B", "", "10 100 000", 1),\r\n            new MnemoCommand("AND", "C", "", "10 100 001", 1),\r\n            new MnemoCommand("AND", "dat_8", "", "11 100 110", 2),\r\n            new MnemoCommand("OR", "A", "", "10 110 111", 1),\r\n            new MnemoCommand("OR", "B", "", "10 110 000", 1),\r\n            new MnemoCommand("OR", "C", "", "10 110 001", 1),\r\n            new MnemoCommand("OR", "dat_8", "", "11 110 110", 2),\r\n            new MnemoCommand("XOR", "A", "", "10 101 111", 1),\r\n            new MnemoCommand("XOR", "B", "", "10 101 000", 1),\r\n            new MnemoCommand("XOR", "C", "", "10 101 001", 1),\r\n            new MnemoCommand("XOR", "dat_8", "", "11 101 110", 2),\r\n            //Schiebebefehle\r\n            new MnemoCommand("SHL", "", "", "11 001 01100 100 111", 2),\r\n            new MnemoCommand("SHR", "", "", "11 001 01100 111 111", 2),\r\n            //Rotierbefehle\r\n            new MnemoCommand("RCL", "", "", "00 010 111", 1),\r\n            new MnemoCommand("ROL", "", "", "00 000 111", 1),\r\n            new MnemoCommand("RCR", "", "", "00 011 111", 1),\r\n            new MnemoCommand("ROR", "", "", "00 001 111", 1),\r\n            //Vergleichsoperationen\r\n            new MnemoCommand("CP", "A", "", "10 111 111", 1),\r\n            new MnemoCommand("CP", "B", "", "10 111 000", 1),\r\n            new MnemoCommand("CP", "C", "", "10 111 001", 1),\r\n            new MnemoCommand("CP", "dat_8", "", "11 111 110", 2),\r\n            //BEFEHLE FÜR VERZWEIGUNGEN\r\n            //Bedingte Sprünge\r\n            new MnemoCommand("JPNZ", "label", "", "11 000 010", 3),\r\n            new MnemoCommand("JPZ", "label", "", "11 001 010", 3),\r\n            new MnemoCommand("JPNC", "label", "", "11 010 010", 3),\r\n            new MnemoCommand("JPC", "label", "", "11 011 010", 3),\r\n            new MnemoCommand("JPNO", "label", "", "11 100 010", 3),\r\n            new MnemoCommand("JPO", "label", "", "11 101 010", 3),\r\n            new MnemoCommand("JPNS", "label", "", "11 110 010", 3),\r\n            new MnemoCommand("JPS", "label", "", "11 111 010", 3),\r\n            //Unbedingter Sprung\r\n            new MnemoCommand("JP", "label", "", "11 000 011", 3),\r\n            //Registerinderkter Sprung\r\n            new MnemoCommand("JP", "[IX]", "", "11 011 10111 101 001", 2),\r\n            //Unterprogrammbefehle\r\n            new MnemoCommand("CALL", "label", "", "11 001 101", 3),\r\n            new MnemoCommand("RET", "", "", "11 001 001", 1),\r\n            //CPU-STEUERBEFEHLE\r\n            //Leerbefehl\r\n            new MnemoCommand("NOP", "", "", "00 000 000", 1),\r\n            //Haltbefehl\r\n            new MnemoCommand("HALT", "", "", "01 110 110", 1),\r\n        ];\r\n        this.symbollist = SymbolList.getInstance();\r\n        this.mCodes = ["MOV", "PUSH", "POP", "IN", "OUT", "INC", "DEC", "ADD", "SUB", "AND", "OR", "XOR", "SHL", "SHR", "RCL", "ROL", "RCR", "ROR", "CP", "JPNZ", "JPZ", "JPNC", "JPC", "JPNO", "JPO", "JPNS", "JPS", "JP", "CALL", "RET", "NOP", "HALT"];\r\n        this.pseudoMCodes = ["DB", "DW", "RS", "ORG", "EXT", "ENT"];\r\n        this.Regs = ["A", "B", "C", "IX", "HL", "SP", "[HL]", "[IX]"];\r\n        this.getCommands = () => {\r\n            return this.mnemoCommands;\r\n        };\r\n    }\r\n    static getInstance() {\r\n        if (!CommandMap.instance) {\r\n            CommandMap.instance = new CommandMap();\r\n        }\r\n        return CommandMap.instance;\r\n    }\r\n    formatGefunden(s1, s2) {\r\n        // return \'gefunden: \'+(s1!=""?s1+\' \':"")+\'-> \'+s2;\r\n        return `<span class="eingeruckt">gefunden: ${s1 != "" ? s1 + \' \' : ""} -> ${s2}</span>`;\r\n    }\r\n    formatErwartet(s1) {\r\n        // return \'erwarte: \'+s1;\r\n        return `<span class="eingeruckt">erwarte: ${s1}</span>`;\r\n    }\r\n    formatErrorMassage(s1) {\r\n        return `<span class="errorRed">error: ${s1}</span>`;\r\n    }\r\n    filterForEmtpyStrings(s) {\r\n        return s.filter(e => { if (!/^[\\s+]/g.test(e) && e != "") {\r\n            return e;\r\n        } });\r\n    }\r\n    mapInputLineByCase(i) {\r\n        let strings = Manipulator.splitStringHalf(i.getInitialLine(), \';\');\r\n        let commandLine = strings[0];\r\n        if (strings.length > 1) {\r\n            i.setComment(strings[1].trim());\r\n        }\r\n        saveInput(i, 1);\r\n        i.saveDescriptionLine(this.formatErwartet(`Labeldefinition, Mnemocode oder Konstante (+EQU)`));\r\n        if (commandLine.includes(":")) {\r\n            strings = Manipulator.splitStringHalf(commandLine, ":");\r\n            if (this.symbollist.isLabel(strings[0])) {\r\n                if (this.symbollist.getPositionOfSpecificLabel(strings[0]) != undefined) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`Label ${strings[0]} ist schon bereits besetzt`));\r\n                    i.setError(strings[0]);\r\n                    i.setRest(": " + strings[1]);\r\n                    return false;\r\n                }\r\n            }\r\n            if (!this.symbollist.isEligible(strings[0])) {\r\n                i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} kein gülitger Label`));\r\n                i.setError(strings[0]);\r\n                i.setRest(": " + strings[1]);\r\n                return false;\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(this.formatGefunden("Doppelpunkte ", "Label \'" + strings[0] + "\'"));\r\n                i.setLabelTo(strings[0]);\r\n                this.symbollist.setLabelWithoutPosition(strings[0]);\r\n                saveInput(i, 2);\r\n                i.saveDescriptionLine(this.formatErwartet("(Pseudo-)Mnemocode"));\r\n                commandLine = strings[1];\r\n            }\r\n        }\r\n        strings = Manipulator.splitStringHalf(commandLine, " ");\r\n        strings = this.filterForEmtpyStrings(strings);\r\n        if (this.mCodes.includes(strings[0].toUpperCase())) {\r\n            i.setFirstPart(strings[0]);\r\n            //ÄNDERUNG\r\n            strings[0] = strings[0].toUpperCase();\r\n            i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n            return this.parseToMnemoCode(i, strings);\r\n        }\r\n        else if (this.pseudoMCodes.includes(strings[0].toUpperCase()) || this.symbollist.isEligible(strings[0])) {\r\n            return this.parsetoPseudoMnemoCode(i, strings);\r\n        }\r\n        else {\r\n            i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} ist kein gültiger (Pseudo-)Mnemocode oder Label/Konstante`));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(strings[1]);\r\n            }\r\n            i.setValid(false);\r\n            return false;\r\n        }\r\n    }\r\n    parseToMnemoCode(i, strings) {\r\n        let consoletostring = "";\r\n        let matches = [];\r\n        let toSave = "";\r\n        // strings[0]=strings[0].toUpperCase();\r\n        switch (strings[0]) {\r\n            case \'MOV\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'MOV\'; }); //Alle treffer auf MOV Codes filtriert\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlende Operand!")); //ERROR\r\n                    return false;\r\n                }\r\n                strings = Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                if (this.getDests(matches).includes(strings[0].toUpperCase()) && this.Regs.includes(strings[0].toUpperCase())) { // A || B || C || IX || HL || SP\r\n                    toSave = strings[0];\r\n                    i.setSecondPart(toSave);\r\n                    // i.setSecondPart(strings[0]);\r\n                    //ÄNDERUNG\r\n                    strings[0] = strings[0].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[0], i.getFirstPart() + " " + strings[0]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[0]) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    consoletostring = this.getScources(matches).join(", ");\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet(consoletostring.replace("dat_8", "Wert/Konstante (8-bit)").replace("dat_16", "Wert/Konstante (16-bit)"))); //Ausgabe von erwartetten Befehlen\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("zu wenig Operanden Spezifiziert!")); //ERROR\r\n                        return false;\r\n                    }\r\n                    if (this.getScources(matches).includes(strings[1].toUpperCase()) && this.Regs.includes(strings[1].toUpperCase())) { // A || B || C || [HL]\r\n                        //ÄNDERUNG\r\n                        toSave = strings[1];\r\n                        strings[1] = strings[1].toUpperCase();\r\n                        i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + strings[1]));\r\n                        matches = matches.filter(e => {\r\n                            if (e.getSource() == strings[1]) {\r\n                                return e;\r\n                            }\r\n                        });\r\n                        //console.log(matches);\r\n                        if (matches.length == 1) {\r\n                            //ÄNDERUNG\r\n                            i.setThirdPart(toSave);\r\n                            // i.setThirdPart(strings[1]);\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            //console.log(matches[0].toString());\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (this.getDataType(strings[1]) != DataType.NONE) {\r\n                        let type = this.getDataType(strings[1]);\r\n                        switch (type) {\r\n                            case DataType.dat_8:\r\n                                if (consoletostring.includes("dat_8")) {\r\n                                    //i.saveDescriptionLine(`Gefunden -> \'dat_8\'`);\r\n                                    i.saveDescriptionLine(this.formatGefunden("Wert/Konstante (8-bit) " + Manipulator.formatHextoDat8(strings[1]), i.getFirstPart() + " " + i.getSecondPart() + ", " + Manipulator.formatHextoDat8(strings[1])));\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "dat_8") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    // Änderung\r\n                                    // i.setThirdPart(Manipulator.formatHextoDat8(strings[1]));\r\n                                    i.setThirdPart((strings[1]));\r\n                                    break;\r\n                                }\r\n                                else if (consoletostring.includes("dat_16")) {\r\n                                    //i.saveDescriptionLine(`Gefunden -> \'dat_16\'`);\r\n                                    i.saveDescriptionLine(this.formatGefunden("Wert/Konstante (16-bit) " + Manipulator.formatHextoDat16(strings[1]), i.getFirstPart() + " " + i.getSecondPart() + ", " + Manipulator.formatHextoDat16(strings[1])));\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "dat_16") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    // Änderung\r\n                                    i.setThirdPart((strings[1]));\r\n                                    // i.setThirdPart(Manipulator.formatHextoDat16(strings[1]));\r\n                                    break;\r\n                                }\r\n                                else if (consoletostring.includes("dat_8")) {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`erwartet war Wert/Konstante (8-bit), ${strings[1]} ist kein gültiger Operand`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                else {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist kein gültiger Operand`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                            case DataType.dat_16:\r\n                                if (consoletostring.includes("dat_16") && [\'HL\', \'SP\', \'IX\'].includes(strings[0])) {\r\n                                    //i.saveDescriptionLine(`Gefunden -> \'dat_16\'`);\r\n                                    i.saveDescriptionLine(this.formatGefunden("Wert/Konstante (16-bit) " + Manipulator.formatHextoDat16(strings[1]), i.getFirstPart() + " " + i.getSecondPart() + ", " + Manipulator.formatHextoDat16(strings[1])));\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "dat_16") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    // Änderung\r\n                                    // i.setThirdPart(Manipulator.formatHextoDat16(strings[1]));\r\n                                    i.setThirdPart((strings[1]));\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist ein ungültiger Operand!`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                break;\r\n                            case DataType.CONSTANT:\r\n                                if (!consoletostring.includes("dat_8") || !consoletostring.includes("dat_16")) {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist ein ungülitger Operand!`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                let value = this.symbollist.getSpecificConstantByName(strings[1])?.getValue();\r\n                                //i.saveDescriptionLine(`Gefunden Constante mit dem Wert ${value}`);\r\n                                if (value == undefined) {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`Wert für Konstante ${strings[1]} nicht gefunden!`));\r\n                                    i.setError(strings[1]);\r\n                                    return false;\r\n                                }\r\n                                i.saveDescriptionLine(this.formatGefunden("Konstante" + strings[1] + " mit dem Wert " + value, i.getFirstPart() + " " + i.getSecondPart() + ", " + strings[1]));\r\n                                type = this.getDataType(value);\r\n                                if (consoletostring.includes("dat_8") && type == DataType.dat_8) { //Konstante hat Datentyp \'dat_8\'\r\n                                    //i.saveDescriptionLine(`Größe von ${strings[1]} ist \'dat_8\'`);\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "dat_8") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    break;\r\n                                }\r\n                                else if (consoletostring.includes("dat_16")) { //Konstante hat Datentyp \'dat_16\'\r\n                                    //i.saveDescriptionLine(`Größe von ${strings[1]} ist \'dat_16\'`);\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "dat_16") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    break;\r\n                                }\r\n                                else if (consoletostring.includes("dat_8")) {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`erwartet war Wert/Konstante (8-bit), ${strings[1]} ist ein ungültiger Operand`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                else {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist ein ungültiger Operand!`));\r\n                                    i.setError(strings[1]);\r\n                                    return false;\r\n                                }\r\n                                break;\r\n                            case DataType.LABEL:\r\n                                if (!consoletostring.includes("label")) {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist ein ungültiger Operand!`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                //i.saveDescriptionLine(`Gefunden \'label\'\\n ${commands[1]} ist ein bereits existierender \'label\'`);\r\n                                let value1 = this.symbollist.getSpecificLabelByName(strings[1]);\r\n                                i.saveDescriptionLine(this.formatGefunden("Label " + `\'${value1?.getName()}\'`, i.getFirstPart() + " " + i.getSecondPart() + ", " + value1?.getName()));\r\n                                i.setThirdPart(strings[1]);\r\n                                matches = matches.filter(e => {\r\n                                    if (e.getSource() == "label") {\r\n                                        return e;\r\n                                    }\r\n                                });\r\n                                break;\r\n                            case DataType.ELLIGIBLE:\r\n                                if (!consoletostring.includes("label")) {\r\n                                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist ein ungültiger Operand!`));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                //i.saveDescriptionLine(`Gefunden \'label\'\\n ${strings[1]} als neue \'label\' definiert`);\r\n                                this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                                i.saveDescriptionLine(this.formatGefunden("Label " + `\'${strings[1]}\'`, i.getFirstPart() + " " + i.getSecondPart() + ", " + strings[1]));\r\n                                i.setThirdPart(strings[1]);\r\n                                matches = matches.filter(e => {\r\n                                    if (e.getSource() == "label") {\r\n                                        return e;\r\n                                    }\r\n                                });\r\n                                break;\r\n                            default:\r\n                                i.saveDescriptionLine(this.formatErrorMassage("Something went wrong!"));\r\n                                return false;\r\n                        }\r\n                        if (matches.length == 1) {\r\n                            i.setThirdPart(strings[1]);\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            //console.log(matches[0].toString());\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} kein gültiger Operand`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.symbollist.isLabel(strings[0]) || this.symbollist.isEligible(strings[0])) { // MUSS label sein\r\n                    i.saveDescriptionLine(this.formatGefunden("Label \'" + strings[0] + "\'", i.getFirstPart() + " " + strings[0]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    i.setSecondPart(strings[0]);\r\n                    if (!this.symbollist.isLabel(strings[0])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[0]);\r\n                        // i.saveDescriptionLine(`Neue Label angesetzt!`);\r\n                    }\r\n                    save4(i);\r\n                    consoletostring = this.getScources(matches).join(", ");\r\n                    i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                        return false;\r\n                    }\r\n                    if (this.getScources(matches).includes(strings[1].toUpperCase())) {\r\n                        //ÄNDERUNG\r\n                        toSave = strings[1];\r\n                        strings[1] = strings[1].toUpperCase();\r\n                        i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], i.getFirstPart() + " " + i.getFirstPart() + strings[1]));\r\n                        matches = matches.filter(e => {\r\n                            if (e.getSource() == strings[1]) {\r\n                                return e;\r\n                            }\r\n                        });\r\n                        if (matches.length == 1) {\r\n                            //ÄNDERUNG\r\n                            i.setThirdPart(toSave);\r\n                            // i.setThirdPart(strings[1]);\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            //console.log(matches[0].toString());\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist kein gültiger Operand!`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} kein gültiger Operand!`));\r\n                    i.setError(strings[0]);\r\n                    if (strings[1] != undefined) {\r\n                        i.setRest(", " + strings[1]);\r\n                    }\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'PUSH\':\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'PUSH\'; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("zu viele Operanden!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                else {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'POP\':\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'POP\'; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("zu viele Operanden!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                else {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'IN\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'IN\'; });\r\n                i.saveDescriptionLine(this.formatErwartet("A"));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                    return false;\r\n                }\r\n                strings = Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                if (strings[0].toUpperCase() == "A") {\r\n                    i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + strings[0]));\r\n                    i.setSecondPart(strings[0]);\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("Wert/Konstante (8-bit)"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                        return false;\r\n                    }\r\n                    if (this.symbollist.isConst(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], i.getFirstPart().toUpperCase() + " " + i.getSecondPart() + ", " + strings[1]));\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (Manipulator.isDat_8(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden("Wert (8-bit) " + Manipulator.formatHextoDat8(strings[1]), i.getFirstPart().toUpperCase() + " " + i.getSecondPart() + ", " + Manipulator.formatHextoDat8(strings[1])));\r\n                        // Änderung\r\n                        // i.setThirdPart(Manipulator.formatHextoDat8(strings[1]));\r\n                        i.setThirdPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} kein gültiger Operand!`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} kein gültiger Operand!`));\r\n                    i.setError(strings[0]);\r\n                    if (strings[1] != undefined) {\r\n                        i.setRest(", " + strings[1]);\r\n                    }\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'OUT\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'OUT\'; });\r\n                i.saveDescriptionLine(this.formatErwartet("Wert/Konstante (8-bit)"));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                    return false;\r\n                }\r\n                strings = Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                if (this.symbollist.isConst(strings[0])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0]));\r\n                    i.setSecondPart(strings[0]);\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("A"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                        return false;\r\n                    }\r\n                    if (strings[1].toUpperCase() == "A") {\r\n                        i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + i.getSecondPart() + ", A"));\r\n                        //ÄNDERUNG\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator.isDat_8(strings[0])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Wert (8-bit) " + Manipulator.formatHextoDat8(strings[0]), i.getFirstPart().toUpperCase() + " " + Manipulator.formatHextoDat8(strings[0])));\r\n                    // Änderung\r\n                    // i.setSecondPart(Manipulator.formatHextoDat8(strings[0]));\r\n                    i.setSecondPart((strings[0]));\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("A"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                        return false;\r\n                    }\r\n                    if (strings[1].toUpperCase() == "A") {\r\n                        i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + i.getSecondPart() + ", A"));\r\n                        //ÄNDERUNG\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} kein gültiger Operand!`));\r\n                    i.setError(strings[0]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'INC\':\r\n            case \'DEC\':\r\n                save3(i);\r\n                //ÄNDERUNG\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                    return false;\r\n                }\r\n                //ÄNDERUNG\r\n                toSave = strings[1];\r\n                strings[1] = strings[1].toUpperCase();\r\n                if (this.getDests(matches).includes(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1]) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                    i.setError(strings[1]);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'ADD\':\r\n            case \'SUB\':\r\n            case \'AND\':\r\n                save3(i);\r\n                //ÄNDERUNG\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                    return false;\r\n                }\r\n                if (this.getDests(matches).includes(strings[1].toUpperCase())) {\r\n                    //ÄNDERUNG\r\n                    toSave = strings[1];\r\n                    strings[1] = strings[1].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1].toUpperCase()) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.symbollist.isConst(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator.isDat_8(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Wert (8-bit) " + Manipulator.formatHextoDat8(strings[1]), strings[0] + " " + Manipulator.formatHextoDat8(strings[1])));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        // Änderung\r\n                        // i.setSecondPart(Manipulator.formatHextoDat8(strings[1]));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                    i.setError(strings[1]);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'OR\':\r\n            case \'XOR\':\r\n            case \'CP\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlender Operand!"));\r\n                    return false;\r\n                }\r\n                if (this.getDests(matches).includes(strings[1].toUpperCase())) {\r\n                    //ÄNDERUNG\r\n                    toSave = strings[1];\r\n                    strings[1] = strings[1].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1].toUpperCase()) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.symbollist.isConst(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator.isDat_8(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Wert (8-bit) " + Manipulator.formatHextoDat8(strings[1]), strings[0] + " " + Manipulator.formatHextoDat8(strings[1])));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        // Änderung\r\n                        // i.setSecondPart(Manipulator.formatHextoDat8(strings[1]));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                    i.setError(strings[1]);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'SHL\':\r\n            case \'SHR\':\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("zu viel Operanden!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    //console.log(matches[0].toString());\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                    return false;\r\n                }\r\n            case \'RCL\':\r\n            case \'ROL\':\r\n            case \'RCR\':\r\n            case \'ROR\':\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("zu viel Operanden!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    //console.log(matches[0].toString());\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                    return false;\r\n                }\r\n            case \'JPNZ\':\r\n            case \'JPZ\':\r\n            case \'JPNC\':\r\n            case \'JPC\':\r\n            case \'JPNO\':\r\n            case \'JPO\':\r\n            case \'JPNS\':\r\n            case \'JPS\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlende Operanden!"));\r\n                    return false;\r\n                }\r\n                if (this.symbollist.isLabel(strings[1]) || this.symbollist.isEligible(strings[1])) { // MUSS label sein\r\n                    i.saveDescriptionLine(this.formatGefunden("Label \'" + strings[1] + "\'", strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // i.saveDescriptionLine(`Neue Label angesetzt!`);\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'JP\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "JP"; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlende Operanden!"));\r\n                    return false;\r\n                }\r\n                if (this.symbollist.isLabel(strings[1]) || this.symbollist.isEligible(strings[1])) { // MUSS label sein\r\n                    i.saveDescriptionLine(this.formatGefunden("Label \'" + strings[1] + "\'", strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // i.saveDescriptionLine(`Neue Label angesetzt!`);\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'CALL\':\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "CALL"; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("fehlende Operanden!"));\r\n                    return false;\r\n                }\r\n                if (strings[1] == "[IX]") {\r\n                    matches = this.mnemoCommands.filter(e => { return e.getDestination() == "[IX]"; });\r\n                    if (matches.length == 1) {\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.symbollist.isLabel(strings[1]) || this.symbollist.isEligible(strings[1])) { // MUSS label sein\r\n                    i.saveDescriptionLine(this.formatGefunden("Label \'" + strings[1] + "\'", strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // i.saveDescriptionLine(`Neue Label angesetzt!`);\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage(strings[1] + " ist kein gültiger Operand!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'RET\':\r\n            case \'HALT\':\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("zu viel Operanden!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    //console.log(matches[0].toString());\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'NOP\':\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "NOP"; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("zu viel Operanden!"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));\r\n                    return false;\r\n                }\r\n                break;\r\n            default:\r\n                i.saveDescriptionLine(this.formatErrorMassage(" unknown error occured"));\r\n                return false;\r\n        }\r\n    }\r\n    parsetoPseudoMnemoCode(i, strings) {\r\n        if (this.pseudoMCodes.includes(strings[0].toUpperCase())) {\r\n            i.setFirstPart(strings[0]);\r\n            strings[0] = strings[0].toUpperCase();\r\n            i.saveDescriptionLine(this.formatGefunden(`Pseudo-Mnemocode ${strings[0]}`, strings[0]));\r\n            if (strings.length < 2) {\r\n                i.saveDescriptionLine(this.formatErrorMassage("fehlende Operanden"));\r\n                return false;\r\n            }\r\n            switch (strings[0]) {\r\n                case \'RS\':\r\n                    i.saveDescriptionLine(this.formatErwartet("Wert/Konstante (8-bit)"));\r\n                    save3(i);\r\n                    if (Manipulator.isDat_8(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`Wert/Konstante (16-bit)`, strings[0] + " " + Manipulator.formatHextoDat16(strings[1])));\r\n                        // Änderung\r\n                        // i.setSecondPart(Manipulator.formatHextoDat8(strings[1]));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setLength(Manipulator.formatHextoDat8(strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        let Hcode = "";\r\n                        for (let i = 0; i < Manipulator.hexToDec(strings[1]); i++) {\r\n                            Hcode += \'00\';\r\n                        }\r\n                        i.setHCode(Hcode);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} ist kein Wert/Konstante (8-bit)!`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'DW\':\r\n                    // i.saveDescriptionLine(this.formatErwartet("Wert/Konstante (16-bit) oder OFFSET Label"));\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("Wert/Konstante (8/16-bit)"));\r\n                    if (Manipulator.isDat_16(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`Wert/Konstante (16-bit)`, strings[0] + " " + Manipulator.formatHextoDat16(strings[1])));\r\n                        i.setLength(2);\r\n                        // Änderung\r\n                        // i.setSecondPart(Manipulator.formatHextoDat16(strings[1]));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} is keine Konstante (16-bit)!`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'DB\':\r\n                    // i.saveDescriptionLine(this.formatErwartet("Wert(en)/Konstante(n) (8-bit)"));\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("Konstante (8-bit)"));\r\n                    if (Manipulator.isDat_8(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`Wert/Konstante (8-bit)`, strings[0] + " " + Manipulator.formatHextoDat8(strings[1])));\r\n                        i.setLength(1);\r\n                        // Änderung\r\n                        // i.setSecondPart(Manipulator.formatHextoDat8(strings[1]));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} is keine Konstante (8-bit)!`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'ORG\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("Wert/Konstante (8/16-bit)"));\r\n                    if (Manipulator.isDat_16(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`Wert/Konstante (16-bit)`, strings[0] + " " + Manipulator.formatHextoDat16(strings[1])));\r\n                        i.setLength(Manipulator.hexToDec(strings[1]));\r\n                        // Änderung\r\n                        // i.setSecondPart(Manipulator.formatHextoDat16(strings[1]));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${strings[1]} is kein Wert/Konstante (16-bit)!`));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'EXT\':\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`Pseudo-Mnemocode \'EXT\' ist nicht unterstützt!`));\r\n                    i.setFirstPart(\'EXT\');\r\n                    return false;\r\n                    break;\r\n                case \'ENT\':\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`Pseudo-Mnemocode \'ENT\' ist nicht unterstützt!`));\r\n                    i.setFirstPart(\'ENT\');\r\n                    return false;\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(this.formatErrorMassage("unkown error"));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                    break;\r\n            }\r\n        }\r\n        else if (this.symbollist.isEligible(strings[0]) && !this.symbollist.isConst(strings[0]) && !this.symbollist.isLabel(strings[0]) && i.getLabel() == "") {\r\n            i.saveDescriptionLine(this.formatGefunden(`Konstante ${strings[0]}`, strings[0]));\r\n            save2(i);\r\n            i.saveDescriptionLine(this.formatErwartet(`EQU`));\r\n            if (strings.length < 2) {\r\n                i.saveDescriptionLine(this.formatErrorMassage(`fehlender Operand!`));\r\n                i.setError(strings[0]);\r\n                return false;\r\n            }\r\n            let new_commands = Manipulator.splitStringHalf(strings[1], " ");\r\n            new_commands = this.filterForEmtpyStrings(new_commands);\r\n            i.setFirstPart(strings[0]);\r\n            if (new_commands[0].toUpperCase() == "EQU") {\r\n                i.saveDescriptionLine(this.formatGefunden("EQU", i.getFirstPart() + " EQU"));\r\n                i.saveDescriptionLine(`<span class="gray">parse Operandenfeld</span>`);\r\n                i.saveDescriptionLine(this.formatErwartet(`Wert/Konstante (16-bit)`));\r\n                i.setSecondPart(new_commands[0]);\r\n                if (new_commands.length > 1) {\r\n                    let type = this.getDataType(new_commands[1]);\r\n                    if (type == DataType.dat_8) {\r\n                        i.saveDescriptionLine(this.formatGefunden(` Wert (8-bit) ${Manipulator.formatHextoDat8(new_commands[1])}`, i.getFirstPart() + " " + new_commands[0] + " " + Manipulator.formatHextoDat8(new_commands[1])));\r\n                        // Änderung\r\n                        // i.setThirdPart(Manipulator.formatHextoDat8(new_commands[1]));\r\n                        i.setThirdPart((new_commands[1]));\r\n                        i.setValid(true);\r\n                        this.symbollist.setConst(strings[0], new_commands[1]);\r\n                        return true;\r\n                    }\r\n                    else if (type == DataType.dat_16) {\r\n                        i.saveDescriptionLine(this.formatGefunden(` Wert (16-bit) ${Manipulator.formatHextoDat16(new_commands[1])}`, i.getFirstPart() + " " + new_commands[0] + " " + Manipulator.formatHextoDat16(new_commands[1])));\r\n                        // Änderung\r\n                        // i.setThirdPart(Manipulator.formatHextoDat16(new_commands[1]));\r\n                        i.setThirdPart((new_commands[1]));\r\n                        i.setValid(true);\r\n                        this.symbollist.setConst(strings[0], new_commands[1]);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(this.formatErrorMassage(`${new_commands[1]} ist kein gültiger Wert/Konstante (8 oder 16-bit)`));\r\n                        i.setError(new_commands[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    // i.saveDescriptionLine(this.formatErrorMassage(`kein Wert/Konstante (8 oder 16-bit) gefunden!`));\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`fehlender Operand!`));\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(this.formatErrorMassage(`${new_commands[0]} ist kein gültiger Operand!`));\r\n                i.setError(new_commands[0]);\r\n                i.setRest(new_commands[1]);\r\n                return false;\r\n            }\r\n        }\r\n        else if (this.symbollist.isConst(strings[0]) || this.symbollist.isLabel(strings[0])) {\r\n            i.saveDescriptionLine(this.formatErrorMassage("es gibt bereits eine Konstante/Label mit dem Namen " + strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (!this.symbollist.isEligible(strings[1])) {\r\n            i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} ist keine gültige Konstante`));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (i.getLabel() != "") {\r\n            i.saveDescriptionLine(this.formatErrorMassage("keine Konstantendefinition nach einem Labeldefinition erlaubt"));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            i.saveDescriptionLine(this.formatErrorMassage(`unkown error`));\r\n            i.setError(strings[0]);\r\n            return false;\r\n        }\r\n    }\r\n    getDataType(addr) {\r\n        if (this.Regs.includes(addr) || this.pseudoMCodes.includes(addr) || this.mCodes.includes(addr)) {\r\n            return DataType.NONE;\r\n        }\r\n        if (Manipulator.isDat_8(addr)) {\r\n            return DataType.dat_8;\r\n        }\r\n        else if (Manipulator.isDat_16(addr)) {\r\n            return DataType.dat_16;\r\n        }\r\n        else if (this.symbollist.isConst(addr)) {\r\n            return DataType.CONSTANT;\r\n        }\r\n        else if (this.symbollist.isLabel(addr)) {\r\n            return DataType.LABEL;\r\n        }\r\n        else if (this.symbollist.isEligible(addr)) {\r\n            return DataType.ELLIGIBLE;\r\n        }\r\n        else\r\n            return DataType.NONE;\r\n    }\r\n    getMaxLen(m) {\r\n        let n = [];\r\n        m.forEach(e => {\r\n            if (!n.includes(e.getLength())) {\r\n                n.push(e.getLength());\r\n            }\r\n        });\r\n        return Math.max(...n);\r\n    }\r\n    getMCodes() {\r\n        let addr = [];\r\n        this.mnemoCommands.forEach(element => {\r\n            if (!addr.includes(element.getMCode())) {\r\n                addr.push(element.getMCode());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n    getDests(commands) {\r\n        let addr = [];\r\n        commands.forEach(element => {\r\n            if (!addr.includes(element.getDestination()) && element.getDestination() != "") {\r\n                addr.push(element.getDestination());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n    getScources(commands) {\r\n        let addr = [];\r\n        commands.forEach(element => {\r\n            if (!addr.includes(element.getSource()) && element.getSource() != "") {\r\n                addr.push(element.getSource());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/InputLineControl.ts\n\r\n\r\n\r\n\r\n\r\nclass InputLineControl {\r\n    constructor() {\r\n        this.inputstrings = [];\r\n        this.inputlines = [];\r\n        this.symbolliste = SymbolList.getInstance();\r\n        this.map = CommandMap.getInstance();\r\n        this.IDcounter = 0;\r\n        this.translatedIDs = [];\r\n        this.invalidIDs = [];\r\n        this.startingAddrOfTranslated = 0;\r\n        this.hasInvalid = () => {\r\n            if (this.invalidIDs.length == 0) {\r\n                return false;\r\n            }\r\n            else\r\n                return true;\r\n        };\r\n        this.getInvalidIDs = () => {\r\n            return this.invalidIDs;\r\n        };\r\n        this.getInvalidInputLines = () => {\r\n            let invalidInputllines = [];\r\n            this.inputlines.forEach(e => {\r\n                if (this.invalidIDs.includes(e.getId())) {\r\n                    invalidInputllines.push(e);\r\n                }\r\n            });\r\n            return invalidInputllines;\r\n        };\r\n        this.reset = () => {\r\n            this.IDcounter = 0;\r\n            this.startingAddrOfTranslated = 0;\r\n            this.inputlines = [];\r\n            this.translatedIDs = [];\r\n            this.invalidIDs = [];\r\n            this.symbolliste.empty();\r\n        };\r\n        this.addInputLines = (inputStrings) => {\r\n            this.reset();\r\n            inputStrings.forEach(e => {\r\n                this.addInputLine(e);\r\n            });\r\n        };\r\n        this.addInputLine = (inputString) => {\r\n            let i = new InputLine(inputString, this.IDcounter);\r\n            if (i.getType() == InputLineType.EMPTY) {\r\n                this.inputlines.push(i);\r\n                this.IDcounter = this.IDcounter + 1;\r\n                return;\r\n            }\r\n            this.map.mapInputLineByCase(i);\r\n            this.createSummary(i);\r\n            this.inputlines.push(i);\r\n            if (i.getValid()) {\r\n                this.calculateStartingAddr(i);\r\n                this.calculateTranslation(i, false);\r\n                if (i.hasLabel()) {\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n            }\r\n            else {\r\n                if (i.getLabel() != "") {\r\n                    this.symbolliste.removeLabel(i.getLabel());\r\n                }\r\n                this.invalidIDs.push(this.IDcounter);\r\n            }\r\n            this.IDcounter = this.IDcounter + 1;\r\n            // console.log(i);\r\n        };\r\n        this.calculateStartingAddr = (i) => {\r\n            let e = (i != null ? i : this.inputlines[this.IDcounter]);\r\n            if (e.getType() == InputLineType.TRANSLATED) {\r\n                if (this.startingAddrOfTranslated == 0) {\r\n                    e.setStartingAddr(\'0000h\');\r\n                }\r\n                else {\r\n                    e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                }\r\n                this.translatedIDs.push(this.IDcounter);\r\n                this.startingAddrOfTranslated = this.startingAddrOfTranslated + e.getLength();\r\n            }\r\n            if (e.getFirstPart().toUpperCase() == \'ORG\') {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                this.startingAddrOfTranslated = e.getLength();\r\n            }\r\n        };\r\n        this.calculateRest = (...addr) => {\r\n            let n = 0;\r\n            let rest;\r\n            let newS = addr;\r\n            addr.forEach(e => {\r\n                if (e == "????" || undefined || "") {\r\n                }\r\n                else if (Manipulator.isHex(e)) {\r\n                    if (Manipulator.isDat_8(e)) {\r\n                        n = n - Manipulator.hexToDec(e);\r\n                    }\r\n                    else {\r\n                        rest = Manipulator.splitDat16InDat8(e);\r\n                        n = n - Manipulator.hexToDec(rest[0]);\r\n                        n = n - Manipulator.hexToDec(rest[1]);\r\n                    }\r\n                }\r\n                else {\r\n                    n = n - Number(e);\r\n                }\r\n            });\r\n            while (n < 0) {\r\n                n = n + 256;\r\n            }\r\n            return String(n);\r\n        };\r\n        this.calculateTranslation = (i, flag) => {\r\n            let e = (i != null ? i : this.inputlines[this.IDcounter]);\r\n            if (e.getType() == InputLineType.TRANSLATED) {\r\n                let rest = "";\r\n                let addr = "";\r\n                let h = "";\r\n                let hex = e.getHCode();\r\n                if (e.getStartingAddr() == \'0000h\') {\r\n                    addr = \'0000h\';\r\n                }\r\n                else {\r\n                    addr = this.fHD16(e.getStartingAddr());\r\n                }\r\n                if (e.getFirstPart().toUpperCase() == \'RS\') {\r\n                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr));\r\n                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${hex}${this.fHD8WH(rest)}`);\r\n                }\r\n                else if (e.getFirstPart().toUpperCase() == \'DB\') {\r\n                    h = e.getSecondPart();\r\n                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                }\r\n                else if (e.getFirstPart().toUpperCase() == \'DW\') {\r\n                    h = e.getSecondPart();\r\n                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                }\r\n                else {\r\n                    switch (e.getLength()) {\r\n                        case 1:\r\n                            if (Manipulator.isDat_8(hex)) {\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8`);\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            if (Manipulator.isDat_8(hex)) {\r\n                                /* let type= this.map.getDataType(e.getSecondPart()); */\r\n                                if (this.map.getDataType(e.getSecondPart()) == DataType.dat_8) {\r\n                                    /* if(type==DataType.LABEL){\r\n                                        h=(this.symbolliste.getSpecificLabelByName(e.getSecondPart())==undefined)\r\n                                    } */\r\n                                    h = e.getSecondPart();\r\n                                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else if (this.map.getDataType(e.getThirdPart()) == DataType.dat_8) {\r\n                                    h = e.getThirdPart();\r\n                                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, e.getThirdPart()));\r\n                                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else {\r\n                                    console.log(`${e.getId()} cannot be translated! Case2 failed!`);\r\n                                }\r\n                            }\r\n                            else if (Manipulator.isDat_16(hex)) {\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), hex, addr));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8 or dat_16`);\r\n                            }\r\n                            break;\r\n                        case 3:\r\n                            if (Manipulator.isDat_8(hex)) {\r\n                                /* let type= this.map.getDataType(e.getSecondPart()); */\r\n                                if (this.map.getDataType(e.getSecondPart()) != DataType.NONE) {\r\n                                    if (!Manipulator.isDat_16(e.getSecondPart()) && this.symbolliste.isLabel(e.getSecondPart())) {\r\n                                        //if(this.map.getDataType(e.getSecondPart())==DataType.LABEL||this.map.getDataType(e.getSecondPart())==DataType.ELLIGIBLE){\r\n                                        h = this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart());\r\n                                        //console.log(this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart()));\r\n                                        h = (h == undefined ? "????" : h);\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        //console.log(h+\'\\n\'+rest)\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${flag ? h.replace(/h$/, "") : "????"}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    else {\r\n                                        h = e.getSecondPart();\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        //console.log(h+\'\\n\'+rest)\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    //rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr,h));\r\n                                    //e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else if (this.map.getDataType(e.getThirdPart()) != DataType.NONE) {\r\n                                    if (!Manipulator.isDat_16(e.getThirdPart()) && this.symbolliste.isLabel(e.getThirdPart())) {\r\n                                        //if(this.map.getDataType(e.getThirdPart())==DataType.LABEL||this.map.getDataType(e.getThirdPart())==DataType.ELLIGIBLE){\r\n                                        h = this.symbolliste.getPositionOfSpecificLabel(e.getThirdPart());\r\n                                        h = (h == undefined ? "????" : h);\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${flag ? h.replace(/h$/, "") : "????"}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    else {\r\n                                        h = e.getThirdPart();\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    //rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr,h));\r\n                                    //e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else {\r\n                                    console.log(`${e.getId()} cannot be translated! Case3 failed!`);\r\n                                }\r\n                            }\r\n                            else if (Manipulator.isDat_16(hex)) {\r\n                                if (this.map.getDataType(e.getSecondPart()) == DataType.dat_8) {\r\n                                    /* if(type==DataType.LABEL){\r\n                                        h=(this.symbolliste.getSpecificLabelByName(e.getSecondPart())==undefined)\r\n                                    } */\r\n                                    h = e.getSecondPart();\r\n                                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else if (this.map.getDataType(e.getThirdPart()) == DataType.dat_8) {\r\n                                    h = e.getThirdPart();\r\n                                    rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                    e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else {\r\n                                    console.log(`${e.getId()} cannot be translated! Case3 failed!`);\r\n                                }\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8 or dat_16`);\r\n                            }\r\n                            break;\r\n                        case 4:\r\n                            if (Manipulator.isDat_16(hex)) {\r\n                                if (this.map.getDataType(e.getSecondPart()) != DataType.NONE) {\r\n                                    if (!Manipulator.isDat_16(e.getSecondPart()) && this.symbolliste.isLabel(e.getSecondPart())) {\r\n                                        //if(this.map.getDataType(e.getSecondPart())==DataType.LABEL||this.map.getDataType(e.getSecondPart())==DataType.ELLIGIBLE){\r\n                                        h = this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart());\r\n                                        h = h == undefined ? "????" : h;\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${flag ? h.replace(/h$/, "") : "????"}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    else {\r\n                                        h = e.getSecondPart();\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    //rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr,h));\r\n                                    //e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else if (this.map.getDataType(e.getThirdPart()) != DataType.NONE) {\r\n                                    if (!Manipulator.isDat_16(e.getThirdPart()) && this.symbolliste.isLabel(e.getThirdPart())) {\r\n                                        //if(this.map.getDataType(e.getThirdPart())==DataType.LABEL||this.map.getDataType(e.getThirdPart())==DataType.ELLIGIBLE){\r\n                                        h = this.symbolliste.getPositionOfSpecificLabel(e.getThirdPart());\r\n                                        h = h == undefined ? "????" : h;\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${flag ? h.replace(/h$/, "") : "????"}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    else {\r\n                                        h = e.getThirdPart();\r\n                                        rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                        //console.log(h+\'\\n\'+rest);\r\n                                        e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                    }\r\n                                    //rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr,h));\r\n                                    //e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                }\r\n                                else {\r\n                                    console.log(`${e.getId()} cannot be translated! Case4 failed!`);\r\n                                }\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8 or dat_16`);\r\n                            }\r\n                            break;\r\n                        /*  default:\r\n                             rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr));\r\n                             e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${hex}${this.fHD8WH(rest)}`);\r\n                             break;\r\n                      */\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.getInputLines = () => {\r\n            return this.inputlines;\r\n        };\r\n        this.getTranslatedIDs = () => {\r\n            return this.translatedIDs;\r\n        };\r\n    }\r\n    static getInstance() {\r\n        if (!InputLineControl.instance) {\r\n            InputLineControl.instance = new InputLineControl();\r\n        }\r\n        return InputLineControl.instance;\r\n    }\r\n    setInputStrings(s) {\r\n        this.inputstrings = s;\r\n    }\r\n    getInputStrings() {\r\n        return this.inputstrings;\r\n    }\r\n    getLittleEndianOf(h) {\r\n        return Manipulator.splitDat16InDat8(h).join("");\r\n    }\r\n    checkTranslationForUnknownLabel(i) {\r\n        if (i.getType() == InputLineType.TRANSLATED) {\r\n            if (i.getTranslation().includes("????")) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    fHD16(h) {\r\n        return Manipulator.formatHextoDat16(h);\r\n    }\r\n    fHD16WH(h) {\r\n        return Manipulator.formatHextoDat16WithoutH(h);\r\n    }\r\n    fHD8(h) {\r\n        return Manipulator.formatHextoDat8(h);\r\n    }\r\n    fHD8WH(h) {\r\n        return Manipulator.formatHextoDat8WithoutH(h);\r\n    }\r\n    retranslate(i) {\r\n        this.calculateTranslation(i, true);\r\n    }\r\n    getSpeicherAbbild(i, flag) {\r\n        let s = i.commandLinetoString(true);\r\n        let h = i.getHCode();\r\n        let l = "";\r\n        let c;\r\n        // console.log(i.getCommandLine()+" ... "+i.getLength()+" ... "+i.getHCode());\r\n        if (i.getFirstPart().toUpperCase() == "RS") {\r\n            return (h.length > 4 ? "0000...(" + i.getLength() + "x)" : h);\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == "ORG") {\r\n            return "";\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == \'DB\') {\r\n            h = i.getSecondPart();\r\n            return `${this.fHD8WH(h)}`;\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == \'DW\') {\r\n            h = i.getSecondPart();\r\n            return `${this.getLittleEndianOf(h)}`;\r\n        }\r\n        else {\r\n            switch (i.getLength()) {\r\n                case 1:\r\n                    if (i.getFirstPart().toUpperCase() == "NOP") {\r\n                        return \'00\';\r\n                    }\r\n                    return this.fHD8WH(h);\r\n                    break;\r\n                case 2:\r\n                    if (Manipulator.isDat_8(i.getSecondPart())) {\r\n                        return this.fHD8WH(h) + this.fHD8WH(i.getSecondPart());\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getSecondPart())?.getValue();\r\n                        return this.fHD8WH(h) + l;\r\n                    }\r\n                    else if (Manipulator.isDat_8(i.getThirdPart())) {\r\n                        return this.fHD8WH(h) + this.fHD8WH(i.getThirdPart());\r\n                    }\r\n                    else {\r\n                        return this.fHD16WH(h);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    if (this.symbolliste.isLabel(i.getSecondPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getSecondPart());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getThirdPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getThirdPart());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart())?.getValue();\r\n                        return this.fHD8WH(h) + (l != undefined ? this.getLittleEndianOf(l) : l);\r\n                    }\r\n                    else {\r\n                        return this.fHD8WH(h) + this.getLittleEndianOf(i.getThirdPart());\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        return this.fHD16WH(h) + this.symbolliste.getSpecificConstantByName(i.getThirdPart());\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getSecondPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getSecondPart());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getThirdPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getThirdPart());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else {\r\n                        return this.fHD16WH(h) + this.getLittleEndianOf(i.getThirdPart());\r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n            return "";\r\n        }\r\n    }\r\n    createSummary(i) {\r\n        let s = i.commandLinetoString(true);\r\n        let h = i.getHCode();\r\n        let l = "";\r\n        let c;\r\n        if (i.getFirstPart().toUpperCase() == "ORG") {\r\n            saveInput(i, 5);\r\n            i.saveDescriptionLine(`<span class="eingeruckt">` + "Addresszähler = " + this.fHD16WH(String(i.getLength())) + `</span>`);\r\n        }\r\n        if (i.getType() == InputLineType.TRANSLATED) {\r\n            saveInput(i, 5);\r\n            if (i.getFirstPart().toUpperCase() == "RS") {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + s + " -> " + (h.length > 4 ? "00 (" + i.getLength() + "x)" : h) + `</span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + "Anzahl der Bytes: " + i.getLength() + `</span>`);\r\n            }\r\n            else if (i.getFirstPart().toUpperCase() == "ORG") {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + "Addresszähler = " + this.fHD16WH(String(i.getLength())) + `</span>`);\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + s + " -> " + this.getSpeicherAbbild(i, false) + `</span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + "Anzahl der Bytes: " + i.getLength() + `</span>`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Tools.ts\nconst getHtmlElement = (id) => document.getElementById(id);\r\nconst createClickListener = (id, f) => {\r\n    try {\r\n        const a = document.getElementById(id);\r\n        if (a != null) {\r\n            a.addEventListener("click", f);\r\n        }\r\n        else\r\n            throw new Error("Element " + id + " is null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst updateScroll = (id) => {\r\n    var element = getHtmlElement(id);\r\n    element.scrollTop = element.scrollHeight;\r\n};\r\nconst updateScrollOfIn_Out = (id, targetID, n) => {\r\n    var elem = getHtmlElement(id);\r\n    var targetElem = getHtmlElement(targetID);\r\n    if (targetElem.offsetTop + targetElem.offsetHeight > elem.offsetTop + elem.clientHeight) {\r\n        console.log((targetElem.offsetTop - elem.offsetTop - elem.clientHeight) + " <-> " + elem.scrollTop);\r\n        console.log("-------------------------");\r\n        elem.scrollTop = (targetElem.offsetTop - elem.offsetTop - elem.clientHeight + targetElem.offsetHeight);\r\n    }\r\n};\r\n\n;// CONCATENATED MODULE: ./src/AnimationUtil.ts\n\r\nconst sleepFor = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\nlet speedBTN = getHtmlElement("speed");\r\nconst checkIfPaused = async () => {\r\n    while (true) {\r\n        if (aniControl.play) {\r\n            return true;\r\n        }\r\n        if (aniControl.reset) {\r\n            throw Error(\'Reset pressed\');\r\n        }\r\n        if (aniControl.stop) {\r\n            throw Error(\'Stop pressed\');\r\n        }\r\n        await sleepFor(100);\r\n    }\r\n};\r\nconst sleepUntilNextStep = async () => {\r\n    let c = aniControl.baseFrameTime;\r\n    while (true) {\r\n        if (c < 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            await sleepFor(10);\r\n            c -= 5 * (aniControl.baseFrameTime / 1000) * aniControl.speed * aniControl.speed;\r\n            await checkIfPaused();\r\n        }\r\n    }\r\n};\r\nclass AnimationControl {\r\n    constructor() {\r\n        this.resetFlags = () => {\r\n            this.start = false;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.stop = false;\r\n            this.reset = false;\r\n            this.end = false;\r\n            this.baseFrameTime = 1000;\r\n            this.speed = 1;\r\n            this.updateSpeedDisplay();\r\n        };\r\n        this.setStart = () => {\r\n            this.start = true;\r\n            this.setPlaying();\r\n        };\r\n        this.setPlaying = () => {\r\n            if (this.start && !this.stop) {\r\n                this.play = true;\r\n                this.pause = false;\r\n                this.reset = false;\r\n                this.end = false;\r\n                this.stop = false;\r\n            }\r\n        };\r\n        this.setStop = () => {\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.reset = false;\r\n            this.end = false;\r\n            this.stop = true;\r\n        };\r\n        this.setPaused = () => {\r\n            if (this.start && !this.stop) {\r\n                this.play = false;\r\n                this.pause = true;\r\n                this.reset = false;\r\n                this.end = false;\r\n            }\r\n        };\r\n        this.setReset = () => {\r\n            this.start = false;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.reset = true;\r\n            this.stop = false;\r\n            this.end = false;\r\n        };\r\n        this.setEnd = () => {\r\n            this.start = true;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.reset = false;\r\n            this.stop = false;\r\n            this.end = true;\r\n        };\r\n        this.toggle = () => {\r\n            this.play ? this.setPaused() : this.setPlaying();\r\n        };\r\n        this.setSpeed = () => {\r\n            // this.speed*=4;\r\n            // if(this.speed>500){\r\n            //     this.speed=16;\r\n            // }\r\n            // this.updateSpeedDisplay();\r\n            // console.log(this.speed);\r\n            this.speed += 1;\r\n            if (this.speed == 5) {\r\n                this.speed = 1;\r\n            }\r\n            this.updateSpeedDisplay();\r\n            // console.log(this.speed);\r\n        };\r\n        this.setFrames = (n) => {\r\n            this.frames = n;\r\n        };\r\n        this.start = false;\r\n        this.play = false;\r\n        this.pause = false;\r\n        this.stop = false;\r\n        this.reset = false;\r\n        this.end = false;\r\n        this.baseFrameTime = 1000;\r\n        this.speed = 1;\r\n        this.animationType = 0;\r\n        this.frames = 60;\r\n    }\r\n    updateSpeedDisplay() {\r\n        speedBTN.innerText = (this.speed == 1 ? "" : this.speed + "x-") + "speed";\r\n    }\r\n}\r\nconst aniControl = new AnimationControl();\r\n\n;// CONCATENATED MODULE: ./src/InputWindow.ts\n\r\n\r\n\r\nlet errorDescriptionDiv = getHtmlElement(\'ErrorDescription\');\r\nlet inputWindowContainer = getHtmlElement(\'InputWindowContainter\');\r\nclass InputWindow {\r\n    constructor(p) {\r\n        this.inputcontrol = InputLineControl.getInstance();\r\n        this.translate = () => {\r\n            try {\r\n                let s = this.InputTextAreaElement.value.split("\\n");\r\n                /* s=s.filter(e=>{\r\n                    e=Manipulator.removeExcessWhiteSpace(e);\r\n                    if(e.length>0){\r\n                        return e;\r\n                    }\r\n                }) */\r\n                if (!(s.length < 1)) {\r\n                    this.pWindow.refreshInputStrings(s);\r\n                    this.inputcontrol.addInputLines(s);\r\n                }\r\n                else {\r\n                    throw new Error(\'No InputLines!\');\r\n                }\r\n                //this.previewTranslation();\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.previewTranslation = async () => {\r\n            let s;\r\n            this.translate();\r\n            s = this.displayError();\r\n            console.log(s.length);\r\n            if (s.length > 88) {\r\n                errorDescriptionDiv.innerHTML = s;\r\n            }\r\n            else {\r\n                errorDescriptionDiv.innerHTML = `<div class="backgroundNoError"><p>Keine syntaktische Fehler!</p></div>`;\r\n            }\r\n            /*\r\n            errorDescriptionDiv.innerHTML="";\r\n            let inputs:InputLine[] = this.inputcontrol.getInputLines();\r\n            for(let i=0;i<inputs.length;i++){\r\n                previewType.checked?await this.pushPreview(inputs[i],10):this.displaySummary(inputs[i]);\r\n                // await this.pushPreview(inputs[i],10);\r\n                // this.displaySummary(inputs[i]);\r\n            }\r\n            */\r\n        };\r\n        this.consolescreensize = () => {\r\n            console.log(screen.height);\r\n            console.log(screen.width);\r\n        };\r\n        this.pushPreview = async (e, n) => {\r\n            await sleepFor(n);\r\n            errorDescriptionDiv.innerHTML += `<p> ${e.getDescriptionLine().join("</p><p>")} </p>`;\r\n            errorDescriptionDiv.innerHTML += `<p> ----------------------------------------- </p>`;\r\n            updateScroll(errorDescriptionDiv.id);\r\n            console.log(e.getTranslation());\r\n        };\r\n        this.addLinetoTextArea = (s) => {\r\n            this.InputTextAreaElement.value = "";\r\n            s.forEach(e => {\r\n                this.InputTextAreaElement.value += e + "\\n";\r\n            });\r\n        };\r\n        this.translateAndGo = async () => {\r\n            try {\r\n                await this.translate();\r\n                //if(!this.inputcontrol.hasInvalid()){\r\n                await this.pushInputLines();\r\n                await this.openEditWindow();\r\n                //}\r\n                //else window.alert(`Input has InvalidLines-> ${this.inputcontrol.getInvalidIDs()}`);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.pushInputLines = async () => {\r\n            if (this.pWindow) {\r\n                await this.pWindow.reset();\r\n                // this.pWindow.partialReset();\r\n                await this.pWindow.refreshInputLines();\r\n                await this.pWindow.displayInputLines();\r\n            }\r\n        };\r\n        this.openEditWindow = () => {\r\n            try {\r\n                aniControl.setPaused();\r\n                let b = window.getComputedStyle(inputWindowContainer);\r\n                if (b.getPropertyValue(\'visibility\') == "hidden") {\r\n                    inputWindowContainer.style.visibility = "visible";\r\n                }\r\n                else {\r\n                    inputWindowContainer.style.visibility = "hidden";\r\n                }\r\n                // console.log(this);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        // private setAutoPreview()\r\n        this.createEventListeners = () => {\r\n            try {\r\n                const inputTextArea = document.getElementById("InputTextArea");\r\n                if (inputTextArea != null) {\r\n                    inputTextArea.addEventListener("blur", this.previewTranslation);\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n            try {\r\n                const a = document.getElementById(\'EditWindowOpenButton\');\r\n                if (a != null) {\r\n                    a.addEventListener("click", this.openEditWindow);\r\n                }\r\n                else\r\n                    throw new Error("Element #EditWindowOpenButton is null!");\r\n                /* const b= document.getElementById(\'Translate\');\r\n                if(b!=null){\r\n                    b.addEventListener("click",this.translate);\r\n                }\r\n                else throw new Error("Element #Translate is null!"); */\r\n                const c = document.getElementById(\'Submit\');\r\n                if (c != null) {\r\n                    c.addEventListener("click", this.translateAndGo);\r\n                }\r\n                else\r\n                    throw new Error("Element #Submit is null!");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n            createClickListener(\'Preview\', this.previewTranslation);\r\n            createClickListener(\'GenerateDummy\', this.generateDummy);\r\n            createClickListener(\'CloseInputWindow\', this.openEditWindow);\r\n            createClickListener(\'TestThing\', this.consolescreensize);\r\n            //errorOnlyCheckBox.addEventListener(\'change\',this.setChecked);\r\n        };\r\n        this.generateDummy = () => {\r\n            this.addLinetoTextArea([\r\n                "Label1:Mov A,95h",\r\n                "Mov B,95h",\r\n                "Mov C,95h",\r\n                "Mov IX,1295h",\r\n                "Mov HL,1095h",\r\n                "Mov SP,2395h",\r\n                "Mov A,B",\r\n                "Mov A,C",\r\n                "Mov B,A",\r\n                "Mov B,C",\r\n                "Mov C,A",\r\n                "Mov C,B",\r\n                "Mov A,Label1",\r\n                "Mov HL,Label1",\r\n                "Mov IX,Label1",\r\n                "Mov Label1,A",\r\n                "Mov Label1,HL",\r\n                "Mov Label1,IX",\r\n                "MOV A,[HL]",\r\n                "MOV [HL],A",\r\n                "PUSH",\r\n                "POP",\r\n                "IN A, 67h",\r\n                "OUT 46, A",\r\n                "INC A",\r\n                "DEC A",\r\n                "ADD A",\r\n                "SUB A",\r\n                "AND A",\r\n                "OR A",\r\n                "XOR A",\r\n                "SHL",\r\n                "SHR",\r\n                "RCL",\r\n                "ROL",\r\n                "RCR",\r\n                "ROR",\r\n                "CP A",\r\n                "JP Label1",\r\n                "CALL Label1",\r\n                "RET",\r\n                "HALT",\r\n                "NOP",\r\n                "DB 45h",\r\n                "DW 45h",\r\n                "RS 3",\r\n                "ORG 2323h",\r\n                "const1 EQU 3434h",\r\n            ]);\r\n        };\r\n        this.InputWindowElement = getHtmlElement(\'InputWindow\');\r\n        this.InputTextAreaElement = getHtmlElement(\'InputTextArea\');\r\n        this.pWindow = p;\r\n    }\r\n    displayError() {\r\n        let inputs = this.inputcontrol.getInputLines();\r\n        let ss;\r\n        let toReturn = "";\r\n        //console.log(ss.find(e=>{return e.includes("error")}));\r\n        toReturn += `<div class="backgroundError"><p class="grey">Syntaxfehler in folgenden Zeilen:</p>`;\r\n        inputs.forEach(e => {\r\n            ss = e.getDescriptionLine();\r\n            if (ss.find(e => { return e.includes("error"); }) != undefined) {\r\n                toReturn += `<p>${e.getId() + 1}</p>`;\r\n            }\r\n            // console.log(e.commandLinetoString())\r\n        });\r\n        toReturn += `</div>`;\r\n        return toReturn;\r\n    }\r\n}\r\n// export iWindow:InputWindow= new InputWindow()\r\n\n;// CONCATENATED MODULE: ./src/Animator.ts\n\r\n\r\nconst sleepUntilNextFrame = async (n) => {\r\n    await sleepFor(n);\r\n    // await sleepFor(n/aniControl.speed);\r\n};\r\nclass Animator {\r\n    constructor() {\r\n        this.targetElemTop = 0;\r\n        this.targetElemLeft = 0;\r\n        this.frameSleepTime = 10;\r\n        this.turnSleepTime = 1000;\r\n        this.createMovable = () => {\r\n            let newElem;\r\n            newElem = document.createElement("div");\r\n            newElem.id = "Movable";\r\n            newElem.classList.add("testElemStyle");\r\n            newElem.style.top = `${0}`;\r\n            newElem.style.left = `${0}`;\r\n            newElem.style.width = `${50}px`;\r\n            newElem.style.height = `${50}px`;\r\n            newElem.style.visibility = "hidden";\r\n            newElem.style.zIndex = "2";\r\n            getHtmlElement("body").appendChild(newElem);\r\n            return newElem;\r\n        };\r\n        this.movingElementFlag = false;\r\n        this.movableElem = this.createMovable();\r\n        this.currentLineElem = getHtmlElement("currentLine");\r\n        this.descriptionLineElem = getHtmlElement("descriptionLines");\r\n        this.vorgangElem = getHtmlElement("Description");\r\n        this.symbolTableElem = getHtmlElement("symbolTableLines");\r\n        this.symbolTableBox = getHtmlElement("SymbolTable");\r\n        this.outPutLinesElem = getHtmlElement("OutputLines");\r\n        this.descriptionTableBox = getHtmlElement("descriptionSymboltableBox");\r\n        this.outPutText = getHtmlElement("OutputText");\r\n        this.addresszaehlerElem = getHtmlElement("Addresszahler");\r\n    }\r\n    reset() {\r\n        this.movingElementFlag = false;\r\n        this.turnMovableHidden();\r\n        this.frameSleepTime = 10;\r\n        this.turnSleepTime = 1000;\r\n    }\r\n    setMovableParameters(t, l, w, h) {\r\n        this.movableElem.style.top = t + "px";\r\n        this.movableElem.style.left = l + "px";\r\n        this.movableElem.style.height = h + "px";\r\n        this.movableElem.style.width = w + "px";\r\n    }\r\n    getPixeljump() {\r\n        return aniControl.speed + 1;\r\n    }\r\n    async animationInputLineToCurrentLine(startingTop, startingLeft, startingWidth, startingHeight, line) {\r\n        this.setMovableParameters(startingTop, startingLeft, startingWidth, this.currentLineElem.offsetHeight / 5 * 4);\r\n        // this.setMovableParameters(startingTop,startingLeft,startingWidth,startingHeight);\r\n        this.formatLineString(line);\r\n        // this.targetElemTop=this.currentLineElem.offsetTop+this.currentLineElem.offsetHeight-startingHeight;\r\n        this.targetElemTop = this.currentLineElem.offsetTop + this.currentLineElem.offsetHeight - (this.currentLineElem.offsetHeight / 5 * 4);\r\n        this.targetElemLeft = this.currentLineElem.offsetLeft;\r\n        this.turnMovableVisible();\r\n        if (this.targetElemTop > this.movableElem.offsetTop) {\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                await this.adjustHeightOfMovable(this.getPixeljump(), this.currentLineElem.offsetHeight / 5 * 4);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n        }\r\n        else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n        }\r\n        else {\r\n            while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                await this.adjustHeightOfMovable(this.getPixeljump(), this.currentLineElem.offsetHeight / 5 * 4);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n        }\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        while (this.targetElemLeft > this.movableElem.offsetLeft) {\r\n            await this.moveSleepCheck(0, this.getPixeljump());\r\n        }\r\n        this.movableElem.style.left = this.targetElemLeft + "px";\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        this.turnMovableHidden();\r\n    }\r\n    async moveLabeltoSymboltable(line) {\r\n        // console.log([this.descriptionLineElem.offsetTop,this.descriptionLineElem.offsetHeight,this.vorgangElem.offsetHeight])\r\n        this.formatLineString(line);\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight), this.descriptionLineElem.offsetLeft, this.descriptionLineElem.offsetWidth, this.vorgangElem.offsetHeight);\r\n        this.targetElemTop = this.symbolTableElem.offsetTop;\r\n        this.turnMovableVisible();\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        while (this.targetElemTop > this.movableElem.offsetTop) {\r\n            await this.moveSleepCheck(this.getPixeljump(), 0);\r\n        }\r\n        this.movableElem.style.top = this.targetElemTop + "px";\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        this.turnMovableHidden();\r\n    }\r\n    async exchangeLabelWithSymbolTable(toLine, returnLine) {\r\n        this.movableElem.innerHTML = `<h3 style="margin:0px 0px; padding: 5px 10px; font: bold; text-align: center;">${toLine}</h3>`;\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight), this.descriptionLineElem.offsetLeft, this.descriptionLineElem.offsetWidth, this.vorgangElem.offsetHeight);\r\n        this.targetElemTop = this.symbolTableElem.offsetTop;\r\n        this.turnMovableVisible();\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        while (this.targetElemTop > this.movableElem.offsetTop) {\r\n            await this.moveSleepCheck(this.getPixeljump(), 0);\r\n        }\r\n        this.movableElem.style.top = this.targetElemTop + "px";\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        this.movableElem.innerHTML = `<h3 style="margin:0px 0px; padding: 5px 10px; font: bold; text-align: center;">${returnLine}</h3>`;\r\n        this.targetElemTop = this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight;\r\n        while (this.targetElemTop < this.movableElem.offsetTop) {\r\n            await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n        }\r\n        this.movableElem.style.top = this.targetElemTop + "px";\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        this.turnMovableHidden();\r\n    }\r\n    async setTargetTopToSpeicherabbild(id) {\r\n        let childElem;\r\n        if (id < 0) {\r\n            if (this.outPutLinesElem.firstChild == null) {\r\n                this.targetElemTop = this.outPutLinesElem.offsetTop;\r\n            }\r\n            else {\r\n                childElem = getHtmlElement("01outputP");\r\n                // console.log(this.outPutLinesElem.childElementCount*childElem.offsetHeight);\r\n                // console.log(this.outPutLinesElem.offsetHeight);\r\n                // console.log(this.outPutLinesElem.offsetTop+this.outPutLinesElem.childElementCount*childElem.offsetHeight);\r\n                if (this.outPutLinesElem.childElementCount * childElem.offsetHeight < this.outPutText.offsetHeight) {\r\n                    this.targetElemTop = this.outPutLinesElem.offsetTop + this.outPutLinesElem.childElementCount * childElem.offsetHeight;\r\n                }\r\n                else {\r\n                    this.targetElemTop = this.outPutLinesElem.offsetTop + this.outPutText.offsetHeight - childElem.offsetHeight;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            childElem = getHtmlElement(`${(id + 1) < 10 ? "0" + (id + 1) : (id + 1)}outputP`);\r\n            this.targetElemTop = childElem.offsetTop;\r\n        }\r\n    }\r\n    async pushAufzulosendestoCurrentLine(i, line) {\r\n        let childelem = getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP`);\r\n        // this.setMovableParameters(childelem.offsetTop,this.outPutText.offsetLeft,this.outPutText.offsetWidth,childelem.offsetHeight);\r\n        this.setMovableParameters(childelem.offsetTop, this.outPutText.offsetLeft, this.outPutText.offsetWidth, this.currentLineElem.offsetHeight / 5 * 4);\r\n        this.formatLineString(line);\r\n        this.targetElemTop = this.currentLineElem.offsetTop + this.currentLineElem.offsetHeight - (this.currentLineElem.offsetHeight / 5 * 4);\r\n        // this.targetElemTop=this.currentLineElem.offsetTop+this.currentLineElem.offsetHeight-childelem.offsetHeight;\r\n        this.targetElemLeft = this.currentLineElem.offsetLeft;\r\n        this.turnMovableVisible();\r\n        if (this.targetElemTop > this.movableElem.offsetTop) {\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                await this.adjustHeightOfMovable(this.getPixeljump(), this.currentLineElem.offsetHeight / 5 * 4);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n        }\r\n        else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n        }\r\n        else {\r\n            while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                await this.adjustHeightOfMovable(this.getPixeljump(), this.currentLineElem.offsetHeight / 5 * 4);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n        }\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        while (this.targetElemLeft < this.movableElem.offsetLeft) {\r\n            await this.moveSleepCheck(0, -this.getPixeljump());\r\n        }\r\n        this.movableElem.style.left = this.targetElemLeft + "px";\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        this.turnMovableHidden();\r\n    }\r\n    async displayAddresserhoehung(i) {\r\n        this.setMovableParameters((this.descriptionTableBox.offsetTop + this.descriptionTableBox.offsetHeight - this.currentLineElem.offsetHeight / 5 * 4), this.descriptionTableBox.offsetLeft, this.descriptionTableBox.offsetWidth, this.currentLineElem.offsetHeight / 5 * 4);\r\n        this.formatLineString("Erhöhe Adresszähler um: " + i);\r\n        this.turnMovableVisible();\r\n        await sleepFor(4 * this.turnSleepTime / this.getPixeljump());\r\n        this.turnMovableHidden();\r\n    }\r\n    async moveDetailToSpeicherabbild(line, id) {\r\n        // this.setMovableParameters((this.descriptionTableBox.offsetTop+this.descriptionTableBox.offsetHeight-this.currentLineElem.offsetHeight/5*4),this.descriptionTableBox.offsetLeft,this.descriptionTableBox.offsetWidth,this.currentLineElem.offsetHeight/5*4);\r\n        this.setMovableParameters(this.addresszaehlerElem.offsetTop, this.descriptionTableBox.offsetLeft, this.descriptionTableBox.offsetWidth, this.currentLineElem.offsetHeight / 5 * 4);\r\n        this.formatLineString(line);\r\n        this.targetElemTop = this.outPutText.offsetTop + this.outPutText.offsetHeight - this.currentLineElem.offsetHeight / 5 * 4;\r\n        this.targetElemLeft = this.outPutText.offsetLeft;\r\n        this.turnMovableVisible();\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        while (this.targetElemTop > this.movableElem.offsetTop) {\r\n            await this.moveSleepCheck(this.getPixeljump(), 0);\r\n        }\r\n        this.movableElem.style.top = this.targetElemTop + "px";\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        while (this.targetElemLeft > this.movableElem.offsetLeft) {\r\n            await this.moveSleepCheck(0, this.getPixeljump());\r\n            await this.adjustWidthOfMovable(this.getPixeljump(), this.outPutText.offsetWidth);\r\n        }\r\n        this.movableElem.style.left = this.targetElemLeft + "px";\r\n        this.movableElem.style.width = this.outPutText.offsetWidth + "px";\r\n        await this.setTargetTopToSpeicherabbild(id);\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        if (this.targetElemTop > this.movableElem.offsetTop) {\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n        }\r\n        else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n        }\r\n        else {\r\n            while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n        }\r\n        await sleepFor(this.turnSleepTime / this.getPixeljump());\r\n        this.turnMovableHidden();\r\n    }\r\n    async moveSleepCheck(t, l) {\r\n        await this.updateMovingElement(t, l);\r\n        await sleepUntilNextFrame(this.frameSleepTime);\r\n        await checkIfPaused();\r\n    }\r\n    formatLineString(line) {\r\n        this.movableElem.innerHTML = `<h3 style="margin:0px 0px; padding: 5px 10px; font: bold;">${line}</h3>`;\r\n    }\r\n    async adjustWidthOfMovable(n, w) {\r\n        if (this.movableElem.offsetWidth + n > w && this.movableElem.offsetWidth - n < w) {\r\n            this.movableElem.style.width = this.movableElem.offsetWidth + "px";\r\n        }\r\n        else if (this.movableElem.offsetWidth > w) {\r\n            this.movableElem.style.width = (this.movableElem.offsetWidth - n) + "px";\r\n        }\r\n        else {\r\n            this.movableElem.style.width = (this.movableElem.offsetWidth + n) + "px";\r\n        }\r\n    }\r\n    async adjustHeightOfMovable(n, h) {\r\n        if (this.movableElem.offsetHeight + n > h && this.movableElem.offsetHeight - n < h) {\r\n            this.movableElem.style.height = this.movableElem.offsetHeight + "px";\r\n        }\r\n        else if (this.movableElem.offsetHeight > h) {\r\n            this.movableElem.style.height = (this.movableElem.offsetHeight - n) + "px";\r\n        }\r\n        else {\r\n            this.movableElem.style.height = (this.movableElem.offsetHeight + n) + "px";\r\n        }\r\n    }\r\n    async turnMovableHidden() {\r\n        getHtmlElement("Movable").style.visibility = "hidden";\r\n    }\r\n    async turnMovableVisible() {\r\n        getHtmlElement("Movable").style.visibility = "visible";\r\n    }\r\n    async updateMovingElement(mTop, mLeft) {\r\n        this.movableElem.style.top = (this.movableElem.offsetTop + mTop) + "px";\r\n        this.movableElem.style.left = (this.movableElem.offsetLeft + mLeft) + "px";\r\n    }\r\n}\r\n// export let animator = new Animator();\r\n\n;// CONCATENATED MODULE: ./src/ProjectWindow.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet descriptionLines = getHtmlElement(\'descriptionLines\');\r\nlet symbolTableLines = getHtmlElement(\'symbolTableLines\');\r\nlet currentLine = getHtmlElement(\'currentLine\');\r\nlet outputText = getHtmlElement(\'OutputText\');\r\nlet inputText = getHtmlElement(\'InputText\');\r\nlet addresszahler = getHtmlElement(\'Addresszahler\');\r\nlet machinenbefehl = getHtmlElement(\'Machinenbefehl\');\r\nlet outputwindowContainer = getHtmlElement(\'OutputWindowContainer\');\r\nlet OutputTextAreaElement = getHtmlElement(\'OutputTextArea\');\r\nlet InputID = getHtmlElement(\'InputID\');\r\nlet InputLines = getHtmlElement(\'InputLines\');\r\nlet OutputAddresses = getHtmlElement(\'OutputAddresses\');\r\nlet OutputLines = getHtmlElement(\'OutputLines\');\r\nconst removeClassOfAll = (s) => {\r\n    let elements = Array.from(document.querySelectorAll("." + s + ""));\r\n    for (let elem of elements) {\r\n        elem.classList.remove(s);\r\n    }\r\n};\r\nconst addClassTo = (id, cls) => {\r\n    let elem = getHtmlElement(id);\r\n    if (elem != null || elem != undefined) {\r\n        elem.classList.add(cls);\r\n    }\r\n};\r\nconst getIDOfSelected = (s) => {\r\n    return s[0] + s[1];\r\n};\r\nclass ProjectWindow {\r\n    constructor() {\r\n        this.inputLineControl = InputLineControl.getInstance();\r\n        this.symbolList = SymbolList.getInstance();\r\n        this.iWindow = new InputWindow(this);\r\n        this.linkerAuflosungB = false;\r\n        this.nextParseID = 0;\r\n        this.inputLines = [];\r\n        this.inputstrings = [];\r\n        this.symbols = [];\r\n        this.refreshInputLines = () => {\r\n            this.inputLines = this.inputLineControl.getInputLines();\r\n        };\r\n        this.openOutputWindow = () => {\r\n            try {\r\n                aniControl.setPaused();\r\n                let b = window.getComputedStyle(outputwindowContainer);\r\n                if (b.getPropertyValue(\'visibility\') == "hidden") {\r\n                    outputwindowContainer.style.visibility = "visible";\r\n                }\r\n                else {\r\n                    outputwindowContainer.style.visibility = "hidden";\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.partialReset = async () => {\r\n            this.inputLines = [];\r\n            currentLine.innerHTML = "";\r\n            symbolTableLines.innerHTML = "";\r\n            descriptionLines.innerHTML = "";\r\n            addresszahler.innerHTML = "0000h";\r\n            this.nextParseID = 0;\r\n            machinenbefehl.innerHTML = "";\r\n            OutputAddresses.innerHTML = "";\r\n            OutputLines.innerHTML = "";\r\n            OutputTextAreaElement.innerHTML = "";\r\n            await this.inputLineControl.reset();\r\n            await this.anim.reset();\r\n            await aniControl.resetFlags();\r\n            getHtmlElement("InputText").scrollTop = 0;\r\n        };\r\n        this.nextInverted = async (n) => {\r\n            if (aniControl.start) {\r\n                await sleepFor(30);\r\n            }\r\n            for (this.nextParseID; this.nextParseID < n.length; this.nextParseID++) {\r\n                if (n[this.nextParseID] == 1) {\r\n                    this.switchInvertedTo(this.nextParseID);\r\n                    this.nextParseID += 1;\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        this.switchInvertedTo = (n) => {\r\n            // removeClassOfAll("crInvert");\r\n            // console.log(n);\r\n            switch (n) {\r\n                case 0:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crLabel", "crInvert");\r\n                    break;\r\n                case 1:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crFirst", "crInvert");\r\n                    break;\r\n                case 2:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crSecond", "crInvert");\r\n                    break;\r\n                case 3:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crThird", "crInvert");\r\n                    break;\r\n                case 4:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crError", "crInvert");\r\n                    break;\r\n                case 5:\r\n                    //addClassTo("crRest","crInvert");\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        this.refreshInputListItems = () => {\r\n            InputID.innerHTML = "";\r\n            InputLines.innerHTML = "";\r\n            let ss = [];\r\n            //inputTextDiv.innerHTML="";\r\n            let e;\r\n            for (let i = 0; i < this.inputstrings.length; i++) {\r\n                e = this.inputLines[i];\r\n                if (e != null) {\r\n                    if (e.getType() == InputLineType.EMPTY) {\r\n                        InputID.innerHTML += `<p  class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                        InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP" class="overflowElipsis">${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}</p>`;\r\n                    }\r\n                    else {\r\n                        InputID.innerHTML += `<p  class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                        InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP" class="overflowElipsis">${Manipulator.formatLabelandBefehlDisplay(e.getLabel(), e.commandLinetoString(false))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}</p>`;\r\n                    }\r\n                }\r\n                else {\r\n                    InputID.innerHTML += `<p class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                    InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP"  class="overflowElipsis">${this.inputstrings[i]}&nbsp;</p>`;\r\n                }\r\n            }\r\n        };\r\n        this.refreshInputListItem = (i) => {\r\n            if (i < this.inputLines.length) {\r\n                let e = this.inputLines[i];\r\n                let idString = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`;\r\n                let inputLineHTML = getHtmlElement(idString);\r\n                // console.log(inputLineHTML);\r\n                if (e.getType() == InputLineType.EMPTY) {\r\n                    inputLineHTML.innerHTML = `${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n                else {\r\n                    inputLineHTML.innerHTML = `${Manipulator.formatLabelandBefehlDisplay(e.getLabel(), e.commandLinetoString(true))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n            }\r\n        };\r\n        this.repushSpeicherabbildOf = (i) => {\r\n            if (i < this.inputLines.length) {\r\n                let e = this.inputLines[i];\r\n                let idString = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP`;\r\n                let outputLineHTML = getHtmlElement(idString);\r\n                console.log(outputLineHTML);\r\n                if (e.getType() == InputLineType.TRANSLATED) {\r\n                    if (e.getTranslation().includes("????")) {\r\n                        outputLineHTML.innerHTML = `${this.inputLineControl.getSpeicherAbbild(e, false)}&nbsp;`;\r\n                    }\r\n                    else {\r\n                        outputLineHTML.innerHTML = `${this.inputLineControl.getSpeicherAbbild(e, true)}&nbsp;`;\r\n                    }\r\n                }\r\n                else {\r\n                    outputLineHTML.innerHTML = `&nbsp;`;\r\n                }\r\n            }\r\n        };\r\n        this.rePushSymbols = () => {\r\n            this.symbols = this.symbolList.getSequence();\r\n            let s;\r\n            let n, p;\r\n            symbolTableLines.innerHTML = "";\r\n            if (this.symbols.length != 0) {\r\n                for (let i = this.symbols.length - 1; i >= 0; i--) {\r\n                    if (this.symbols[i] != null) {\r\n                        s = this.symbols[i];\r\n                        if (s instanceof Label) {\r\n                            n = s.getName();\r\n                            p = s.getPosition();\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">Label:</span> &nbsp;&nbsp;${n} Wert:${this.inputLineControl.fHD16(p)} (little endian:${this.inputLineControl.getLittleEndianOf(p)})</h4>`;\r\n                        }\r\n                        if (s instanceof Constant) {\r\n                            n = s.getName();\r\n                            p = s.getValue();\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">Konst.:</span> &nbsp;${n} Wert:${this.inputLineControl.fHD16(p)} (little endian:${this.inputLineControl.getLittleEndianOf(p)})</h4>`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.checkInputLine = async (e) => {\r\n            let s = "";\r\n            let n = "";\r\n            let k;\r\n            if (e.getType() == InputLineType.TRANSLATED) {\r\n                if (e.getTranslation().includes("????")) {\r\n                    k = this.symbolList.getLabels().find(i => {\r\n                        if (i.getName().toLowerCase() == e.getSecondPart().toLowerCase() || i.getName().toLowerCase() == e.getThirdPart().toLowerCase()) {\r\n                            return i;\r\n                        }\r\n                    });\r\n                    // console.log(this.getLinkerAufloesungLine(e.getId()));\r\n                    if (aniControl.start) {\r\n                        await this.anim.pushAufzulosendestoCurrentLine(e.getId(), this.getLinkerAufloesungLine(e.getId(), false));\r\n                    }\r\n                    currentLine.innerHTML = `<h2 style="align-self: end;" class=" noMargin p5px">${this.getLinkerAufloesungLine(e.getId(), false)}</h2>`;\r\n                    addresszahler.innerHTML = `${e.getStartingAddr()}`;\r\n                    machinenbefehl.innerHTML = `${this.inputLineControl.getSpeicherAbbild(e, false)}`;\r\n                    descriptionLines.innerHTML += `<p>Suche Label ${k.getName()} in SymbolTabelle</p>`;\r\n                    if (aniControl.start) {\r\n                        await sleepUntilNextStep();\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    if (k.getPosition() == "????") {\r\n                        descriptionLines.innerHTML += `<p><span class="errorRed">Label \'${k.getName()}\' konnte nicht aufgelöst werden!</span></p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                        await sleepFor(10);\r\n                        aniControl.setStop();\r\n                        throw Error(\'Stop pressed\');\r\n                    }\r\n                    else {\r\n                        s = this.inputLineControl.getSpeicherAbbild(e, false);\r\n                        this.inputLineControl.retranslate(e);\r\n                        n = this.inputLineControl.getSpeicherAbbild(e, true);\r\n                        if (aniControl.start) {\r\n                            await sleepUntilNextStep();\r\n                            await this.anim.exchangeLabelWithSymbolTable("Label \'" + k.getName() + "\'?", "Label \'" + k.getName() + "\' Wert:" + Manipulator.hexToDec(k.getPosition()) + " (" + k.getPosition() + ")");\r\n                        }\r\n                        descriptionLines.innerHTML += `<p>Label \'${k.getName()}\' in Symboltabelle gefunden, Wert: ${Manipulator.hexToDec(k.getPosition()) + " (" + k.getPosition() + ")"}</p>`;\r\n                        if (aniControl.start) {\r\n                            await sleepUntilNextStep();\r\n                            updateScroll(descriptionLines.id);\r\n                        }\r\n                        descriptionLines.innerHTML += `<p>Ersetzung im Speicherabbild: ${s}--\x3e${n}</p>`;\r\n                        if (aniControl.start) {\r\n                            await sleepUntilNextStep();\r\n                            updateScroll(descriptionLines.id);\r\n                        }\r\n                        this.repushTranslations();\r\n                        machinenbefehl.innerHTML = `${n}`;\r\n                        if (aniControl.start) {\r\n                            await sleepUntilNextStep();\r\n                            await this.anim.moveDetailToSpeicherabbild(this.getLinkerAufloesungLine(e.getId(), true), e.getId());\r\n                        }\r\n                        this.repushSpeicherabbildOf(e.getId());\r\n                        descriptionLines.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                        if (aniControl.start) {\r\n                            await sleepUntilNextStep();\r\n                            updateScroll(descriptionLines.id);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            updateScroll(descriptionLines.id);\r\n        };\r\n        this.linkerAuflosung = async () => {\r\n            this.repushTranslations();\r\n            if (this.linkerAuflosungB) {\r\n                descriptionLines.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                descriptionLines.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                descriptionLines.innerHTML += `<p>************************</p>`;\r\n                descriptionLines.innerHTML += `<p>2.Phase LinkerAuflösung</p>`;\r\n                descriptionLines.innerHTML += `<p>************************</p>`;\r\n                descriptionLines.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                descriptionLines.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                updateScroll(descriptionLines.id);\r\n                for (let i = 0; i < this.inputLines.length; i++) {\r\n                    await this.checkInputLine(this.inputLines[i]);\r\n                    if (aniControl.start) {\r\n                        await sleepUntilNextStep();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.repushTranslations = async () => {\r\n            OutputTextAreaElement.innerHTML = "";\r\n            let i;\r\n            for (let j = 0; j <= this.inputLines.length; j++) {\r\n                i = this.inputLines[j];\r\n                if (i != undefined) {\r\n                    if (i.getType() == InputLineType.TRANSLATED) {\r\n                        OutputTextAreaElement.innerHTML += ":" + i.getTranslation() + "\\n";\r\n                    }\r\n                }\r\n                else {\r\n                    OutputTextAreaElement.innerHTML += ":00000001FF";\r\n                }\r\n            }\r\n        };\r\n        this.translateInputStringOfId = (n) => {\r\n            // console.log(n+" corresponds to -> "+this.inputstrings[n]);\r\n            if (n < this.inputstrings.length) {\r\n                this.inputLineControl.addInputLine(this.inputstrings[n]);\r\n                this.refreshInputLines();\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.pushLines = async () => {\r\n            let input;\r\n            let iP;\r\n            if (this.inputstrings.length > 0) {\r\n                for (let i = 0; i < this.inputstrings.length; i++) {\r\n                    this.translateInputStringOfId(i);\r\n                    if (this.inputLines.length > i) {\r\n                        input = this.inputLines[i];\r\n                        iP = getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`);\r\n                        await updateScrollOfIn_Out("InputText", `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`, i + 1);\r\n                        // await this.anim.animationInputLineToCurrentLine(iP.offsetTop,iP.offsetLeft,iP.offsetWidth,iP.offsetHeight,"");\r\n                        // console.log(i+" corresponds to -> "+input.getType()+" :: "+input.getInitialLine());\r\n                        if (input.getType() == InputLineType.EMPTY) {\r\n                            OutputAddresses.innerHTML += `<p><span class="gray">&nbsp;</span></p>`;\r\n                            OutputLines.innerHTML += `<p id="${(input.getId() + 1) < 10 ? "0" + (input.getId() + 1) : (input.getId() + 1)}outputP">&nbsp;&nbsp;&nbsp;</p>`;\r\n                        }\r\n                        else {\r\n                            if (aniControl.start) {\r\n                                await this.anim.animationInputLineToCurrentLine(iP.offsetTop, iP.offsetLeft, iP.offsetWidth, iP.offsetHeight, this.inputstrings[i]);\r\n                            }\r\n                            this.nextParseID = 0;\r\n                            // currentLine.innerHTML=this.pushCurrentLine(input.getAll());\r\n                            currentLine.innerHTML = `<h2 style="align-self: end;" class=" noMargin p5px">${input.getCommandLineToCurrentLine()}</h2>`;\r\n                            machinenbefehl.innerHTML = "";\r\n                            await this.pushDescriptionLinesOf(i);\r\n                        }\r\n                    }\r\n                }\r\n                if (aniControl.start) {\r\n                    this.toggleStop();\r\n                }\r\n                this.linkerAuflosungB = this.aufzulosendeLabel();\r\n                await this.linkerAuflosung();\r\n                console.log("finished");\r\n                aniControl.setEnd();\r\n            }\r\n        };\r\n        this.pushDescriptionLinesOf = async (i) => {\r\n            let e;\r\n            let ss;\r\n            let l;\r\n            if (this.inputLines.length > i) {\r\n                l = this.inputLines[i];\r\n                ss = l.getDescriptionLine();\r\n                for (let j = 0; j < ss.length; j++) {\r\n                    e = ss[j];\r\n                    if (aniControl.start) {\r\n                        await sleepUntilNextStep();\r\n                    }\r\n                    if (e.includes("parse")) {\r\n                        await this.nextInverted(l.getAllV());\r\n                    }\r\n                    if (e.includes(\'error\')) {\r\n                        console.log("error has been found");\r\n                        await this.nextInverted(l.getAllV());\r\n                        aniControl.setStop();\r\n                        descriptionLines.innerHTML += `<p>${e}</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                        throw Error(\'Stop pressed\');\r\n                    }\r\n                    else {\r\n                        descriptionLines.innerHTML += `<p>${e}</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    if (e.includes("gefunden: Doppelpunkte")) {\r\n                        if (aniControl.start) {\r\n                            await sleepUntilNextStep();\r\n                            await this.anim.moveLabeltoSymboltable("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + l.getLabel() + " Wert:" + this.symbolList.getPositionOfSpecificLabel(l.getLabel()));\r\n                        }\r\n                        this.rePushSymbols();\r\n                    }\r\n                    if (j - 1 > 0) {\r\n                        if (ss[j - 1].includes("gesamter")) {\r\n                            if (l.getFirstPart().toUpperCase() == "ORG") {\r\n                                this.pushTranslationOf(i);\r\n                            }\r\n                            else if (l.getEndAddr() != "") {\r\n                                machinenbefehl.innerHTML = `${this.inputLineControl.getSpeicherAbbild(l, false)}`;\r\n                                if (aniControl.start) {\r\n                                    await sleepUntilNextStep();\r\n                                    await this.anim.moveDetailToSpeicherabbild(this.getLinkerAufloesungLine(i, false), -1);\r\n                                }\r\n                                this.pushTranslationOf(i);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.symbolList.isConst(l.getFirstPart())) {\r\n                    if (aniControl.start) {\r\n                        await sleepUntilNextStep();\r\n                        await this.anim.moveLabeltoSymboltable(this.symbolList.getSpecificConstantByName(l.getFirstPart()).toStringtoMovable());\r\n                    }\r\n                    this.rePushSymbols();\r\n                    this.pushTranslationOf(i);\r\n                }\r\n                else {\r\n                    if (aniControl.start) {\r\n                        await sleepUntilNextStep();\r\n                        await this.anim.displayAddresserhoehung(l.getLength());\r\n                    }\r\n                    addresszahler.innerHTML = `${l.getEndAddr()}`;\r\n                }\r\n                descriptionLines.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> --------------------------------------------------------- </p>`;\r\n                if (aniControl.start) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                l.formatInputToDisplay();\r\n                this.refreshInputListItem(i);\r\n                updateScroll(descriptionLines.id);\r\n            }\r\n        };\r\n        this.pushTranslationOf = async (e) => {\r\n            let i;\r\n            if (this.inputLines.length > e) {\r\n                i = this.inputLines[e];\r\n                if (i.getType() == InputLineType.TRANSLATED) {\r\n                    OutputAddresses.innerHTML += `<p><span class="gray">${Manipulator.formatHextoDat16(i.getStartingAddr())}: </span></p>`;\r\n                    OutputLines.innerHTML += `<p id="${(i.getId() + 1) < 10 ? "0" + (i.getId() + 1) : (i.getId() + 1)}outputP">${this.inputLineControl.getSpeicherAbbild(i, false)}&nbsp;</p>`;\r\n                    OutputTextAreaElement.innerHTML += ":" + i.getTranslation() + "\\n";\r\n                }\r\n                else {\r\n                    OutputAddresses.innerHTML += `<p><span class="gray">&nbsp;</span></p>`;\r\n                    OutputLines.innerHTML += `<p id="${(i.getId() + 1) < 10 ? "0" + (i.getId() + 1) : (i.getId() + 1)}outputP">&nbsp;&nbsp;&nbsp;</p>`;\r\n                }\r\n            }\r\n        };\r\n        this.aufzulosendeLabel = () => {\r\n            let b = false;\r\n            this.inputLines.forEach(e => {\r\n                if (e.getTranslation().includes("????")) {\r\n                    b = true;\r\n                }\r\n            });\r\n            return b;\r\n        };\r\n        this.toggleStop = async () => {\r\n            if (this.inputstrings.length > 0) {\r\n                try {\r\n                    if (!aniControl.start) {\r\n                        aniControl.setStart();\r\n                        await this.play();\r\n                    }\r\n                    else {\r\n                        aniControl.setPlaying();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                    await this.reset();\r\n                }\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n        };\r\n        this.play = async () => {\r\n            if (this.inputstrings.length > 0) {\r\n                try {\r\n                    await this.pushLines();\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                console.log("finished");\r\n                currentLine.innerHTML = `<h2 style="align-self: end;" class=" noMargin p5px">&nbsp;</h2>`;\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n        };\r\n        this.skipToFinish = async () => {\r\n            if (this.inputstrings.length > 0) {\r\n                await this.reset();\r\n                try {\r\n                    await this.pushLines();\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                aniControl.setEnd();\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n            // console.log(this.iWindow);\r\n        };\r\n        this.pause = () => {\r\n            aniControl.setPaused();\r\n        };\r\n        this.speed = () => {\r\n            aniControl.setSpeed();\r\n        };\r\n        this.reset = async () => {\r\n            /* if(this.inputstrings.length>0){\r\n                console.log(this);\r\n                aniControl.setReset();\r\n                await sleepFor(100);\r\n                await this.partialReset();\r\n                await sleepFor(100);\r\n                await this.refreshInputListItems();\r\n                console.log(this);\r\n            }\r\n            else{\r\n                console.log("no Input");\r\n            } */\r\n            console.log(this);\r\n            aniControl.setReset();\r\n            await sleepFor(100);\r\n            await this.partialReset();\r\n            await sleepFor(100);\r\n            await this.refreshInputListItems();\r\n            console.log(this);\r\n        };\r\n        this.displayInputLines = () => {\r\n            this.partialReset();\r\n            this.refreshInputListItems();\r\n            // console.log(this);\r\n        };\r\n        this.createListeners = () => {\r\n            try {\r\n                this.iWindow.createEventListeners();\r\n                // createClickListener(\'testButton\',this.testCycling);\r\n                createClickListener(\'CloseOutputWindow\', this.openOutputWindow);\r\n                createClickListener(\'TranslateWindow\', this.openOutputWindow);\r\n                createClickListener(\'play\', this.toggleStop);\r\n                createClickListener(\'stop\', this.pause);\r\n                createClickListener(\'speed\', this.speed);\r\n                createClickListener(\'skip\', this.skipToFinish);\r\n                createClickListener(\'reset\', this.reset);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.anim = new Animator();\r\n    }\r\n    getLinkerAufloesungLine(i, b) {\r\n        let e;\r\n        let addr, spa, l = "";\r\n        if (i < this.inputLines.length) {\r\n            e = this.inputLines[i];\r\n            addr = e.getStartingAddr();\r\n            spa = this.inputLineControl.getSpeicherAbbild(e, b);\r\n            if (spa.includes("??")) {\r\n                if (this.symbolList.isLabel(e.getSecondPart())) {\r\n                    l = "(" + e.getSecondPart() + ")";\r\n                }\r\n                if (this.symbolList.isLabel(e.getThirdPart())) {\r\n                    l = "(" + e.getThirdPart() + ")";\r\n                }\r\n            }\r\n            return addr + ": " + spa + " " + l;\r\n        }\r\n        return "";\r\n    }\r\n    setInputStrings(s) {\r\n        this.inputstrings = s;\r\n    }\r\n    refreshInputStrings(s) {\r\n        this.inputstrings = s;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\nconst onscrollIn_Out = () => {\r\n    /* let inputText= document.getElementById("InputText");\r\n    let outputText= document.getElementById("OutputText"); */\r\n    try {\r\n        if (inputText != null && outputText != null) {\r\n            inputText.onscroll = function () {\r\n                if (inputText != null && outputText != null) {\r\n                    outputText.scrollTop = inputText.scrollTop;\r\n                }\r\n            };\r\n            outputText.onscroll = function () {\r\n                if (inputText != null && outputText != null && !aniControl.play) {\r\n                    /* if(inputText.scrollTop>outputText.scrollTop && inputText.scrollTop+inputText.clientHeight>outputText.scrollHeight){\r\n\r\n                    } */\r\n                    inputText.scrollTop = outputText.scrollTop;\r\n                }\r\n            };\r\n        }\r\n        else\r\n            throw new Error("Element InputText oder OutputText ist null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst consoleClicked = async (e) => {\r\n    let id;\r\n    if (e instanceof PointerEvent) {\r\n        if (e.target instanceof HTMLElement) {\r\n            removeClassOfAll("highlighted");\r\n            id = getIDOfSelected(e.target.id);\r\n            addClassTo(id + "inputP", "highlighted");\r\n            addClassTo(id + "outputP", "highlighted");\r\n            console.log(getIDOfSelected(e.target.id));\r\n        }\r\n    }\r\n};\r\nconst main = () => {\r\n    let p = new ProjectWindow();\r\n    p.createListeners();\r\n    onscrollIn_Out();\r\n    createClickListener("InputLines", consoleClicked);\r\n    createClickListener("OutputLines", consoleClicked);\r\n};\r\nmain();\r\n/* const b = createClickListener("InputLines",consoleClicked);\r\nconst a = createClickListener("OutputLines",consoleClicked); */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///385\n')}},__webpack_exports__={};__webpack_modules__[385]()})();