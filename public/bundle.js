(()=>{"use strict";var __webpack_modules__={851:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "I8": () => (/* binding */ rootVariables)\n});\n\n// UNUSED EXPORTS: contentloaded, onscrollIn_Out, root, setCurrentlyHovered\n\n;// CONCATENATED MODULE: ./src/Backend/Manipulator.ts\nconst erlaubteLängeL_C = 8;\r\nconst erlaubteLängeMNEMO = 4;\r\nconst speicherabbildL = 16;\r\nclass Manipulator_Manipulator {\r\n    constructor() { }\r\n    static sliceString(s1, s2) {\r\n        let n, p;\r\n        n = s1.indexOf(s2);\r\n        p = s2.length;\r\n        return [s1.substring(0, n), s1.substring(n + p)];\r\n    }\r\n    static splitStringHalf(addr, ch) {\r\n        let reString = [];\r\n        let p = addr.indexOf(ch);\r\n        if (p != -1 && p != undefined) {\r\n            reString[0] = addr.slice(0, p).trim();\r\n            reString[1] = addr.slice(p + 1).trim();\r\n        }\r\n        else\r\n            reString[0] = addr;\r\n        return reString;\r\n    }\r\n    static splitStringHalfUnfiltered(s, ch) {\r\n        let reString = [];\r\n        let p = s.indexOf(ch);\r\n        if (p != -1 && p != undefined) {\r\n            reString[0] = s.slice(0, p).trim();\r\n            reString[1] = s.slice(p + 1);\r\n            if (reString[1].trim() != " " || reString[1].trim() != "") {\r\n                reString[1] = reString[1].trim();\r\n            }\r\n        }\r\n        else\r\n            reString[0] = s;\r\n        return reString;\r\n    }\r\n    static isHex(addr) {\r\n        if (addr.endsWith("h") || addr.endsWith("H")) {\r\n            addr = addr.replace(/h$/i, "");\r\n            // addr =addr.replace(/^0{1,}/,\'0\');\r\n            if (addr == "") {\r\n                return false;\r\n            }\r\n            if (!/[^0-9A-F]/i.test(addr)) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDec(addr) {\r\n        if (addr == "") {\r\n            return false;\r\n        }\r\n        if (!/[^0-9]/.test(addr)) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDat_8(addr) {\r\n        // addr =addr.replace(/^0+/,\'\');\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (addr == "") {\r\n            return false;\r\n        }\r\n        if (this.isDec(addr)) {\r\n            if (this.decToHex(addr).length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isHex(addr)) {\r\n            while (addr.startsWith(\'0\') && addr.length > 3) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDat_16(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (addr == "") {\r\n            return false;\r\n        }\r\n        if (this.isDec(addr)) {\r\n            if (this.decToHex(addr).length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isHex(addr)) {\r\n            while (addr.startsWith(\'0\') && addr.length > 5) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static formatHextoDat8(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (Manipulator_Manipulator.isDat_8(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = Manipulator_Manipulator.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 3) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat8 but got instead " + addr);\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat8WithoutH(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (Manipulator_Manipulator.isDat_8(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = Manipulator_Manipulator.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 3) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat8 but got instead " + addr);\r\n        }\r\n        return addr.replace(/h$/, "");\r\n    }\r\n    static formatHextoDat16(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (this.isDat_16(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 5) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            switch (addr.length) {\r\n                case 1:\r\n                    addr = "0000" + addr;\r\n                    break;\r\n                case 2:\r\n                    addr = \'000\' + addr;\r\n                    break;\r\n                case 3:\r\n                    addr = \'00\' + addr;\r\n                    break;\r\n                case 4:\r\n                    addr = \'0\' + addr;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat16 but got instead " + addr);\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat16WithoutH(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (this.isDat_16(addr)) {\r\n            if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 5) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            switch (addr.length) {\r\n                case 1:\r\n                    addr = "0000" + addr;\r\n                    break;\r\n                case 2:\r\n                    addr = \'000\' + addr;\r\n                    break;\r\n                case 3:\r\n                    addr = \'00\' + addr;\r\n                    break;\r\n                case 4:\r\n                    addr = \'0\' + addr;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat16 but got instead " + addr);\r\n        }\r\n        return addr.replace(/h$/g, "");\r\n    }\r\n    static splitDat16InDat8(addr) {\r\n        let r = [];\r\n        if (this.isDat_16(addr)) {\r\n            addr = this.formatHextoDat16(addr);\r\n            r[0] = addr[2] + addr[3];\r\n            r[1] = addr[0] + addr[1];\r\n        }\r\n        return r;\r\n    }\r\n    static formatLabelDisplay(s, b) {\r\n        let ss = "";\r\n        let toReturn = "";\r\n        if (s.length < 1) {\r\n            return "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";\r\n        }\r\n        s = s.concat(": ");\r\n        while (s.length < erlaubteLängeL_C + 2) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        toReturn = b ? s : ss;\r\n        return toReturn;\r\n    }\r\n    static formatConstantDisplay(s, b) {\r\n        let ss = "";\r\n        let toReturn = "";\r\n        if (s.length < 1) {\r\n            return "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";\r\n        }\r\n        s = s.concat("  ");\r\n        while (s.length < erlaubteLängeL_C + 2) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        toReturn = b ? s : ss;\r\n        return toReturn;\r\n    }\r\n    static formatLabelDisplaytoSymbolTable(s) {\r\n        let ss = "";\r\n        while (s.length < erlaubteLängeL_C + 1) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        return ss;\r\n    }\r\n    static formatBefehlDisplay(s1, s2, b) {\r\n        let ss = "";\r\n        let toReturn = s1;\r\n        while (toReturn.length < erlaubteLängeMNEMO) {\r\n            toReturn = toReturn.concat(" ");\r\n        }\r\n        // s2=s2.replace(s1,toReturn);\r\n        s2 = toReturn + s2.split(s1)[1];\r\n        while (s2.length < 16) {\r\n            s2 = s2.concat(" ");\r\n        }\r\n        ss = s2;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        toReturn = b ? s2 : ss;\r\n        return toReturn;\r\n    }\r\n    static formatLabelandBefehlDisplay(s1, s2, s3) {\r\n        let ss = "";\r\n        if (s1.length < erlaubteLängeL_C) {\r\n            return this.formatLabelDisplay(s1, false).concat(this.formatBefehlDisplay(s2, s3, false));\r\n        }\r\n        s2 = this.formatBefehlDisplay(s2, s3, true);\r\n        s1 = this.formatLabelDisplay(s1, true);\r\n        ss = (s1.concat(s2)).trim();\r\n        if (ss.length < 26) {\r\n            while (ss.length < 26) {\r\n                ss = ss.concat(" ");\r\n            }\r\n        }\r\n        console.log(ss);\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        console.log(ss);\r\n        return ss;\r\n    }\r\n    static formatConstandBefehlDisplay(s1, s2, s3) {\r\n        let ss = "";\r\n        if (s1.length < erlaubteLängeL_C) {\r\n            return this.formatConstantDisplay(s1, false).concat(this.formatBefehlDisplay(s2, s3, false));\r\n        }\r\n        s2 = this.formatBefehlDisplay(s2, s3, true);\r\n        s1 = this.formatConstantDisplay(s1, true);\r\n        ss = (s1.concat(s2)).trim();\r\n        if (ss.length < 26) {\r\n            while (ss.length < 26) {\r\n                ss = ss.concat(" ");\r\n            }\r\n        }\r\n        console.log(ss);\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        console.log(ss);\r\n        return ss;\r\n    }\r\n    static formatSpeicherabbildandLabel(s1, s2) {\r\n        if (s1.length >= speicherabbildL) {\r\n            return s1 + s2;\r\n        }\r\n        while (s1.length < speicherabbildL) {\r\n            s1 = s1 + " ";\r\n        }\r\n        while (s1.includes(" ")) {\r\n            s1 = s1.replace(" ", "&nbsp;");\r\n        }\r\n        return s1 + s2;\r\n    }\r\n}\r\nManipulator_Manipulator.binToHex = (addr) => {\r\n    return parseInt(addr, 2).toString(16).toUpperCase() + "h";\r\n};\r\nManipulator_Manipulator.decToHex = (addr) => {\r\n    return parseInt(addr, 10).toString(16).toUpperCase() + "h";\r\n};\r\nManipulator_Manipulator.hexToDec = (addr) => {\r\n    addr = addr.replace(/h$/g, "");\r\n    return Number(parseInt(addr, 16).toString(10));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/Backend/Label.ts\nclass Label {\r\n    constructor(n, p) {\r\n        this.name = "";\r\n        this.position = undefined;\r\n        this.name = n;\r\n        this.position = p;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    setPosition(addr) {\r\n        this.position = addr;\r\n    }\r\n    toString() {\r\n        return `<span class="gray">Label:</span> &nbsp;&nbsp;&nbsp;&nbsp; Label Wert:0000h (little endian:0000h)`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/Constant.ts\nclass Constant {\r\n    constructor(n, v) {\r\n        this.name = "";\r\n        this.value = "";\r\n        this.name = n;\r\n        this.value = v;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    setValue(addr) {\r\n        this.value = addr;\r\n    }\r\n    toStringtoMovable() {\r\n        return `${this.name} Wert:${this.value}`;\r\n    }\r\n    toString() {\r\n        return `<span class="gray">Konst.:</span> ;&nbsp;&nbsp;&nbsp; ${this.name} Wert:${this.value}`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/SymbolList.ts\n\r\n\r\n\r\nclass SymbolList {\r\n    constructor() {\r\n        this.Labels = [];\r\n        this.Consts = [];\r\n        this.sequence = [];\r\n    }\r\n    static getInstance() {\r\n        if (!SymbolList.instance) {\r\n            SymbolList.instance = new SymbolList();\r\n        }\r\n        return SymbolList.instance;\r\n    }\r\n    empty() {\r\n        this.Labels = [];\r\n        this.Consts = [];\r\n        this.sequence = [];\r\n    }\r\n    pushValidLabelConst(s) {\r\n        if (this.sequence.find(e => { e == s; }) == undefined) {\r\n            this.sequence.push(s);\r\n        }\r\n    }\r\n    isEligible(addr) {\r\n        if (addr.length < 3) {\r\n            return false;\r\n        }\r\n        if (addr.toLowerCase() == "offset") {\r\n            return false;\r\n        }\r\n        if (/^\\d/.test(addr)) {\r\n            return false;\r\n        }\r\n        if (/^\\s+/g.test(addr)) {\r\n            return false;\r\n        }\r\n        if (!/^[a-zA-Z0-9_]*$/.test(addr)) {\r\n            return false;\r\n        }\r\n        if (!/^[\\W_]/.test(addr)) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    updateLabel(s, addr) {\r\n        let l = this.getSpecificLabelByName(s);\r\n        if (l != undefined && Manipulator_Manipulator.isDat_16(addr)) {\r\n            l.setPosition(Manipulator_Manipulator.formatHextoDat16(addr));\r\n            this.pushValidLabelConst(l);\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isLabel(addr) {\r\n        //  case-sensitive\r\n        /* if(this.Labels.find(element => element.getName()==addr) !=undefined){\r\n            return true;\r\n        }\r\n        else return false; */\r\n        //  NOT case-sensitive\r\n        if (this.Labels.find(element => element.getName().toLowerCase() == addr.toLowerCase()) != undefined) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    setLabel(s, p) {\r\n        let l;\r\n        if (!this.isLabel(s) && Manipulator_Manipulator.isDat_16(p)) {\r\n            l = new Label(s, Manipulator_Manipulator.formatHextoDat16(p));\r\n            this.Labels.push(l);\r\n            this.pushValidLabelConst(l);\r\n        }\r\n    }\r\n    setLabelWithoutPosition(addr) {\r\n        if (!this.isLabel(addr)) {\r\n            this.Labels.push(new Label(addr, "????"));\r\n            return true;\r\n        }\r\n        else if (this.getPositionOfSpecificLabel(addr) == undefined) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isConst(s) {\r\n        if (this.Consts.find(element => element.getName().toLowerCase() == s.toLowerCase()) != undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getSequence() {\r\n        return this.sequence;\r\n    }\r\n    setConst(s, v) {\r\n        let l;\r\n        if (!this.isConst(s)) {\r\n            l = new Constant(s, v);\r\n            this.Consts.push(new Constant(s, v));\r\n            this.pushValidLabelConst(l);\r\n        }\r\n    }\r\n    removeLabel(s) {\r\n        //  case-sensitive\r\n        /*\r\n        this.Labels.filter(e=>{\r\n            e.getName()!=s;\r\n        })\r\n        */\r\n        //   NOT case-sensitive\r\n        this.Labels.filter(e => {\r\n            e.getName().toLowerCase() != s.toLowerCase();\r\n        });\r\n    }\r\n    getLabels() {\r\n        return this.Labels;\r\n    }\r\n    getConsts() {\r\n        return this.Consts;\r\n    }\r\n    getSpecificConstantByName(addr) {\r\n        return this.Consts.find(e => e.getName().toLowerCase() == addr.toLowerCase());\r\n    }\r\n    getSpecificLabelByName(addr) {\r\n        //  case-sensitive\r\n        /*\r\n        return this.Labels.find(e=>e.getName()==addr);\r\n        */\r\n        //   NOT case-sensitive\r\n        return this.Labels.find(e => e.getName().toLowerCase() == addr.toLowerCase());\r\n    }\r\n    getPositionOfSpecificLabel(addr) {\r\n        let r = this.getSpecificLabelByName(addr);\r\n        if (r == undefined) {\r\n            this.setLabelWithoutPosition(addr);\r\n            return undefined;\r\n        }\r\n        else {\r\n            if (r.getPosition() == "????") {\r\n                return undefined;\r\n            }\r\n            else\r\n                return r.getPosition();\r\n        }\r\n    }\r\n}\r\nlet SymbolL = SymbolList.getInstance();\r\n\n;// CONCATENATED MODULE: ./src/Backend/Enums.ts\nvar DataType;\r\n(function (DataType) {\r\n    DataType["dat_8"] = "dat_8";\r\n    DataType["dat_16"] = "dat_16";\r\n    DataType["LABEL"] = "label";\r\n    DataType["CONSTANT"] = "const";\r\n    DataType["ELLIGIBLE"] = "elligible";\r\n    DataType["NONE"] = "none";\r\n})(DataType || (DataType = {}));\r\nvar InputLineType;\r\n(function (InputLineType) {\r\n    InputLineType["TRANSLATED"] = "TRANSLATED";\r\n    InputLineType["PSEUDOTRANSLATED"] = "PSEUDOTRANSLATED";\r\n    InputLineType["NOTTRANSLATED"] = "NOTTRANSLATED";\r\n    InputLineType["EMPTY"] = "EMPTY";\r\n})(InputLineType || (InputLineType = {}));\r\n\n;// CONCATENATED MODULE: ./src/Backend/InputLine.ts\n\r\n\r\n\r\nclass InputLine {\r\n    constructor(init, id) {\r\n        this.startingAddr = "";\r\n        this.length = -1;\r\n        this.id = -1;\r\n        this.hCode = "";\r\n        this.initialLine = "";\r\n        this.commandLine = "";\r\n        this.firstPart = "";\r\n        this.secondPart = "";\r\n        this.thirdPart = "";\r\n        this.error = "";\r\n        this.rest = "";\r\n        this.commentary = "";\r\n        this.label = "";\r\n        this.offsetLabel = false;\r\n        this.errorBool = false;\r\n        this.translation = "";\r\n        this.description = [];\r\n        this.valid = false;\r\n        this.type = InputLineType.NOTTRANSLATED;\r\n        this.setTranslation = (s) => {\r\n            this.translation = s;\r\n        };\r\n        this.getTranslation = () => {\r\n            return this.translation;\r\n        };\r\n        this.getDescriptionLine = () => {\r\n            return this.description;\r\n        };\r\n        this.getStartingAddr = () => { return this.startingAddr; };\r\n        this.getLength = () => { return this.length; };\r\n        this.getHCode = () => {\r\n            return this.hCode;\r\n        };\r\n        this.getId = () => { return this.id; };\r\n        this.getLabel = () => {\r\n            return this.label;\r\n        };\r\n        this.getFirstPart = () => { return this.firstPart; };\r\n        this.getSecondPart = () => { return this.secondPart; };\r\n        this.getThirdPart = () => { return this.thirdPart; };\r\n        this.getCommentary = () => {\r\n            return this.commentary;\r\n        };\r\n        this.getValid = () => { return this.valid; };\r\n        this.getType = () => { return this.type; };\r\n        this.setComment = (s) => {\r\n            this.commentary = s;\r\n        };\r\n        this.setLabelTo = (s) => {\r\n            this.label = s;\r\n        };\r\n        this.setCommandLine = () => {\r\n            if (this.initialLine.trim() == "" || this.initialLine.trim() == " ") {\r\n                return "";\r\n            }\r\n            let s = Manipulator_Manipulator.splitStringHalf(this.initialLine, ":");\r\n            if (s.length > 1) {\r\n                this.label = s[0];\r\n            }\r\n            let ss = Manipulator_Manipulator.splitStringHalf(this.initialLine, ";");\r\n            let s1 = this.initialLine.replace(s[0] + \':\', \'\').replace(\';\' + ss[1], \'\');\r\n            if (ss[1] != undefined) {\r\n                this.commentary = ss[1];\r\n            }\r\n            return s1.trim();\r\n        };\r\n        this.commandLinetoString = (b) => {\r\n            let first = this.firstPart, second = this.secondPart, third = this.thirdPart;\r\n            let temp;\r\n            if (this.valid == true) {\r\n                if (b) {\r\n                    temp = this.formatpartsToDisplay(first, second, third);\r\n                    first = temp[0];\r\n                    second = temp[1];\r\n                    third = temp[2];\r\n                }\r\n                if (second.toUpperCase() == "EQU") {\r\n                    // this.secondPart = "EQU";\r\n                    return (`${first} ${second} ${third}`);\r\n                }\r\n                else {\r\n                    return (`${first} ${second}${(third == "" ? "" : \',\' + third)}`);\r\n                }\r\n            }\r\n            else {\r\n                return this.commandLine;\r\n            }\r\n        };\r\n        this.hasLabel = () => {\r\n            return this.label != "";\r\n        };\r\n        // this.initialLine=init.replace(/\\s+/g,\' \');\r\n        this.initialLine = init.replace(/\\s{3,}/g, \' \');\r\n        // console.log(init.replace(/\\s{3,}/g,\' \'));\r\n        // this.initialLine=init.replace(/\\s+/g,\' \').trim();\r\n        this.id = id;\r\n        this.commandLine = this.setCommandLine();\r\n        this.preemptiveValidation();\r\n    }\r\n    getCommandline() {\r\n        return this.commandLine;\r\n    }\r\n    preemptiveValidation() {\r\n        if (this.commandLine == "" && this.label == "") {\r\n            this.valid = true;\r\n            this.type = InputLineType.EMPTY;\r\n        }\r\n        else if (this.commandLine == "" && this.label != "") {\r\n            this.type = InputLineType.PSEUDOTRANSLATED;\r\n        }\r\n    }\r\n    setError(s) {\r\n        this.errorBool = true;\r\n        this.error = s;\r\n    }\r\n    hasError() {\r\n        return this.errorBool;\r\n    }\r\n    hasOffsetLabel() {\r\n        return this.offsetLabel;\r\n    }\r\n    setOffsetLabel(b) {\r\n        this.offsetLabel = b;\r\n    }\r\n    setStartingAddr(s) { this.startingAddr = s; }\r\n    setLength(n) {\r\n        if (Manipulator_Manipulator.isHex(String(n))) {\r\n            this.length = Manipulator_Manipulator.hexToDec(String(n));\r\n        }\r\n        else\r\n            this.length = Number(n);\r\n    }\r\n    setHCode(s) {\r\n        this.hCode = s;\r\n    }\r\n    setFirstPart(s) { this.firstPart = s; }\r\n    setSecondPart(s) {\r\n        this.secondPart = s;\r\n    }\r\n    getEndAddr() {\r\n        if (this.firstPart.toUpperCase() == "ORG") {\r\n            return Manipulator_Manipulator.formatHextoDat16(String(this.length)); // DecOrHex\r\n            // return String(this.length);\r\n        }\r\n        if (this.startingAddr != "") {\r\n            return String(Manipulator_Manipulator.hexToDec(this.startingAddr) + this.length);\r\n        }\r\n        else\r\n            return "";\r\n    }\r\n    setThirdPart(s) {\r\n        this.thirdPart = s;\r\n    }\r\n    setRest(s) {\r\n        this.rest = s;\r\n    }\r\n    /* getWarning():string{\r\n        let l:string|undefined;\r\n        l = this.getLabelorUndefined();\r\n        if(l !=undefined){\r\n            return `Label \'<span class="labelBlue">${l}</span>\' ist länger als ${erlaubteLängeL_C} Zeichen!`;\r\n        }\r\n        l= this.getConstorUndefined();\r\n        if(l !=undefined){\r\n            return `Konstante \'${l}\' ist länger als ${erlaubteLängeL_C} Zeichen!`;\r\n        }\r\n        return "";\r\n    }\r\n    getWarningtoDescriptionLine():string{\r\n        if(this.getWarning() !=""){\r\n            return `<span class="warning">Warnung: ${this.getWarning()} </span>`\r\n        }\r\n        return "";\r\n    } */\r\n    getLabelorUndefined() {\r\n        if (this.label != "" && this.label.length > erlaubteLängeL_C) {\r\n            return this.label;\r\n        }\r\n        if (this.offsetLabel && this.getLabelOfOffset().length > erlaubteLängeL_C) {\r\n            return this.getLabelOfOffset();\r\n        }\r\n        if (SymbolL.isLabel(this.firstPart) && this.firstPart.length > erlaubteLängeL_C) {\r\n            return this.firstPart;\r\n        }\r\n        if (SymbolL.isLabel(this.secondPart) && this.secondPart.length > erlaubteLängeL_C) {\r\n            return this.secondPart;\r\n        }\r\n        if (SymbolL.isLabel(this.thirdPart) && this.thirdPart.length > erlaubteLängeL_C) {\r\n            return this.thirdPart;\r\n        }\r\n        return undefined;\r\n    }\r\n    getConstorUndefined() {\r\n        if (SymbolL.isConst(this.firstPart) && this.firstPart.length > erlaubteLängeL_C) {\r\n            return this.firstPart;\r\n        }\r\n        if (SymbolL.isConst(this.secondPart) && this.secondPart.length > erlaubteLängeL_C) {\r\n            return this.secondPart;\r\n        }\r\n        if (SymbolL.isConst(this.thirdPart) && this.thirdPart.length > erlaubteLängeL_C) {\r\n            return this.thirdPart;\r\n        }\r\n        return undefined;\r\n    }\r\n    setValid(b) { this.valid = b; }\r\n    setType(t) { this.type = t; }\r\n    saveDescriptionLine(s) {\r\n        this.description.push(s);\r\n    }\r\n    getInitialLine() {\r\n        return this.initialLine;\r\n    }\r\n    getLabelOfOffset() {\r\n        if (this.offsetLabel) {\r\n            if (this.secondPart.toUpperCase().startsWith("OFFSET")) {\r\n                return Manipulator_Manipulator.splitStringHalf(this.secondPart, " ")[1];\r\n            }\r\n            if (this.thirdPart.toUpperCase().startsWith("OFFSET")) {\r\n                return Manipulator_Manipulator.splitStringHalf(this.thirdPart, " ")[1];\r\n            }\r\n        }\r\n        return "";\r\n    }\r\n    formatInputToDisplay() {\r\n        let temp;\r\n        if (this.valid) {\r\n            temp = this.formatpartsToDisplay(this.firstPart, this.secondPart, this.thirdPart);\r\n            this.firstPart = temp[0];\r\n            this.secondPart = temp[1];\r\n            this.thirdPart = temp[2];\r\n        }\r\n    }\r\n    getCommandLineToCurrentLine() {\r\n        let dsrl = this.initialLine.split(";")[0];\r\n        let ss = [];\r\n        let temp = [];\r\n        if (this.label != "") {\r\n            // temp =dsrl.split(this.label);\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.label);\r\n            ss.push(temp[0]);\r\n            ss.push(`<span id="crLabel">${this.label}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.firstPart != "") {\r\n            // temp =dsrl.split(this.firstPart)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.firstPart);\r\n            ss.push(temp[0]);\r\n            ss.push(`<span id="crFirst">${this.firstPart}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.secondPart != "") {\r\n            // console.log("dsrl : "+dsrl);\r\n            // temp =dsrl.split(this.secondPart,2)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.secondPart);\r\n            // console.log("SECOND:")\r\n            // console.log(Manipulator.sliceString(dsrl,this.secondPart));\r\n            ss.push(temp[0]);\r\n            ss.push(`<span id="crSecond">${this.secondPart}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.thirdPart != "") {\r\n            // temp =dsrl.split(this.thirdPart)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.thirdPart);\r\n            ss.push(dsrl.split(this.thirdPart)[0]);\r\n            // console.log("THIRD:")\r\n            // console.log(Manipulator.sliceString(dsrl,this.thirdPart));\r\n            ss.push(`<span id="crThird">${this.thirdPart}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.error != "") {\r\n            // temp =dsrl.split(this.error)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.error);\r\n            ss.push(dsrl.split(this.error)[0]);\r\n            ss.push(`<span id="crError">${this.error}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        ss.push(dsrl);\r\n        /* if(this.rest!=""){\r\n            dsrl+=`<span id="crRest">${this.rest}</span>`;\r\n        } */\r\n        // console.log(ss);\r\n        return ss.join("");\r\n    }\r\n    getAllV() {\r\n        return [this.label != "" ? 1 : 0, this.firstPart != "" ? 1 : 0, this.secondPart != "" ? 1 : 0, this.thirdPart != "" ? 1 : 0, (this.error != "" || this.errorBool) ? 1 : 0, this.rest != "" ? 1 : 0];\r\n    }\r\n    formatpartsToDisplay(first, second, third) {\r\n        let temp;\r\n        if (second.toUpperCase() == "EQU") {\r\n            second = second.toUpperCase();\r\n        }\r\n        /* else if(["DW","ORG"].includes(first.toUpperCase())){\r\n            if(SymbolL\r\n            second = Manipulator.formatHextoDat16(second);\r\n        } */\r\n        else {\r\n            first = first.toUpperCase();\r\n            temp = Manipulator_Manipulator.splitStringHalf(second, " ");\r\n            if (!SymbolL.isLabel(second) && !SymbolL.isConst(second) && !Manipulator_Manipulator.isDat_16(second) && !(temp[0].toUpperCase() == "OFFSET")) {\r\n                second = second.toUpperCase();\r\n            }\r\n            if (this.hasOffsetLabel()) {\r\n                second = "OFFSET " + this.getLabelOfOffset();\r\n            }\r\n            else if (second != "") {\r\n                if (Manipulator_Manipulator.isDat_8(second)) {\r\n                    second = second; // DecOrHex\r\n                    // second=Manipulator.formatHextoDat8(second); \r\n                }\r\n                else if (Manipulator_Manipulator.isDat_16(second)) {\r\n                    second = second; // DecOrHex\r\n                    // second=Manipulator.formatHextoDat16(second);\r\n                }\r\n            }\r\n            temp = Manipulator_Manipulator.splitStringHalf(third, " ");\r\n            if (!SymbolL.isLabel(third) && !SymbolL.isConst(third) && !Manipulator_Manipulator.isDat_16(third) && !(temp[0].toUpperCase() == "OFFSET")) {\r\n                third = third.toUpperCase();\r\n            }\r\n            else if (this.hasOffsetLabel()) {\r\n                third = "OFFSET " + this.getLabelOfOffset();\r\n            }\r\n            else if (third != "") {\r\n                if (Manipulator_Manipulator.isDat_8(third) && this.length < 3) {\r\n                    // third=Manipulator.formatHextoDat8(third); \r\n                    third = third; // DecOrHex\r\n                }\r\n                else if (Manipulator_Manipulator.isDat_16(third)) {\r\n                    // third=Manipulator.formatHextoDat16(third);\r\n                    third = third; // DecOrHex\r\n                }\r\n            }\r\n        }\r\n        return [first, second, third];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/MnemoCommand.ts\n\r\nclass MnemoCommand {\r\n    constructor(c, d, addr, bC, l) {\r\n        this.mCode = "";\r\n        this.destination = "";\r\n        this.source = "";\r\n        this.binaryCode = "";\r\n        this.hexCode = "";\r\n        this.size = 0;\r\n        this.mCode = c.toUpperCase();\r\n        this.destination = d;\r\n        this.source = addr;\r\n        this.binaryCode = bC.replace(/\\s/g, "");\r\n        this.hexCode = Manipulator_Manipulator.binToHex(bC.replace(/\\s/g, ""));\r\n        this.size = l;\r\n    }\r\n    getMCode() {\r\n        return this.mCode;\r\n    }\r\n    getDestination() {\r\n        return this.destination;\r\n    }\r\n    getSource() {\r\n        return this.source;\r\n    }\r\n    getHexCode() {\r\n        return this.hexCode;\r\n    }\r\n    getLength() {\r\n        let i = 1;\r\n        if (this.destination != "") {\r\n            i++;\r\n        }\r\n        if (this.source != "") {\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/StringConstructor.ts\n\r\nconst warningClass = "warning";\r\nconst errClass = "errorRed";\r\nconst labelClass = "labelBlue";\r\nclass StringConstructor {\r\n    constructor() {\r\n    }\r\n    static info(s) {\r\n        return `<span class="eingeruckt">${s}<span>`;\r\n    }\r\n    static achtung(s) {\r\n        return `<span class="${warningClass} eingeruckt">Achtung : ${s}<span>`;\r\n    }\r\n    static error(s) {\r\n        return `<span class="errorRed ">error: ${s}</span>`;\r\n    }\r\n    static plusError(s) {\r\n        return `<span class="pluserrRed eingeruckt">${s}</span>`;\r\n    }\r\n    static warLabelZuLang(s) {\r\n        return this.achtung(`Label \'<span class="${labelClass}">${s}</span>\' >${erlaubteLängeL_C} Zeichen`);\r\n    }\r\n    static warConstZuLang(s) {\r\n        return this.achtung(`Konstante ${s} >${erlaubteLängeL_C} Zeichen`);\r\n    }\r\n    static errLabelDef(s) {\r\n        return this.error(`Label \'<span class="${labelClass}">${s}</span>\' ist bereits definiert`);\r\n    }\r\n    static errConstDef(s) {\r\n        return this.error(`Konstante ${s} ist bereits definiert`);\r\n    }\r\n    static invalidLabel(s) {\r\n        return this.error(`${s} kein gülitger Label`); // ungültiger Label\r\n    }\r\n    static invalidCmd(s) {\r\n        return this.error(`${s} ungültiger Operand`); //ungültiger Befehl\r\n    }\r\n    static toofewCmd() {\r\n        return this.error(`fehlender Operand`); //zu wenige Operanden\r\n    }\r\n    static tooManyCmd() {\r\n        return this.error(`zu viele Operanden`);\r\n    }\r\n    static noValidLabelAfterOffset() {\r\n        return this.error(`gefunden wurde OFFSET aber kein gültiger label!`);\r\n    }\r\n    static bugNoCommand() {\r\n        return this.error("keine passende Befehl gefunden!");\r\n    }\r\n    static bugSwitchDefault() {\r\n        return this.error("unbekannter Fehler ist aufgetreten");\r\n    }\r\n    static bugNoValueForConst(s) {\r\n        return this.error(`Wert für Konstante ${s} nicht gefunden!`);\r\n    }\r\n    static expectedDat8() {\r\n        return this.error("erwartet war 8-bit Wert");\r\n    }\r\n    static expectedDat8ConstToBig(s) {\r\n        return this.error(`erwartet war 8-bit Wert, Konstante ${s} ist zu groß`);\r\n    }\r\n    static expectedDat8Plus(s) {\r\n        return this.error(`erwartet war 8-bit Wert, ${s} ist kein gültiger Operand`);\r\n    }\r\n    static expectedDat16() {\r\n        return this.error("erwartet war 16-bit Wert");\r\n    }\r\n    static expectedDat16Plus(s) {\r\n        return this.error(`erwartet war 16-bit Wert, ${s} ist kein gültiger Operand`);\r\n    }\r\n    static nameTakenForLabel(s) {\r\n        return this.error(`Symbolbezeichnung ${s} bereits als Label definiert`);\r\n    }\r\n    static nameTakenForConst(s) {\r\n        return this.error(`Symbolbezeichnung ${s} bereits als Konstante definiert`);\r\n    }\r\n    static noConstafterLabelDef() {\r\n        return this.error(`keine Konstantendefinition nach einer Labeldefinition erlaubt`);\r\n    }\r\n    static noValidConstOrOperand(s) {\r\n        return this.error(`${s} ungültiger Befehl oder Konstantendefinition`);\r\n    }\r\n    static notValidLabelSinceItsConst(s) {\r\n        return this.plusError(`<span class="${labelClass}">${s}</span> ist kein gültiges Label, bereits als Konstante definiert`);\r\n    }\r\n    static noConstDefAllowed() {\r\n        return this.error(`Konstantendefinition nur am Anfang erlaubt`);\r\n    }\r\n    static infoIsDat8() {\r\n        return this.info("überprüfe auf 8-Bit Wert ... gefunden");\r\n    }\r\n    static infoNotDat8() {\r\n        return this.info("überprüfe auf 8-Bit Wert ... nicht gefunden");\r\n    }\r\n    static infoIsDat16() {\r\n        return this.info("überprüfe auf 16-Bit Wert ... gefunden");\r\n    }\r\n    static infoNotDat16() {\r\n        return this.info("überprüfe auf 16-Bit Wert ... nicht gefunden");\r\n    }\r\n    static infoInvalidConst(s) {\r\n        return this.info(`\'${s}\' ist kein gültiger Konstantenname`);\r\n    }\r\n    static infoNotDat8Const(s) {\r\n        return this.info(`suche 8-Bit Konstante <span class="${labelClass}">${s}<span> ... nicht gefunden`);\r\n    }\r\n    static infoNotDat16Const(s) {\r\n        return this.info(`suche 16-Bit Konstante <span class="${labelClass}">${s}<span> ...  nicht gefunden`);\r\n    }\r\n    static infoIsDat8Const(s) {\r\n        return this.info(`suche 8-Bit Konstante <span class="${labelClass}">${s}<span> ... gefunden`);\r\n    }\r\n    static infoIsDat16Const(s) {\r\n        return this.info(`suche 16-Bit Konstante <span class="${labelClass}">${s}<span> ... gefunden`);\r\n    }\r\n    static infoInvalidLabel(s) {\r\n        return this.info(`\'${s}\' ist kein gültiges Label`);\r\n    }\r\n    static infoIsLabel(s) {\r\n        return this.info(`suche Label <span class="${labelClass}">${s}<span> ... gefunden`);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/CommandMap.ts\n\r\n\r\n\r\n\r\n\r\nconst parse1 = `<span class="gray">parse Labelfeld/Befehlsfeld:</span>`;\r\nconst parse2 = `<span class="gray">parse Befehlsfeld:</span>`;\r\nconst parse3 = `<span class="gray">parse Operandenfeld (1):</span>`;\r\nconst parse4 = `<span class="gray">parse Operandenfeld (2):</span>`;\r\nconst parse5 = `<span class="gray">gesamter Befehl:</span>`;\r\nconst saveInput = (I, n) => {\r\n    switch (n) {\r\n        case 1:\r\n            I.saveDescriptionLine(parse1);\r\n            break;\r\n        case 2:\r\n            I.saveDescriptionLine(parse2);\r\n            break;\r\n        case 3:\r\n            I.saveDescriptionLine(parse3);\r\n            break;\r\n        case 4:\r\n            I.saveDescriptionLine(parse4);\r\n            break;\r\n        case 5:\r\n            I.saveDescriptionLine(parse5);\r\n            break;\r\n    }\r\n};\r\nconst save2 = (i) => {\r\n    saveInput(i, 2);\r\n};\r\nconst save3 = (i) => {\r\n    saveInput(i, 3);\r\n};\r\nconst save4 = (i) => {\r\n    saveInput(i, 4);\r\n};\r\nconst registerAdressierung = "Registeradressierung";\r\nconst indirekteRegAdressierung = "indirekte Registeradressierung";\r\nconst immediateAdressierung = "Immediateadressierung";\r\nconst absoluteAdressierung = "Absolutadressierung";\r\nconst stackBefehl = "Stackbefehl";\r\nconst ioAdressierung = "IO Adressierung";\r\nclass CommandMap {\r\n    constructor() {\r\n        this.mnemoCommands = [\r\n            //TRANSPORTBEFEHLE\r\n            //Immediate laden\r\n            new MnemoCommand("MOV", "A", "dat_8", "00 111 110", 2),\r\n            new MnemoCommand("MOV", "B", "dat_8", "00 000 110", 2),\r\n            new MnemoCommand("MOV", "C", "dat_8", "00 001 110", 2),\r\n            new MnemoCommand("MOV", "IX", "dat_16", "11 011 10100 100 001", 4),\r\n            new MnemoCommand("MOV", "HL", "dat_16", "00 100 001", 3),\r\n            new MnemoCommand("MOV", "SP", "dat_16", "00 110 001", 3),\r\n            //Direkte Adressierung Register<>Register\r\n            new MnemoCommand("MOV", "A", "B", "01 111 000", 1),\r\n            new MnemoCommand("MOV", "A", "C", "01 111 001", 1),\r\n            new MnemoCommand("MOV", "B", "A", "01 000 111", 1),\r\n            new MnemoCommand("MOV", "B", "C", "01 000 001", 1),\r\n            new MnemoCommand("MOV", "C", "A", "01 001 111", 1),\r\n            new MnemoCommand("MOV", "C", "B", "01 001 000", 1),\r\n            //Direkte Adressierung Register<>Speicher\r\n            new MnemoCommand("MOV", "A", "label", "00 111 010", 3),\r\n            new MnemoCommand("MOV", "label", "A", "00 110 010", 3),\r\n            new MnemoCommand("MOV", "HL", "label", "00 101 010", 3),\r\n            new MnemoCommand("MOV", "label", "HL", "00 100 010", 3),\r\n            new MnemoCommand("MOV", "IX", "label", "11 011 10100 101 010", 4),\r\n            new MnemoCommand("MOV", "label", "IX", "11 011 10100 100 010", 4),\r\n            //Registerindirekte Adressierung\r\n            new MnemoCommand("MOV", "A", "[HL]", "01 111 110", 1),\r\n            new MnemoCommand("MOV", "[HL]", "A", "01 110 111", 1),\r\n            //Stackbefehle\r\n            new MnemoCommand("PUSH", "", "", "11 110 101", 1),\r\n            new MnemoCommand("POP", "", "", "11 110 001", 1),\r\n            //Ein-Ausgabebefehle\r\n            new MnemoCommand("IN", "A", "port", "11 011 011", 2),\r\n            new MnemoCommand("OUT", "port", "A", "11 010 011", 2),\r\n            //BEFEHLE ZUR DATENBEARBEITUNG\r\n            //Inkrement- und Dekrementbefehle\r\n            new MnemoCommand("INC", "A", "", "00 111 100", 1),\r\n            new MnemoCommand("INC", "B", "", "00 000 100", 1),\r\n            new MnemoCommand("INC", "C", "", "00 001 100", 1),\r\n            new MnemoCommand("INC", "HL", "", "00 100 011", 1),\r\n            new MnemoCommand("INC", "IX", "", "11 011 10100 100 011", 2),\r\n            new MnemoCommand("DEC", "A", "", "00 111 101", 1),\r\n            new MnemoCommand("DEC", "B", "", "00 000 101", 1),\r\n            new MnemoCommand("DEC", "C", "", "00 001 101", 1),\r\n            new MnemoCommand("DEC", "HL", "", "00 101 011", 1),\r\n            new MnemoCommand("DEC", "IX", "", "11 011 10100 101 011", 2),\r\n            //Arithmetische Operationen\r\n            new MnemoCommand("ADD", "A", "", "10 000 111", 1),\r\n            new MnemoCommand("ADD", "B", "", "10 000 000", 1),\r\n            new MnemoCommand("ADD", "C", "", "10 000 001", 1),\r\n            new MnemoCommand("ADD", "dat_8", "", "11 000 110", 2),\r\n            new MnemoCommand("SUB", "A", "", "10 010 111", 1),\r\n            new MnemoCommand("SUB", "B", "", "10 010 000", 1),\r\n            new MnemoCommand("SUB", "C", "", "10 010 001", 1),\r\n            new MnemoCommand("SUB", "dat_8", "", "11 010 110", 2),\r\n            //Logische Operationen\r\n            new MnemoCommand("AND", "A", "", "10 100 111", 1),\r\n            new MnemoCommand("AND", "B", "", "10 100 000", 1),\r\n            new MnemoCommand("AND", "C", "", "10 100 001", 1),\r\n            new MnemoCommand("AND", "dat_8", "", "11 100 110", 2),\r\n            new MnemoCommand("OR", "A", "", "10 110 111", 1),\r\n            new MnemoCommand("OR", "B", "", "10 110 000", 1),\r\n            new MnemoCommand("OR", "C", "", "10 110 001", 1),\r\n            new MnemoCommand("OR", "dat_8", "", "11 110 110", 2),\r\n            new MnemoCommand("XOR", "A", "", "10 101 111", 1),\r\n            new MnemoCommand("XOR", "B", "", "10 101 000", 1),\r\n            new MnemoCommand("XOR", "C", "", "10 101 001", 1),\r\n            new MnemoCommand("XOR", "dat_8", "", "11 101 110", 2),\r\n            //Schiebebefehle\r\n            new MnemoCommand("SHL", "", "", "11 001 01100 100 111", 2),\r\n            new MnemoCommand("SHR", "", "", "11 001 01100 111 111", 2),\r\n            //Rotierbefehle\r\n            new MnemoCommand("RCL", "", "", "00 010 111", 1),\r\n            new MnemoCommand("ROL", "", "", "00 000 111", 1),\r\n            new MnemoCommand("RCR", "", "", "00 011 111", 1),\r\n            new MnemoCommand("ROR", "", "", "00 001 111", 1),\r\n            //Vergleichsoperationen\r\n            new MnemoCommand("CP", "A", "", "10 111 111", 1),\r\n            new MnemoCommand("CP", "B", "", "10 111 000", 1),\r\n            new MnemoCommand("CP", "C", "", "10 111 001", 1),\r\n            new MnemoCommand("CP", "dat_8", "", "11 111 110", 2),\r\n            //BEFEHLE FÜR VERZWEIGUNGEN\r\n            //Bedingte Sprünge\r\n            new MnemoCommand("JPNZ", "label", "", "11 000 010", 3),\r\n            new MnemoCommand("JPZ", "label", "", "11 001 010", 3),\r\n            new MnemoCommand("JPNC", "label", "", "11 010 010", 3),\r\n            new MnemoCommand("JPC", "label", "", "11 011 010", 3),\r\n            new MnemoCommand("JPNO", "label", "", "11 100 010", 3),\r\n            new MnemoCommand("JPO", "label", "", "11 101 010", 3),\r\n            new MnemoCommand("JPNS", "label", "", "11 110 010", 3),\r\n            new MnemoCommand("JPS", "label", "", "11 111 010", 3),\r\n            //Unbedingter Sprung\r\n            new MnemoCommand("JP", "label", "", "11 000 011", 3),\r\n            //Registerinderkter Sprung\r\n            new MnemoCommand("JP", "[IX]", "", "11 011 10111 101 001", 2),\r\n            //Unterprogrammbefehle\r\n            new MnemoCommand("CALL", "label", "", "11 001 101", 3),\r\n            new MnemoCommand("RET", "", "", "11 001 001", 1),\r\n            //CPU-STEUERBEFEHLE\r\n            //Leerbefehl\r\n            new MnemoCommand("NOP", "", "", "00 000 000", 1),\r\n            //Haltbefehl\r\n            new MnemoCommand("HALT", "", "", "01 110 110", 1),\r\n        ];\r\n        this.symbollist = SymbolList.getInstance();\r\n        this.mCodes = ["MOV", "PUSH", "POP", "IN", "OUT", "INC", "DEC", "ADD", "SUB", "AND", "OR", "XOR", "SHL", "SHR", "RCL", "ROL", "RCR", "ROR", "CP", "JPNZ", "JPZ", "JPNC", "JPC", "JPNO", "JPO", "JPNS", "JPS", "JP", "CALL", "RET", "NOP", "HALT"];\r\n        this.pseudoMCodes = ["DB", "DW", "RS", "ORG", "EXT", "ENT"];\r\n        this.Regs = ["A", "B", "C", "IX", "HL", "SP", "[HL]", "[IX]"];\r\n        this.constDefFlag = true;\r\n        this.getCommands = () => {\r\n            return this.mnemoCommands;\r\n        };\r\n    }\r\n    static getInstance() {\r\n        if (!CommandMap.instance) {\r\n            CommandMap.instance = new CommandMap();\r\n        }\r\n        return CommandMap.instance;\r\n    }\r\n    formatGefunden(s1, s2) {\r\n        return `<span class="eingeruckt">gefunden: ${s1 != "" ? s1 + \' \' : ""} -> <span class="bold">${s2}</span></span>`;\r\n    }\r\n    formatErwartet(s1) {\r\n        // return \'erwarte: \'+s1;\r\n        s1 = s1.replace("dat_8", "8-bit Wert").replace("dat_16", "16-bit Wert").replace("label", "Label");\r\n        return `<span class="eingeruckt">erwarte&nbsp;: ${s1}</span>`;\r\n    }\r\n    formatErkannt(s1) {\r\n        return `<span class="eingeruckt"> (${s1})</span>`;\r\n    }\r\n    formatErrorMassage(s1) {\r\n        return `<span class="errorRed">error: ${s1}</span>`;\r\n    }\r\n    filterForEmtpyStrings(s) {\r\n        return s.filter(e => { if (!/^[\\s+]/g.test(e) && e != "") {\r\n            return e;\r\n        } });\r\n    }\r\n    resetConstDefFlag() {\r\n        this.constDefFlag = true;\r\n    }\r\n    mapInputLineByCase(i) {\r\n        let strings = Manipulator_Manipulator.splitStringHalf(i.getInitialLine(), \';\');\r\n        let commandLine = strings[0];\r\n        if (strings.length > 1) {\r\n            i.setComment(strings[1].trim());\r\n        }\r\n        saveInput(i, 1);\r\n        this.constDefFlag\r\n            ? i.saveDescriptionLine(this.formatErwartet(`Labeldef., Mnemocode oder Konstante (+EQU)`))\r\n            : i.saveDescriptionLine(this.formatErwartet(`Labeldef. oder Mnemocode`));\r\n        //Auflösung von lebel wenn : gefunden\r\n        if (commandLine.includes(":")) {\r\n            strings = Manipulator_Manipulator.splitStringHalf(commandLine, ":");\r\n            i.setLabelTo("");\r\n            //Darf nicht bereits definiert label sein die in Symboltabelle ist\r\n            if (this.symbollist.isConst(strings[0])) {\r\n                i.saveDescriptionLine(StringConstructor.nameTakenForConst(strings[0]));\r\n                i.setError(strings[0]);\r\n                i.setRest(": " + strings[1]);\r\n                return false;\r\n            }\r\n            else if (this.symbollist.isLabel(strings[0])) {\r\n                if (this.symbollist.getPositionOfSpecificLabel(strings[0]) != undefined) {\r\n                    // i.saveDescriptionLine(this.formatErrorMassage(`Label ${strings[0]} ist schon bereits besetzt`)); \r\n                    i.saveDescriptionLine(StringConstructor.errLabelDef(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    i.setRest(": " + strings[1]);\r\n                    return false;\r\n                }\r\n            }\r\n            if (!this.symbollist.isEligible(strings[0])) {\r\n                i.saveDescriptionLine(StringConstructor.invalidLabel(strings[0]));\r\n                i.setError(strings[0]);\r\n                i.setRest(": " + strings[1]);\r\n                return false;\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(this.formatGefunden("Doppelpunkt ", `Label \'${strings[0]}\'`)); // ??\r\n                i.setLabelTo(strings[0]);\r\n                //Wenn zu lang, Warnung gesetzt\r\n                if (strings[0].length > erlaubteLängeL_C) {\r\n                    i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[0]));\r\n                }\r\n                this.symbollist.setLabelWithoutPosition(strings[0]);\r\n                saveInput(i, 2);\r\n                i.saveDescriptionLine(this.formatErwartet("(Pseudo-)Mnemocode"));\r\n                if (strings[1] == "") {\r\n                    i.saveDescriptionLine(`<span class="eingeruckt">gefunden: Ende der Codezeile</span>`); // ??\r\n                    i.setType(InputLineType.PSEUDOTRANSLATED);\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                commandLine = strings[1];\r\n            }\r\n        }\r\n        strings = Manipulator_Manipulator.splitStringHalfUnfiltered(commandLine, " ");\r\n        strings = this.filterForEmtpyStrings(strings);\r\n        //erster Term MnemoCode\r\n        if (this.mCodes.includes(strings[0].toUpperCase())) {\r\n            i.setFirstPart(strings[0]);\r\n            strings[0] = strings[0].toUpperCase();\r\n            return this.parseToMnemoCode(i, strings);\r\n        } //erster Term PseudoMnemoCode - mögliche ConstantenName\r\n        else if (this.pseudoMCodes.includes(strings[0].toUpperCase()) || this.symbollist.isEligible(strings[0])) {\r\n            return this.parsetoPseudoMnemoCode(i, strings);\r\n        }\r\n        else {\r\n            //wenn nicht gültig\r\n            // ??\r\n            // i.saveDescriptionLine(this.formatErrorMassage(`${strings[0]} ist kein gültiger (Pseudo-)Mnemocode oder Label/Konstante`));\r\n            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(strings[1]);\r\n            }\r\n            i.setValid(false);\r\n            return false;\r\n        }\r\n    }\r\n    parseToMnemoCode(i, strings) {\r\n        let consoletostring = "";\r\n        let matches = [];\r\n        let toSave = "";\r\n        this.constDefFlag = false;\r\n        //Behandlung aller Fälle wo der 1. Term mit einem MnemoCode anfangt\r\n        switch (strings[0]) {\r\n            case \'MOV\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'MOV\'; }); //Alle treffer auf MOV Codes filtriert\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd()); //ERROR\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                strings = Manipulator_Manipulator.splitStringHalfUnfiltered(strings[1], ",");\r\n                // strings = this.filterForEmtpyStrings(strings);\r\n                // 2. Term Register\r\n                if (this.getDests(matches).includes(strings[0].toUpperCase())\r\n                    && this.Regs.includes(strings[0].toUpperCase())) { // A || B || C || IX || HL || SP\r\n                    toSave = strings[0];\r\n                    i.setSecondPart(toSave);\r\n                    strings[0] = strings[0].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0] + " ..."));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[0]) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    consoletostring = this.getScources(matches).join(", ");\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd()); //ERROR\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    // 3. Term Register\r\n                    if (this.getScources(matches).includes(strings[1].toUpperCase()) && this.Regs.includes(strings[1].toUpperCase())) { // A || B || C || [HL]\r\n                        toSave = strings[1];\r\n                        strings[1] = strings[1].toUpperCase();\r\n                        i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + strings[1]));\r\n                        matches = matches.filter(e => {\r\n                            if (e.getSource() == strings[1]) {\r\n                                return e;\r\n                            }\r\n                        });\r\n                        if (matches.length == 1) {\r\n                            i.setThirdPart(toSave);\r\n                            if (strings[0] == "[HL]" || strings[1] == "[HL]") {\r\n                                i.saveDescriptionLine(this.formatErkannt(indirekteRegAdressierung));\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                            }\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            //Bug aufgetrenten oder unbeachtetter fall\r\n                            i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // 3. Term nicht Register -> OFFSET Label || dat || const || label\r\n                        // console.log(strings[1]+" "+this.getDataType(strings[1]))\r\n                        if (this.getDataType(strings[1]) != DataType.NONE) {\r\n                            let type = this.getDataType(strings[1]);\r\n                            switch (type) {\r\n                                case DataType.dat_8:\r\n                                    if (consoletostring.includes("dat_8")) {\r\n                                        //i.saveDescriptionLine(`Gefunden -> \'dat_8\'`);\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat8());\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),"MOV "+strings[0]+", "+Manipulator.formatHextoDat8(strings[1])));\r\n                                        i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[1], "MOV " + strings[0] + ", " + strings[1])); // DecOrHex\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_8") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // Änderung\r\n                                        // i.setThirdPart(Manipulator.formatHextoDat8(strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        i.setThirdPart((strings[1]));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_16")) {\r\n                                        //i.saveDescriptionLine(`Gefunden -> \'dat_16\'`);\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat16());\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(this.formatGefunden("16-bit Wert " + strings[1], "MOV " + strings[0] + ", " + strings[1])); // DecOrHex\r\n                                        // i.saveDescriptionLine(this.formatGefunden("16-bit Wert "+Manipulator.formatHextoDat16(strings[1]),"MOV "+strings[0]+", "+Manipulator.formatHextoDat16(strings[1])));\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_16") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // Änderung\r\n                                        i.setThirdPart((strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1])); //can only be [HL]\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                case DataType.dat_16:\r\n                                    if (consoletostring.includes("dat_16") && [\'HL\', \'SP\', \'IX\'].includes(strings[0])) {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        // i.saveDescriptionLine(this.formatGefunden("16-bit Wert "+Manipulator.formatHextoDat16(strings[1]),"MOV "+strings[0]+", "+Manipulator.formatHextoDat16(strings[1])));\r\n                                        i.saveDescriptionLine(this.formatGefunden("16-bit Wert " + strings[1], "MOV " + strings[0] + ", " + strings[1])); // DecOrHex\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_16") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        i.setThirdPart((strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_8")) {\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNoConst(strings[1]));\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNoLabel(strings[1]));\r\n                                        // i.saveDescriptionLine(StringConstructor.expectedDat8Plus(strings[1]));\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    else {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1])); //can only be [HL]\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    break;\r\n                                case DataType.CONSTANT:\r\n                                    let value = this.symbollist.getSpecificConstantByName(strings[1])?.getValue();\r\n                                    if (value == undefined) { //bug Aufgetreten oder Konstante nicht angelegt\r\n                                        i.saveDescriptionLine(StringConstructor.bugNoValueForConst(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        return false;\r\n                                    }\r\n                                    type = this.getDataType(value);\r\n                                    if (consoletostring.includes("dat_8") && type == DataType.dat_8) { //Konstante hat Datentyp \'dat_8\' und ist erwartet\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_8") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat8Const(strings[1])); //CONST ANIMATION????\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(this.formatGefunden("Konstante " + `<span class="labelBlue">${strings[1]}</span>` + " mit dem Wert " + value, i.getFirstPart().toUpperCase() + " " + strings[0] + ", " + strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_16")) { //Konstante hat Datentyp \'dat_16\' und ist erwartet\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_16") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat16Const(strings[1])); //CONST ANIMATION????\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(this.formatGefunden("Konstante " + `<span class="labelBlue">${strings[1]}</span>` + " mit dem Wert " + value, i.getFirstPart().toUpperCase() + " " + strings[0] + ", " + strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_8")) {\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8Const(strings[1]));\r\n                                        // if(consoletostring.includes("label")){\r\n                                        //     i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(strings[1]));\r\n                                        // }\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        // i.saveDescriptionLine(StringConstructor.expectedDat8Plus(strings[1])); //KONSTANTE ZU GROß?\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    else {\r\n                                        // if(consoletostring.includes("label")){\r\n                                        //     i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(strings[1]));\r\n                                        // }\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        return false;\r\n                                    }\r\n                                    break;\r\n                                case DataType.LABEL:\r\n                                    if (!consoletostring.includes("label")) {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    let value1 = this.symbollist.getSpecificLabelByName(strings[1]);\r\n                                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${value1?.getName()}</span>\'`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + value1?.getName()));\r\n                                    // WARNING EINSETZEN?\r\n                                    i.setThirdPart(strings[1]);\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "label") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                                    break;\r\n                                case DataType.ELLIGIBLE:\r\n                                    if (!consoletostring.includes("label")) {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[1]}</span>\'`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + strings[1]));\r\n                                    i.setThirdPart(strings[1]);\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "label") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                                    break;\r\n                                default:\r\n                                    i.saveDescriptionLine(StringConstructor.bugSwitchDefault());\r\n                                    return false;\r\n                            }\r\n                            if (matches.length == 1) {\r\n                                i.setThirdPart(strings[1]);\r\n                                i.setType(InputLineType.TRANSLATED);\r\n                                i.setLength(matches[0].getSize());\r\n                                i.setHCode(matches[0].getHexCode());\r\n                                i.setValid(true);\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                                return false;\r\n                            }\r\n                        } //möglicher weise OFFSET Label\r\n                        else if (strings[1].toUpperCase().startsWith("OFFSET")) {\r\n                            let temp = Manipulator_Manipulator.splitStringHalf(strings[1], " ");\r\n                            if (temp.length < 2) {\r\n                                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                i.setError(strings[1]);\r\n                                return false;\r\n                            }\r\n                            if (this.getDataType(temp[1]) == DataType.LABEL) {\r\n                                if (!consoletostring.includes("dat_16")) {\r\n                                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                i.saveDescriptionLine(this.formatGefunden(`OFFSET`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", OFFSET " + temp[1]));\r\n                                matches = matches.filter(e => {\r\n                                    if (e.getSource() == "dat_16") {\r\n                                        return e;\r\n                                    }\r\n                                });\r\n                            }\r\n                            else if (this.getDataType(temp[1]) == DataType.ELLIGIBLE) {\r\n                                if (!consoletostring.includes("dat_16")) {\r\n                                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                this.symbollist.setLabelWithoutPosition(temp[1]);\r\n                                i.saveDescriptionLine(this.formatGefunden(`OFFSET`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", OFFSET " + temp[1]));\r\n                                if (temp[1].length > erlaubteLängeL_C) {\r\n                                    i.saveDescriptionLine(StringConstructor.warLabelZuLang(temp[1]));\r\n                                }\r\n                                matches = matches.filter(e => {\r\n                                    if (e.getSource() == "dat_16") {\r\n                                        return e;\r\n                                    }\r\n                                });\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(StringConstructor.noValidLabelAfterOffset());\r\n                                i.setError(strings[1]);\r\n                                return false;\r\n                            }\r\n                            if (matches.length == 1) {\r\n                                i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                i.setThirdPart(strings[1]);\r\n                                i.setType(InputLineType.TRANSLATED);\r\n                                i.setLength(matches[0].getSize());\r\n                                i.setHCode(matches[0].getHexCode());\r\n                                i.setOffsetLabel(true);\r\n                                i.setValid(true);\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                i.setError(strings[1]);\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (strings[1].trim() == "" || strings[1].trim() == " ") {\r\n                                i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                            }\r\n                            else {\r\n                                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            }\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.symbollist.isLabel(strings[0]) || this.symbollist.isEligible(strings[0])) { // MUSS label sein\r\n                    this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[0]}</span>\'`, i.getFirstPart().toUpperCase() + " " + strings[0] + " ..."));\r\n                    // WARNING EINSETZEN?\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    i.setSecondPart(strings[0]);\r\n                    if (!this.symbollist.isLabel(strings[0])) { //Wenn label unbekannt dann neue Ansetzen\r\n                        this.symbollist.setLabelWithoutPosition(strings[0]);\r\n                    }\r\n                    save4(i);\r\n                    consoletostring = this.getScources(matches).join(", ");\r\n                    i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (this.getScources(matches).includes(strings[1].toUpperCase())) {\r\n                        toSave = strings[1];\r\n                        strings[1] = strings[1].toUpperCase();\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], i.getFirstPart().toUpperCase() + " " + i.getSecondPart() + "," + strings[1]));\r\n                        matches = matches.filter(e => {\r\n                            if (e.getSource() == strings[1]) {\r\n                                return e;\r\n                            }\r\n                        });\r\n                        if (matches.length == 1) {\r\n                            i.setThirdPart(toSave);\r\n                            i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    if (strings[1] != undefined) {\r\n                        i.setRest("," + strings[1]);\r\n                    }\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'POP\':\r\n            case \'PUSH\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                // matches=this.mnemoCommands.filter(e=>{return e.getMCode()==\'PUSH\'});\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                else {\r\n                    // i.saveDescriptionLine(this.formatErkannt(stackBefehl));\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'IN\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'IN\'; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet("A"));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                strings = Manipulator_Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                if (strings[0].toUpperCase() == "A") {\r\n                    i.saveDescriptionLine(this.formatGefunden("Register A", "IN A ..."));\r\n                    i.setSecondPart(strings[0]);\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                    consoletostring = "dat_8";\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (this.symbollist.isConst(strings[1])) {\r\n                        if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                            this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                            // ??\r\n                            // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], "IN A, " + strings[1]));\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        // WARNING EINSETZEN?\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[1], "IN A, " + strings[1])); // DecOrHex\r\n                        // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),"IN A, "+Manipulator.formatHextoDat8(strings[1])));\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        i.setThirdPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    if (strings[1] != undefined) {\r\n                        i.setRest(", " + strings[1]);\r\n                    }\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'OUT\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'OUT\'; });\r\n                consoletostring = "dat_8";\r\n                i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                strings = Manipulator_Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                if (this.symbollist.isConst(strings[0])) {\r\n                    if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[0]).getValue())) {\r\n                        // ??\r\n                        // this.saveExtraInfo(i,consoletostring,strings[0]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[0]));\r\n                        i.setError(strings[0]);\r\n                        return false;\r\n                    }\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0] + " ..."));\r\n                    // WARNING EINSETZEN?\r\n                    i.setSecondPart(strings[0]);\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("A"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (strings[1].toUpperCase() == "A") {\r\n                        i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + strings[0] + ", A"));\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        //ÄNDERUNG\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        // need?\r\n                        // this.saveExtraInfo(i,consoletostring,strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator_Manipulator.isDat_8(strings[0])) {\r\n                    // this.saveExtraInfo(i,consoletostring,strings[0]);\r\n                    i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0] + " ...")); // DecOrHex\r\n                    // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[0]),i.getFirstPart().toUpperCase()+" "+Manipulator.formatHextoDat8(strings[0])+" ..."));\r\n                    i.setSecondPart((strings[0]));\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("A"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (strings[1].toUpperCase() == "A") {\r\n                        // i.saveDescriptionLine(this.formatGefunden("Register A",i.getFirstPart().toUpperCase()+" "+Manipulator.formatHextoDat8(strings[0])+", A"));\r\n                        i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + strings[0] + ", A")); // DecOrHex\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    // this.saveExtraInfo(i,consoletostring,strings[0]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'INC\':\r\n            case \'DEC\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                toSave = strings[1];\r\n                strings[1] = strings[1].toUpperCase();\r\n                if (this.getDests(matches).includes(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1]) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        // i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'ADD\':\r\n            case \'SUB\':\r\n            case \'AND\':\r\n            case \'OR\':\r\n            case \'XOR\':\r\n            case \'CP\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                //ÄNDERUNG\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                if (this.getDests(matches).includes(strings[1].toUpperCase())) {\r\n                    //ÄNDERUNG\r\n                    toSave = strings[1];\r\n                    strings[1] = strings[1].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1].toUpperCase()) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.symbollist.isConst(strings[1])) {\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                        // ??\r\n                        // this.saveExtraInfo(i,consoletostring,strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));\r\n                    i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'SHL\':\r\n            case \'SHR\':\r\n            case \'RCL\':\r\n            case \'ROL\':\r\n            case \'RCR\':\r\n            case \'ROR\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'JPNZ\':\r\n            case \'JPZ\':\r\n            case \'JPNC\':\r\n            case \'JPC\':\r\n            case \'JPNO\':\r\n            case \'JPO\':\r\n            case \'JPNS\':\r\n            case \'JPS\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = "label";\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                if (this.symbollist.isLabel(strings[1]) || (this.symbollist.isEligible(strings[1]) && !this.symbollist.isConst(strings[1]))) { // MUSS label sein\r\n                    // WARNING EINSETZEN?\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[0]}</span>\'`, strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // if(strings[1].length>erlaubteLängeL_C){\r\n                        //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[1]));\r\n                        // }\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        // i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'JP\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "JP"; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                if (this.symbollist.isLabel(strings[1]) || (this.symbollist.isEligible(strings[1]) && !this.symbollist.isConst(strings[1]))) { // MUSS label sein\r\n                    // WARNING EINSETZEN?\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[1]}</span>\'`, strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // if(strings[1].length>erlaubteLängeL_C){\r\n                        //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[1]));\r\n                        // }\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (strings[1].toUpperCase() == "[IX]") {\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "[IX]") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`Register [IX]`, "JP [IX]"));\r\n                        i.saveDescriptionLine(this.formatErkannt(indirekteRegAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'CALL\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "CALL"; });\r\n                consoletostring = "label";\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                if (this.symbollist.isLabel(strings[1]) || (this.symbollist.isEligible(strings[1]) && !this.symbollist.isConst(strings[1]))) { // MUSS label sein\r\n                    // WARNING EINSETZEN?\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[1]}</span>\'`, strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // if(strings[1].length>erlaubteLängeL_C){\r\n                        //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[1]));\r\n                        // }\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        // i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'HALT\':\r\n            case \'NOP\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'RET\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "RET"; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.saveDescriptionLine(this.formatErkannt(stackBefehl));\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                    return false;\r\n                }\r\n                break;\r\n            default: //BUG\r\n                i.saveDescriptionLine(StringConstructor.bugSwitchDefault());\r\n                return false;\r\n        }\r\n    }\r\n    parsetoPseudoMnemoCode(i, strings) {\r\n        let temp;\r\n        let consoletostring;\r\n        if (this.pseudoMCodes.includes(strings[0].toUpperCase())) { //gefunden Pseudo-MnemoCode\r\n            this.constDefFlag = false;\r\n            i.setFirstPart(strings[0]);\r\n            strings[0] = strings[0].toUpperCase();\r\n            i.saveDescriptionLine(this.formatGefunden(`Pseudo-Mnemocode ${strings[0]}`, strings[0] + " ..."));\r\n            if (strings.length < 2) {\r\n                i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                i.setError("");\r\n                return false;\r\n            }\r\n            switch (strings[0]) {\r\n                case \'RS\':\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                    save3(i);\r\n                    consoletostring = "dat_8";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`8-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));\r\n                        i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setLength(strings[1]); // DecOrHex ??\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        let Hcode = "";\r\n                        for (let i = 0; i < Manipulator_Manipulator.hexToDec(Manipulator_Manipulator.formatHextoDat8(strings[1])); i++) {\r\n                            Hcode += \'00\';\r\n                        }\r\n                        i.setHCode(Hcode);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                            // ??\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setSecondPart((strings[1])); //KONST ??\r\n                        i.setLength(Manipulator_Manipulator.formatHextoDat8(this.symbollist.getSpecificConstantByName(strings[1]).getValue()));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        let Hcode = "";\r\n                        for (let i = 0; i < Manipulator_Manipulator.hexToDec(this.symbollist.getSpecificConstantByName(strings[1]).getValue()); i++) {\r\n                            Hcode += \'00\';\r\n                        }\r\n                        i.setHCode(Hcode);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8());\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'DW\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_16"));\r\n                    consoletostring = "dat_16";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (Manipulator_Manipulator.isDat_16(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        // i.saveDescriptionLine(this.formatGefunden(`16-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat16(strings[1])));\r\n                        i.setLength(2);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setLength(2);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (strings[1].toUpperCase().startsWith("OFFSET")) {\r\n                        temp = Manipulator_Manipulator.splitStringHalf(strings[1], " ");\r\n                        if (temp.length < 2) {\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        if (this.symbollist.isLabel(temp[1])) {\r\n                            this.symbollist.isEligible(temp[1]);\r\n                            i.saveDescriptionLine(this.formatGefunden(`OFFSET`, "DW OFFSET " + temp[1]));\r\n                        }\r\n                        else if (this.symbollist.isEligible(temp[1])) {\r\n                            this.symbollist.setLabelWithoutPosition(temp[1]);\r\n                            // if(strings[1].length>erlaubteLängeL_C){\r\n                            //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(temp[1]));\r\n                            // }\r\n                            i.saveDescriptionLine(this.formatGefunden(`OFFSET`, "DW OFFSET " + temp[1]));\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(StringConstructor.noValidLabelAfterOffset());\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(2);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setOffsetLabel(true);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat16Plus(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'DB\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                    consoletostring = "dat_8";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`8-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));\r\n                        i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        i.setLength(1);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setLength(1);\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8Plus(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'ORG\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_16"));\r\n                    consoletostring = "dat_16";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    // console.log(strings[1]);\r\n                    // console.log(Manipulator.isDat_16(strings[1]));\r\n                    // console.log(this.symbollist.isConst(strings[1]));\r\n                    if (Manipulator_Manipulator.isDat_16(strings[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`16-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat16(strings[1]))); \r\n                        i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        i.setLength(Manipulator_Manipulator.hexToDec(Manipulator_Manipulator.formatHextoDat16(strings[1])));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setLength(Manipulator_Manipulator.hexToDec(this.symbollist.getSpecificConstantByName(strings[1]).getValue()));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat16Plus(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'EXT\':\r\n                case \'ENT\':\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`Pseudo-Mnemocode \'${strings[0].toUpperCase()}\' ist nicht unterstützt!`));\r\n                    i.setFirstPart(strings[0].toUpperCase());\r\n                    i.setError(strings[0]);\r\n                    return false;\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.bugSwitchDefault());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                    break;\r\n            }\r\n        }\r\n        else if (!this.constDefFlag) {\r\n            i.saveDescriptionLine(StringConstructor.noConstDefAllowed());\r\n            i.setError(strings[0]);\r\n            return false;\r\n        }\r\n        else if (this.symbollist.isEligible(strings[0]) && !this.symbollist.isConst(strings[0]) && !this.symbollist.isLabel(strings[0]) && i.getLabel() == "") {\r\n            i.saveDescriptionLine(this.formatGefunden(`Konstante ${strings[0]}`, strings[0] + " ..."));\r\n            save2(i);\r\n            i.saveDescriptionLine(this.formatErwartet(`EQU`));\r\n            if (strings.length < 2) {\r\n                i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                i.setError("");\r\n                // i.setError(strings[0]);\r\n                return false;\r\n            }\r\n            let new_commands = Manipulator_Manipulator.splitStringHalf(strings[1], " ");\r\n            new_commands = this.filterForEmtpyStrings(new_commands);\r\n            i.setFirstPart(strings[0]);\r\n            if (new_commands[0].toUpperCase() == "EQU") {\r\n                i.saveDescriptionLine(this.formatGefunden("EQU", i.getFirstPart() + " EQU" + " ..."));\r\n                i.saveDescriptionLine(`<span class="gray">parse Operandenfeld:</span>`);\r\n                i.saveDescriptionLine(this.formatErwartet(`dat_16`));\r\n                i.setSecondPart(new_commands[0]);\r\n                if (new_commands.length > 1) {\r\n                    let type = this.getDataType(new_commands[1]);\r\n                    if (type == DataType.dat_8) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ${new_commands[1]}`, i.getFirstPart() + " " + new_commands[0] + " " + new_commands[1])); // DecOrHex\r\n                        // i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ${Manipulator.formatHextoDat8(new_commands[1])}`,i.getFirstPart()+" "+new_commands[0]+" "+Manipulator.formatHextoDat8(new_commands[1]))); \r\n                        i.setThirdPart((new_commands[1]));\r\n                        i.setValid(true);\r\n                        this.symbollist.setConst(strings[0], new_commands[1]);\r\n                        return true;\r\n                    }\r\n                    else if (type == DataType.dat_16) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ${Manipulator.formatHextoDat16(new_commands[1])}`,i.getFirstPart()+" "+new_commands[0]+" "+Manipulator.formatHextoDat16(new_commands[1])));\r\n                        i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ${new_commands[1]}`, i.getFirstPart() + " " + new_commands[0] + " " + new_commands[1])); // DecOrHex\r\n                        i.setThirdPart((new_commands[1]));\r\n                        i.setValid(true);\r\n                        this.symbollist.setConst(strings[0], new_commands[1]);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.expectedDat16Plus(new_commands[1]));\r\n                        i.setError(new_commands[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(StringConstructor.invalidCmd(new_commands[0]));\r\n                i.setError(new_commands[0]);\r\n                i.setRest(new_commands[1]);\r\n                return false;\r\n            }\r\n        }\r\n        else if (this.symbollist.isConst(strings[0])) {\r\n            i.saveDescriptionLine(StringConstructor.errConstDef(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (this.symbollist.isLabel(strings[0])) {\r\n            i.saveDescriptionLine(StringConstructor.nameTakenForLabel(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (!this.symbollist.isEligible(strings[0])) {\r\n            i.saveDescriptionLine(StringConstructor.noValidConstOrOperand(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (i.getLabel() != "") {\r\n            i.saveDescriptionLine(StringConstructor.noConstafterLabelDef());\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            i.saveDescriptionLine(this.formatErrorMassage(`unkown error`));\r\n            i.setError(strings[0]);\r\n            return false;\r\n        }\r\n    }\r\n    getDataType(addr) {\r\n        if (this.Regs.includes(addr) || this.pseudoMCodes.includes(addr) || this.mCodes.includes(addr)) {\r\n            return DataType.NONE;\r\n        }\r\n        if (addr.trim() == " " || addr.trim() == "") {\r\n            return DataType.NONE;\r\n        }\r\n        if (Manipulator_Manipulator.isDat_8(addr)) {\r\n            return DataType.dat_8;\r\n        }\r\n        else if (Manipulator_Manipulator.isDat_16(addr)) {\r\n            return DataType.dat_16;\r\n        }\r\n        else if (this.symbollist.isConst(addr)) {\r\n            return DataType.CONSTANT;\r\n        }\r\n        else if (this.symbollist.isLabel(addr)) {\r\n            return DataType.LABEL;\r\n        }\r\n        else if (this.symbollist.isEligible(addr)) {\r\n            return DataType.ELLIGIBLE;\r\n        }\r\n        else\r\n            return DataType.NONE;\r\n    }\r\n    saveExtraInfo(i, consoleString, s) {\r\n        let typeData = this.getDataType(s);\r\n        if (this.Regs.includes(s) || this.mCodes.includes(s) || this.pseudoMCodes.includes(s)) {\r\n            return;\r\n        }\r\n        if (consoleString.includes("dat_8")) {\r\n            switch (typeData) {\r\n                case DataType.dat_8:\r\n                    i.saveDescriptionLine(StringConstructor.infoIsDat8());\r\n                    return;\r\n                case DataType.CONSTANT:\r\n                    if (Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(s).getValue())) {\r\n                        i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                        i.saveDescriptionLine(StringConstructor.infoIsDat8Const(s));\r\n                        return;\r\n                    }\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8Const(s));\r\n                    // i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(s));\r\n                    // return;\r\n                    break;\r\n                case DataType.LABEL:\r\n                case DataType.ELLIGIBLE:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8Const(s));\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    i.saveDescriptionLine(StringConstructor.infoInvalidConst(s));\r\n                    // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    break;\r\n            }\r\n        }\r\n        else if (consoleString.includes("dat_16")) {\r\n            switch (typeData) {\r\n                case DataType.dat_8:\r\n                case DataType.dat_16:\r\n                    i.saveDescriptionLine(StringConstructor.infoIsDat16());\r\n                    return;\r\n                case DataType.CONSTANT:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                    i.saveDescriptionLine(StringConstructor.infoIsDat16Const(s));\r\n                    return;\r\n                    // i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(s));\r\n                    // return;\r\n                    break;\r\n                case DataType.LABEL:\r\n                case DataType.ELLIGIBLE:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16Const(s));\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                    i.saveDescriptionLine(StringConstructor.infoInvalidConst(s));\r\n                    // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    break;\r\n            }\r\n        }\r\n        if (consoleString.includes("label")) {\r\n            switch (typeData) {\r\n                case DataType.CONSTANT:\r\n                    i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(s));\r\n                    break;\r\n                case DataType.ELLIGIBLE:\r\n                case DataType.LABEL:\r\n                    // i.saveDescriptionLine(StringConstructor.infoIsLabel(s));\r\n                    return;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.infoInvalidLabel(s));\r\n                    break;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getMaxLen(m) {\r\n        let n = [];\r\n        m.forEach(e => {\r\n            if (!n.includes(e.getLength())) {\r\n                n.push(e.getLength());\r\n            }\r\n        });\r\n        return Math.max(...n);\r\n    }\r\n    getMCodes() {\r\n        let addr = [];\r\n        this.mnemoCommands.forEach(element => {\r\n            if (!addr.includes(element.getMCode())) {\r\n                addr.push(element.getMCode());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n    getDests(commands) {\r\n        let addr = [];\r\n        commands.forEach(element => {\r\n            if (!addr.includes(element.getDestination()) && element.getDestination() != "") {\r\n                addr.push(element.getDestination());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n    getScources(commands) {\r\n        let addr = [];\r\n        commands.forEach(element => {\r\n            if (!addr.includes(element.getSource()) && element.getSource() != "") {\r\n                addr.push(element.getSource());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/InputLineControl.ts\n\r\n\r\n\r\n\r\n\r\nclass InputLineControl {\r\n    constructor() {\r\n        this.inputstrings = [];\r\n        this.inputlines = [];\r\n        this.symbolliste = SymbolList.getInstance();\r\n        this.map = CommandMap.getInstance();\r\n        this.IDcounter = 0;\r\n        this.translatedIDs = [];\r\n        this.invalidIDs = [];\r\n        this.startingAddrOfTranslated = 0;\r\n        this.hasInvalid = () => {\r\n            if (this.invalidIDs.length == 0) {\r\n                return false;\r\n            }\r\n            else\r\n                return true;\r\n        };\r\n        this.getInvalidIDs = () => {\r\n            return this.invalidIDs;\r\n        };\r\n        this.getInvalidInputLines = () => {\r\n            let invalidInputllines = [];\r\n            this.inputlines.forEach(e => {\r\n                if (this.invalidIDs.includes(e.getId())) {\r\n                    invalidInputllines.push(e);\r\n                }\r\n            });\r\n            return invalidInputllines;\r\n        };\r\n        this.reset = () => {\r\n            this.IDcounter = 0;\r\n            this.startingAddrOfTranslated = 0;\r\n            this.inputlines = [];\r\n            this.translatedIDs = [];\r\n            this.invalidIDs = [];\r\n            this.symbolliste.empty();\r\n            this.map.resetConstDefFlag();\r\n        };\r\n        this.addInputLines = (inputStrings) => {\r\n            this.reset();\r\n            inputStrings.forEach(e => {\r\n                this.addInputLine(e);\r\n            });\r\n        };\r\n        this.addInputLine = (inputString) => {\r\n            let i = new InputLine(inputString, this.IDcounter);\r\n            if (i.getType() == InputLineType.EMPTY) {\r\n                this.inputlines.push(i);\r\n                this.IDcounter = this.IDcounter + 1;\r\n                return;\r\n            }\r\n            else if (i.getType() == InputLineType.PSEUDOTRANSLATED) {\r\n                this.map.mapInputLineByCase(i);\r\n                this.inputlines.push(i);\r\n                if (i.getValid()) { // UPDATE FOR ORG?????\r\n                    // console.log(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                    i.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                    /* if(this.startingAddrOfTranslated==0){\r\n                        i.setStartingAddr(\'0000h\');\r\n                    }\r\n                    else{\r\n                    } */\r\n                    // i.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n                else {\r\n                    if (i.getLabel() != "") {\r\n                        this.symbolliste.removeLabel(i.getLabel());\r\n                    }\r\n                    this.invalidIDs.push(this.IDcounter);\r\n                }\r\n                this.IDcounter = this.IDcounter + 1;\r\n                return;\r\n            }\r\n            this.map.mapInputLineByCase(i);\r\n            this.inputlines.push(i);\r\n            // console.log(i);\r\n            if (i.getValid()) {\r\n                this.createSummary(i);\r\n                this.calculateStartingAddr(i);\r\n                this.calculateTranslation(i, false);\r\n                if (i.hasLabel()) {\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n            }\r\n            else {\r\n                /* if(i.getLabel()!=""){\r\n                    this.symbolliste.removeLabel(i.getLabel());\r\n                } */\r\n                this.calculateStartingAddr(i);\r\n                if (i.hasLabel()) {\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n                this.invalidIDs.push(this.IDcounter);\r\n            }\r\n            this.IDcounter = this.IDcounter + 1;\r\n            // console.log(i);\r\n        };\r\n        this.calculateStartingAddr = (i) => {\r\n            let e = (i != null ? i : this.inputlines[this.IDcounter]);\r\n            if (e.getValid() != true) {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                return;\r\n            }\r\n            if (e.getType() == InputLineType.TRANSLATED) {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                this.translatedIDs.push(this.IDcounter);\r\n                this.startingAddrOfTranslated = this.startingAddrOfTranslated + e.getLength();\r\n                return;\r\n            }\r\n            if (e.getFirstPart().toUpperCase() == \'ORG\') {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                this.startingAddrOfTranslated = e.getLength();\r\n                return;\r\n            }\r\n        };\r\n        this.calculateRest = (...addr) => {\r\n            let n = 0;\r\n            let rest;\r\n            let newS = addr;\r\n            addr.forEach(e => {\r\n                if (e == "????" || undefined || "") {\r\n                }\r\n                else if (Manipulator_Manipulator.isHex(e)) {\r\n                    if (Manipulator_Manipulator.isDat_8(e)) {\r\n                        n = n - Manipulator_Manipulator.hexToDec(e);\r\n                    }\r\n                    else {\r\n                        rest = Manipulator_Manipulator.splitDat16InDat8(e);\r\n                        n = n - Manipulator_Manipulator.hexToDec(rest[0]);\r\n                        n = n - Manipulator_Manipulator.hexToDec(rest[1]);\r\n                    }\r\n                }\r\n                else {\r\n                    n = n - Number(e);\r\n                }\r\n            });\r\n            while (n < 0) {\r\n                n = n + 256;\r\n            }\r\n            return String(n);\r\n        };\r\n        this.calculateTranslation = (i, flag) => {\r\n            let e = (i != null ? i : this.inputlines[this.IDcounter]);\r\n            if (e.getType() != InputLineType.TRANSLATED) {\r\n                return;\r\n            }\r\n            let rest = "";\r\n            let addr = this.fHD16(e.getStartingAddr());\r\n            let h = "";\r\n            let hex = e.getHCode();\r\n            /*         if(e.getStartingAddr()==\'0000h\'){\r\n                        addr=\'0000h\'\r\n                    }\r\n                    else{\r\n                        addr=this.fHD16(e.getStartingAddr());\r\n                    } */\r\n            if (e.getFirstPart().toUpperCase() == \'RS\') {\r\n                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr));\r\n                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${hex}${this.fHD8WH(rest)}`);\r\n            }\r\n            else if (e.getFirstPart().toUpperCase() == \'DB\') {\r\n                h = e.getSecondPart();\r\n                if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                    h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n                }\r\n                else {\r\n                    h = i.getSecondPart();\r\n                }\r\n                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n            }\r\n            else if (e.getFirstPart().toUpperCase() == \'DW\') {\r\n                if (e.hasOffsetLabel()) {\r\n                    h = (this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset()) == undefined ? "????" : this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset()));\r\n                    h = flag ? "????" : h;\r\n                }\r\n                else {\r\n                    if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                        h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n                    }\r\n                    else {\r\n                        h = i.getSecondPart();\r\n                    }\r\n                }\r\n                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n            }\r\n            else {\r\n                switch (e.getLength()) {\r\n                    case 1:\r\n                        if (Manipulator_Manipulator.isDat_8(hex)) {\r\n                            rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr));\r\n                            e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(rest)}`);\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8`);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (Manipulator_Manipulator.isDat_8(hex)) {\r\n                            /* let type= this.map.getDataType(e.getSecondPart()); */\r\n                            if (Manipulator_Manipulator.isDat_8(e.getSecondPart())) {\r\n                                h = e.getSecondPart();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (Manipulator_Manipulator.isDat_8(e.getThirdPart())) {\r\n                                h = e.getThirdPart();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, e.getThirdPart()));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getSecondPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getSecondPart()).getValue();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getThirdPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getThirdPart()).getValue();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! Case2 failed!`);\r\n                            }\r\n                        }\r\n                        else if (Manipulator_Manipulator.isDat_16(hex)) {\r\n                            rest = this.fHD8(this.calculateRest(String(e.getLength()), hex, addr));\r\n                            e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.fHD8WH(rest)}`);\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8 or dat_16`);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        if (Manipulator_Manipulator.isDat_8(hex)) {\r\n                            if (this.symbolliste.isLabel(e.getSecondPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${flag?this.getLittleEndianOf(h.replace(/h$/,"")):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isLabel(e.getThirdPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getThirdPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${flag?this.getLittleEndianOf(h.replace(/h$/,"")):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (Manipulator_Manipulator.isDat_16(e.getThirdPart())) {\r\n                                h = e.getThirdPart();\r\n                                // console.log(h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getThirdPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getThirdPart()).getValue();\r\n                                console.log(h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (e.hasOffsetLabel()) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getLabelOfOffset());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! Case3 failed!`);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8`);\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        if (Manipulator_Manipulator.isDat_16(hex)) {\r\n                            if (this.symbolliste.isLabel(e.getSecondPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${flag?h.replace(/h$/,""):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isLabel(e.getThirdPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getThirdPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${flag?h.replace(/h$/,""):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (Manipulator_Manipulator.isDat_16(e.getThirdPart())) {\r\n                                h = e.getThirdPart();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getThirdPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getThirdPart()).getValue();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (e.hasOffsetLabel()) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getLabelOfOffset());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! Case4 failed!`);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is not dat_16`);\r\n                        }\r\n                        break;\r\n                    /*  default:\r\n                         rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr));\r\n                         e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${hex}${this.fHD8WH(rest)}`);\r\n                         break;\r\n                  */\r\n                }\r\n            }\r\n        };\r\n        this.getInputLines = () => {\r\n            return this.inputlines;\r\n        };\r\n        this.getTranslatedIDs = () => {\r\n            return this.translatedIDs;\r\n        };\r\n    }\r\n    static getInstance() {\r\n        if (!InputLineControl.instance) {\r\n            InputLineControl.instance = new InputLineControl();\r\n        }\r\n        return InputLineControl.instance;\r\n    }\r\n    setInputStrings(s) {\r\n        this.inputstrings = s;\r\n    }\r\n    getInputStrings() {\r\n        return this.inputstrings;\r\n    }\r\n    getLittleEndianOf(h) {\r\n        return Manipulator_Manipulator.splitDat16InDat8(h).join("");\r\n    }\r\n    checkTranslationForUnknownLabel(i) {\r\n        if (i.getType() == InputLineType.TRANSLATED) {\r\n            if (i.getTranslation().includes("????")) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    fHD16(h) {\r\n        return Manipulator_Manipulator.formatHextoDat16(h);\r\n    }\r\n    fHD16WH(h) {\r\n        return Manipulator_Manipulator.formatHextoDat16WithoutH(h);\r\n    }\r\n    fHD8(h) {\r\n        return Manipulator_Manipulator.formatHextoDat8(h);\r\n    }\r\n    fHD8WH(h) {\r\n        return Manipulator_Manipulator.formatHextoDat8WithoutH(h);\r\n    }\r\n    retranslate(i) {\r\n        this.calculateTranslation(i, true);\r\n    }\r\n    getDisplayableSpeicherabbild(i, flag) {\r\n        let s = this.getSpeicherAbbild(i, flag);\r\n        if (i.getFirstPart().toUpperCase() == "RS") {\r\n            return s;\r\n        }\r\n        let toReturn = "";\r\n        for (let j = 0; j < s.length; j++) {\r\n            if (j != 0 && (j % 2) == 0) {\r\n                toReturn = toReturn.concat(" ");\r\n            }\r\n            toReturn = toReturn.concat(s[j]);\r\n        }\r\n        return toReturn;\r\n    }\r\n    getSpeicherAbbild(i, flag) {\r\n        let s = i.commandLinetoString(true);\r\n        let h = i.getHCode();\r\n        let l = "";\r\n        // console.log(i.getCommandLine()+" ... "+i.getLength()+" ... "+i.getHCode());\r\n        if (i.getFirstPart().toUpperCase() == "RS") {\r\n            // return "00 ... ("+i.getLength()+"x)";\r\n            return (h.length > 4 ? "00 ... (" + i.getLength() + "x)" : h);\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == "ORG") {\r\n            return "";\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == \'DB\') {\r\n            if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n            }\r\n            else {\r\n                h = i.getSecondPart();\r\n            }\r\n            return `${this.fHD8WH(h)}`;\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == \'DW\') {\r\n            if (i.hasOffsetLabel()) {\r\n                return ((this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset()) == undefined || !flag) ? "????" : this.getLittleEndianOf(this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset())));\r\n            }\r\n            if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n            }\r\n            else {\r\n                h = i.getSecondPart();\r\n            }\r\n            return this.getLittleEndianOf(h);\r\n        }\r\n        else {\r\n            switch (i.getLength()) {\r\n                case 1:\r\n                    return this.fHD8WH(h);\r\n                    break;\r\n                case 2:\r\n                    if (Manipulator_Manipulator.isDat_8(i.getSecondPart())) {\r\n                        return this.fHD8WH(h) + this.fHD8WH(i.getSecondPart());\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n                        return this.fHD8WH(h) + this.fHD8WH(l);\r\n                    }\r\n                    else if (Manipulator_Manipulator.isDat_8(i.getThirdPart())) {\r\n                        return this.fHD8WH(h) + this.fHD8WH(i.getThirdPart());\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart()).getValue();\r\n                        return this.fHD8WH(h) + this.fHD8WH(l);\r\n                    }\r\n                    else {\r\n                        return this.fHD16WH(h);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    if (this.symbolliste.isLabel(i.getSecondPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getSecondPart());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getThirdPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getThirdPart());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart())?.getValue();\r\n                        return this.fHD8WH(h) + (l != undefined ? this.getLittleEndianOf(l) : l);\r\n                    }\r\n                    else if (i.hasOffsetLabel()) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else {\r\n                        return this.fHD8WH(h) + this.getLittleEndianOf(i.getThirdPart());\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart())?.getValue();\r\n                        return this.fHD16WH(h) + (l != undefined ? this.getLittleEndianOf(l) : l);\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getSecondPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getSecondPart());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getThirdPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getThirdPart());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (i.hasOffsetLabel()) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else {\r\n                        return this.fHD16WH(h) + this.getLittleEndianOf(i.getThirdPart());\r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n            return "";\r\n        }\r\n    }\r\n    createSummary(i) {\r\n        let s = i.commandLinetoString(true);\r\n        let h = i.getHCode();\r\n        let l = "";\r\n        let c;\r\n        if (i.getFirstPart().toUpperCase() == "ORG" && i.getValid()) {\r\n            saveInput(i, 5);\r\n            if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Addresszähler = <span id="addressbyte${i.getId()}">` + this.fHD16WH(this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue()) + `</span></span>`);\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Addresszähler = <span id="addressbyte${i.getId()}">` + i.getSecondPart() + `</span></span>`);\r\n            }\r\n        }\r\n        else if (i.getType() == InputLineType.TRANSLATED) {\r\n            saveInput(i, 5);\r\n            if (i.getFirstPart().toUpperCase() == "RS") {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + s + " -> " + (h.length > 4 ? "00 (" + i.getLength() + "x)" : h) + `</span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Anzahl der Bytes: <span id="addressbyte${i.getId()}">` + i.getLength() + `</span></span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Erhöhe Adresszähler</span>`);\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + s + " -> " + this.getDisplayableSpeicherabbild(i, false) + `</span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Anzahl der Bytes: <span id="addressbyte${i.getId()}">` + i.getLength() + `</span></span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Erhöhe Adresszähler</span>`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Tools.ts\n\r\nconst getHtmlElement = (id) => document.getElementById(id);\r\nconst createClickListener = (id, f) => {\r\n    try {\r\n        const a = document.getElementById(id);\r\n        if (a != null) {\r\n            a.addEventListener("click", f);\r\n        }\r\n        else\r\n            throw new Error("Element " + id + " is null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst updateScroll = (id) => {\r\n    var element = getHtmlElement(id);\r\n    element.scrollTop = element.scrollHeight;\r\n};\r\nconst updateScrollOfSymbolTable = (id) => {\r\n    let targetElem = document.getElementById(id);\r\n    let n = 0;\r\n    if (targetElem != null) {\r\n        if (targetElem.offsetTop + targetElem.offsetHeight > symbolTableLines.scrollTop + symbolTableLines.clientHeight + symbolTableLines.offsetTop) {\r\n            symbolTableLines.scrollTop = (targetElem.offsetTop + 2 * targetElem.offsetHeight - symbolTableLines.offsetTop - symbolTableLines.clientHeight);\r\n            // return targetElem.offsetTop+2*targetElem.offsetHeight-symbolTableLines.offsetTop-symbolTableLines.clientHeight;\r\n            n = targetElem.offsetTop + 2 * targetElem.offsetHeight - symbolTableLines.offsetTop - symbolTableLines.clientHeight;\r\n            return n > symbolTableLines.scrollHeight - symbolTableLines.offsetHeight\r\n                ? symbolTableLines.scrollHeight - symbolTableLines.offsetHeight\r\n                : n;\r\n        }\r\n        else if (targetElem.offsetTop < symbolTableLines.offsetTop + symbolTableLines.scrollTop) {\r\n            symbolTableLines.scrollTop = (targetElem.offsetTop - symbolTableLines.offsetTop);\r\n            return targetElem.offsetTop - symbolTableLines.offsetTop;\r\n        }\r\n    }\r\n    return symbolTableLines.scrollTop;\r\n};\r\nconst updateScrollOfIn_Out = (id, targetID) => {\r\n    var elem = id == inputText.id ? inputText : outputText;\r\n    var targetElem = getHtmlElement(targetID);\r\n    let n = 0;\r\n    if (targetElem.offsetTop + 2 * targetElem.offsetHeight > elem.scrollTop + elem.clientHeight + elem.offsetTop) {\r\n        inputText.scrollTop = (targetElem.offsetTop - elem.offsetTop - elem.clientHeight + 2 * targetElem.offsetHeight);\r\n        outputText.scrollTop = (targetElem.offsetTop - elem.offsetTop - elem.clientHeight + 2 * targetElem.offsetHeight);\r\n        n = targetElem.offsetTop - elem.offsetTop - elem.clientHeight + 2 * targetElem.offsetHeight;\r\n        return n > elem.scrollHeight - elem.offsetHeight ? elem.scrollHeight - elem.offsetHeight : n;\r\n    }\r\n    else if (targetElem.offsetTop < elem.offsetTop + elem.scrollTop) {\r\n        inputText.scrollTop = (targetElem.offsetTop - elem.offsetTop);\r\n        outputText.scrollTop = (targetElem.offsetTop - elem.offsetTop);\r\n        return targetElem.offsetTop - elem.offsetTop;\r\n    }\r\n    return elem.scrollTop;\r\n};\r\nconst removeClassOfAll = (s) => {\r\n    let elements = Array.from(document.querySelectorAll("." + s + ""));\r\n    for (let elem of elements) {\r\n        elem.classList.remove(s);\r\n    }\r\n};\r\nconst addClassTo = (id, cls) => {\r\n    let elem = getHtmlElement(id);\r\n    if (elem != null || elem != undefined) {\r\n        elem.classList.add(cls);\r\n    }\r\n};\r\nconst getIDOfSelected = (s) => {\r\n    return s[0] + s[1];\r\n};\r\nconst updateScrollOfDescriptionLines = (id, targetID) => {\r\n    var elem = getHtmlElement(id);\r\n    var targetElem = getHtmlElement(targetID);\r\n    targetElem.scrollTop = elem.offsetTop - targetElem.offsetTop;\r\n};\r\n\n;// CONCATENATED MODULE: ./src/AnimationUtil.ts\n\r\n\r\nconst sleepFor = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\nconst speedBTN = getHtmlElement("speed");\r\nconst speedSlider = getHtmlElement("speedSlider");\r\nconst singleStepBTN = getHtmlElement("singleStep");\r\nconst animationTyp1BTN = getHtmlElement("animationsTyp1");\r\nconst animationTyp2BTN = getHtmlElement("animationsTyp2");\r\nconst animationTyp3BTN = getHtmlElement("animationsTyp3");\r\nconst playButton = getHtmlElement("play");\r\nconst resetButton = getHtmlElement("reset");\r\nconst setCurrentLineHidden = () => {\r\n    if (aniControl.speed >= 3 && aniControl.isAni3() && aniControl.play) {\r\n        currentLineLine.style.visibility = "hidden";\r\n    }\r\n};\r\nconst setCurrentLineVisible = () => {\r\n    currentLineLine.style.visibility = "visible";\r\n};\r\nconst checkIfPaused = async () => {\r\n    if (aniControl.play) {\r\n        return true;\r\n    }\r\n    while (true) {\r\n        if (aniControl.play) {\r\n            return true;\r\n        }\r\n        if (aniControl.reset) {\r\n            throw Error(\'Reset pressed\');\r\n        }\r\n        if (aniControl.stop) {\r\n            throw Error(\'Stop pressed\');\r\n        }\r\n        await sleepFor(100);\r\n    }\r\n};\r\nconst sleepUntilNextStep = async () => {\r\n    let c = aniControl.baseFrameTime;\r\n    if (aniControl.isAni3()) {\r\n        if (aniControl.speed == 1) {\r\n            await sleepFor(10);\r\n            await checkIfPaused();\r\n            return;\r\n        }\r\n        await sleepFor(3);\r\n        await checkIfPaused();\r\n        return;\r\n    }\r\n    while (true) {\r\n        if (c < 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            await sleepFor(10);\r\n            c -= 10;\r\n            await checkIfPaused();\r\n        }\r\n    }\r\n};\r\nconst sleepStaticAnimation = async () => {\r\n    let b = 2 * aniControl.baseFrameTime;\r\n    let n = 10 * aniControl.speed;\r\n    while (b > 0) {\r\n        await sleepFor(n / (aniControl.speed));\r\n        await checkIfPaused();\r\n        b = b - 10;\r\n    }\r\n};\r\nconst sleepStaticAnimationHalf = async () => {\r\n    let b = aniControl.baseFrameTime;\r\n    let n = 10 * aniControl.speed;\r\n    while (b > 0) {\r\n        await sleepFor(n / (aniControl.speed));\r\n        await checkIfPaused();\r\n        b = b - 10;\r\n    }\r\n};\r\nconst sleepStopStartTime = async () => {\r\n    let b = aniControl.baseFrameTime / 2;\r\n    while (b > 0) {\r\n        await sleepFor(10);\r\n        await checkIfPaused();\r\n        b = b - 10;\r\n    }\r\n};\r\nconst sleepForFrame = async () => {\r\n    // let b=aniControl.baseFrameTime/aniControl.frames;\r\n    let b = aniControl.baseFrameTime / 120 / 2;\r\n    while (b > 0) {\r\n        await sleepFor(1);\r\n        b = b - 1;\r\n        await checkIfPaused();\r\n    }\r\n};\r\nvar AnimationsTyp;\r\n(function (AnimationsTyp) {\r\n    AnimationsTyp["Typ1"] = "Typ1";\r\n    AnimationsTyp["Typ2"] = "Typ2";\r\n    AnimationsTyp["Typ3"] = "Typ3";\r\n})(AnimationsTyp || (AnimationsTyp = {}));\r\nclass AnimationControl {\r\n    constructor() {\r\n        this.animationType = AnimationsTyp.Typ1;\r\n        this.resetFlags = () => {\r\n            while (!aniControl.reset) {\r\n            }\r\n            ;\r\n            this.start = false;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.stop = false;\r\n            this.end = false;\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.setStart = () => {\r\n            this.start = true;\r\n            this.setPlaying();\r\n        };\r\n        this.setSinglestep = () => {\r\n            if (this.singleStepFlag)\r\n                this.singleStepFlag = false;\r\n            else\r\n                this.singleStepFlag = true;\r\n            this.singleStepFlag ? singleStepBTN.classList.add("selected") : singleStepBTN.classList.remove("selected");\r\n        };\r\n        this.setSpeedTo = (n) => {\r\n            if (n < 1) {\r\n                speedSlider.value = `${1}`;\r\n                return 1;\r\n            }\r\n            else if (n > 4) {\r\n                speedSlider.value = `${(4)}`;\r\n                return 4;\r\n            }\r\n            else {\r\n                speedSlider.value = `${(n)}`;\r\n                return n;\r\n            }\r\n        };\r\n        this.increaseSpeed = () => {\r\n            this.setSpeed(this.setSpeedTo(speedSlider.valueAsNumber + 1));\r\n        };\r\n        this.decreaseSpeed = () => {\r\n            this.setSpeed(this.setSpeedTo(speedSlider.valueAsNumber - 1));\r\n        };\r\n        this.setAnimationTyp1 = () => {\r\n            if (this.isAni3() && this.speed >= 3) {\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n            }\r\n            this.animationType = AnimationsTyp.Typ1;\r\n            this.setSmoothIfNecessery();\r\n            try {\r\n                descriptionLines.classList.add("scrollSmooth");\r\n                animationTyp1BTN.classList.add("selected");\r\n                animationTyp2BTN.classList.remove("selected");\r\n                animationTyp3BTN.classList.remove("selected");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.setAnimationTyp2 = () => {\r\n            if (this.isAni3() && this.speed >= 3) {\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n            }\r\n            this.animationType = AnimationsTyp.Typ2;\r\n            this.setSmoothIfNecessery();\r\n            try {\r\n                descriptionLines.classList.add("scrollSmooth");\r\n                animationTyp1BTN.classList.remove("selected");\r\n                animationTyp2BTN.classList.add("selected");\r\n                animationTyp3BTN.classList.remove("selected");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.setAnimationTyp3 = () => {\r\n            this.animationType = AnimationsTyp.Typ3;\r\n            this.removeSmoothScroll();\r\n            try {\r\n                animationTyp1BTN.classList.remove("selected");\r\n                animationTyp2BTN.classList.remove("selected");\r\n                animationTyp3BTN.classList.add("selected");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.setPlaying = () => {\r\n            if (this.start && !this.stop) {\r\n                this.play = true;\r\n                this.pause = false;\r\n                this.end = false;\r\n                this.stop = false;\r\n                this.changePlayButtonBKG();\r\n            }\r\n        };\r\n        this.setStop = () => {\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.end = false;\r\n            this.stop = true;\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.setPaused = () => {\r\n            if (this.start && !this.stop && !this.reset) {\r\n                this.play = false;\r\n                this.pause = true;\r\n                this.end = false;\r\n                this.changePlayButtonBKG();\r\n            }\r\n        };\r\n        this.setReset = async () => {\r\n            if (this.reset)\r\n                return;\r\n            this.reset = true;\r\n            setTimeout(function () {\r\n                aniControl.reset = false;\r\n            }, 200);\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.setEnd = () => {\r\n            this.start = true;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.end = true;\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.isAni1 = () => {\r\n            return this.animationType == AnimationsTyp.Typ1;\r\n        };\r\n        this.isAni2 = () => {\r\n            return this.animationType == AnimationsTyp.Typ2;\r\n        };\r\n        this.isAni3 = () => {\r\n            return this.animationType == AnimationsTyp.Typ3;\r\n        };\r\n        this.changePlayButtonBKG = () => {\r\n            let elem = getHtmlElement("play");\r\n            if (this.end || this.pause || this.reset || this.stop) {\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n                this.removeSmoothScroll();\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n                inputText.classList.remove("scrollDisabled");\r\n                outputText.classList.remove("scrollDisabled");\r\n                descriptionLines.classList.remove("scrollDisabled");\r\n                symbolTableLines.classList.remove("scrollDisabled");\r\n                descriptionLines.classList.add("scrollSmooth");\r\n                elem.classList.remove("pausedBKG");\r\n                elem.classList.add("playingBKG");\r\n                return;\r\n            }\r\n            else if (this.play) {\r\n                setTranslatingDivVisible();\r\n                setCurrentLineHidden();\r\n                inputText.classList.add("scrollDisabled");\r\n                outputText.classList.add("scrollDisabled");\r\n                descriptionLines.classList.add("scrollDisabled");\r\n                symbolTableLines.classList.add("scrollDisabled");\r\n                if (this.speed < 3 && this.animationType != AnimationsTyp.Typ3) {\r\n                    inputText.classList.add("scrollSmooth");\r\n                    outputText.classList.add("scrollSmooth");\r\n                    descriptionLines.classList.add("scrollSmooth");\r\n                }\r\n                if (this.isAni3())\r\n                    descriptionLines.classList.remove("scrollSmooth");\r\n                elem.classList.add("pausedBKG");\r\n                elem.classList.remove("playingBKG");\r\n                return;\r\n            }\r\n        };\r\n        this.setSpeed = (n) => {\r\n            this.speed = n;\r\n            this.baseFrameTime = 1000 - this.speed * 220;\r\n            if (!this.loaded)\r\n                return;\r\n            this.setSmoothIfNecessery();\r\n            if (n >= 3) {\r\n                setTranslatingDivVisible();\r\n                setCurrentLineHidden();\r\n            }\r\n            else {\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n            }\r\n            if (n != 4) {\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n            }\r\n        };\r\n        this.createEventListeners = () => {\r\n            this.setAnimationTyp1();\r\n            createClickListener("animationsTyp1", this.setAnimationTyp1);\r\n            createClickListener("animationsTyp2", this.setAnimationTyp2);\r\n            createClickListener("animationsTyp3", this.setAnimationTyp3);\r\n            createClickListener("speedDecrease", this.decreaseSpeed);\r\n            createClickListener("speedIncrease", this.increaseSpeed);\r\n            createClickListener("singleStep", this.setSinglestep);\r\n            try {\r\n                speedSlider.addEventListener("change", () => {\r\n                    this.setSpeed(speedSlider.valueAsNumber);\r\n                });\r\n                speedSlider.addEventListener("input", () => {\r\n                    this.setSpeed(speedSlider.valueAsNumber);\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        this.start = false;\r\n        this.play = false;\r\n        this.pause = false;\r\n        this.stop = false;\r\n        this.reset = false;\r\n        this.singleStepFlag = false;\r\n        this.end = false;\r\n        this.loaded = false;\r\n        this.speed = 1;\r\n        this.baseFrameTime = 800;\r\n        this.setSpeed(speedSlider.valueAsNumber);\r\n        this.frames = 60;\r\n    }\r\n    setLoaded(b) {\r\n        this.loaded = b;\r\n    }\r\n    setSmoothIfNecessery() {\r\n        if (this.play && this.animationType != AnimationsTyp.Typ3 && this.speed < 3) {\r\n            inputText.classList.add("scrollSmooth");\r\n            outputText.classList.add("scrollSmooth");\r\n        }\r\n    }\r\n    removeSmoothScroll() {\r\n        inputText.classList.remove("scrollSmooth");\r\n        outputText.classList.remove("scrollSmooth");\r\n    }\r\n}\r\nconst aniControl = new AnimationControl();\r\n\n;// CONCATENATED MODULE: ./src/InputWindow.ts\n\r\n\r\n\r\nconst errorDescriptionDiv = getHtmlElement(\'ErrorDescription\');\r\nconst inputWindowContainer = getHtmlElement(\'InputWindowContainter\');\r\nconst inputSelect = getHtmlElement("bsppSelect");\r\nclass InputWindow {\r\n    constructor(p) {\r\n        this.previousP = "0";\r\n        this.inputcontrol = InputLineControl.getInstance();\r\n        this.translate = () => {\r\n            try {\r\n                let s = this.InputTextAreaElement.value.split("\\n");\r\n                if (!(s.length < 1)) {\r\n                    this.pWindow.refreshInputStrings(s);\r\n                    this.inputcontrol.addInputLines(s);\r\n                }\r\n                else {\r\n                    throw new Error(\'No InputLines!\');\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.addLinetoTextArea = (s) => {\r\n            this.InputTextAreaElement.value = "";\r\n            s.forEach(e => {\r\n                this.InputTextAreaElement.value += e + "\\n";\r\n            });\r\n        };\r\n        this.translateAndGo = async () => {\r\n            await this.translate();\r\n            await this.pushInputLines();\r\n            await this.openEditWindow();\r\n        };\r\n        this.pushInputLines = async () => {\r\n            if (this.pWindow) {\r\n                await this.pWindow.reset();\r\n                await this.pWindow.refreshInputLines();\r\n                await this.pWindow.displayInputLines();\r\n            }\r\n        };\r\n        this.switchInputContent = () => {\r\n            let s = inputSelect.value;\r\n            if (s == "0") {\r\n                bsp0 = this.InputTextAreaElement.value.split("\\n");\r\n            }\r\n            console.log(bsp0);\r\n            console.log(s);\r\n            this.previousP = s;\r\n            // this.addLinetoTextArea()\r\n        };\r\n        /* private getBsp=(s:string):string[]=>{\r\n            Object.keys\r\n        } */\r\n        this.openEditWindow = () => {\r\n            try {\r\n                aniControl.setPaused();\r\n                let b = window.getComputedStyle(inputWindowContainer);\r\n                if (b.getPropertyValue(\'visibility\') == "hidden") {\r\n                    inputWindowContainer.style.visibility = "visible";\r\n                }\r\n                else {\r\n                    inputWindowContainer.style.visibility = "hidden";\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.createEventListeners = () => {\r\n            try {\r\n                const a = document.getElementById(\'EditWindowOpenButton\');\r\n                if (a != null) {\r\n                    a.addEventListener("click", this.openEditWindow);\r\n                }\r\n                else\r\n                    throw new Error("Element #EditWindowOpenButton is null!");\r\n                const c = document.getElementById(\'Submit\');\r\n                if (c != null) {\r\n                    c.addEventListener("click", this.translateAndGo);\r\n                }\r\n                else\r\n                    throw new Error("Element #Submit is null!");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n            // createClickListener(\'Preview\',this.previewTranslation);\r\n            createClickListener(\'GenerateDummy\', this.generateDummy);\r\n            createClickListener(\'CloseInputWindow\', this.openEditWindow);\r\n            inputSelect.addEventListener("change", this.switchInputContent);\r\n        };\r\n        this.generateDummy = () => {\r\n            this.addLinetoTextArea(bsp1);\r\n        };\r\n        this.InputTextAreaElement = getHtmlElement(\'InputTextArea\');\r\n        this.pWindow = p;\r\n    }\r\n}\r\nlet bsp0 = [];\r\nconst bsp1 = [\r\n    "Label1:Mov A,95h", "Mov B,95h", "Mov C,95h", "Mov IX,1295h", "Mov HL,1095h", "Mov SP,2395h", "Mov A,B",\r\n    "Mov A,C", "Mov B,A", "Mov B,C", "Mov C,A", "Mov C,B", "Mov A,Label1", "Mov HL,Label1", "Mov IX,Label1",\r\n    "Mov Label1,A", "Mov Label1,HL", "Mov Label1,IX", "MOV A,[HL]", "MOV [HL],A", "PUSH", "POP", "IN A, 67h",\r\n    "OUT 46, A", "INC A", "DEC A", "ADD A", "SUB A", "AND A", "OR A", "XOR A", "SHL", "SHR", "RCL", "ROL", "RCR",\r\n    "ROR", "CP A", "JP Label1", "CALL Label1", "RET", "HALT", "NOP", "DB 45h", "DW 45h", "RS 3", "ORG 2323h",\r\n    "const1 EQU 3434h",\r\n];\r\nconst bsp2 = (/* unused pure expression or super */ null && ([\r\n    "Label1:Mov A,95h", "Mov B,95h", "Mov C,95h", "Mov IX,1295h", "Mov HL,1095h", "Mov SP,2395h", "Mov A,B",\r\n    "Mov A,C", "Mov B,A", "Mov B,C", "Mov C,A", "Mov C,B", "Mov A,Label1", "Mov HL,Label1", "Mov IX,Label1",\r\n    "Mov Label1,A", "Mov Label1,HL", "Mov Label1,IX", "MOV A,[HL]", "MOV [HL],A", "PUSH", "POP", "IN A, 67h",\r\n    "OUT 46, A", "INC A", "DEC A", "ADD A", "SUB A", "AND A", "OR A", "XOR A", "SHL", "SHR", "RCL", "ROL", "RCR",\r\n    "ROR", "CP A", "JP Label1", "CALL Label1", "RET", "HALT", "NOP", "DB 45h", "DW 45h", "RS 3", "ORG 2323h",\r\n    "const1 EQU 3434h",\r\n]));\r\n\n;// CONCATENATED MODULE: ./src/Animator.ts\n\r\n\r\n\r\n\r\n\r\nconst arrowHeadID = "arrowHead";\r\nconst arrowVerticalID = "arrowVertical";\r\nconst arrowJointID = "arrowJoint";\r\nconst arrowHorizontalID = "arrowHorizontal";\r\nconst arrowUp_DownCN = "arrowUP_Down";\r\nconst arrowLeft_RightCN = "arrowLeft_Right";\r\nconst arrowHorizontalID2 = "arrowHorizontal2";\r\nconst arrowJointID2 = "arrowJoint2";\r\nconst UP = "up";\r\nconst DOWN = "down";\r\nconst LEFT = "left";\r\nconst RIGHT = "right";\r\nconst JQ1 = "jq1";\r\nconst JQ2 = "jq2";\r\nconst JQ3 = "jq3";\r\nconst JQ4 = "jq4";\r\nconst addressbyte = "addressbyte";\r\nconst overlapdivider = 50;\r\nconst aniTp2TimeAdjuster = 8;\r\nconst bodyElem = getHtmlElement("body");\r\nclass Animator {\r\n    constructor() {\r\n        this.frameSleepTime = 10;\r\n        this.arrowElems = [];\r\n        this.targetElemTop = 0;\r\n        this.targetElemLeft = 0;\r\n        this.turnSleepTime = 1000;\r\n        this.createMovable = () => {\r\n            let newElem;\r\n            newElem = document.createElement("div");\r\n            newElem.id = "Movable";\r\n            newElem.style.top = `${0}`;\r\n            newElem.style.left = `${0}`;\r\n            // newElem.style.width=`${50}px`;\r\n            // newElem.style.height=`${50}px`;\r\n            newElem.classList.add("testElemStyle");\r\n            newElem.style.visibility = "hidden";\r\n            newElem.style.zIndex = "3";\r\n            getHtmlElement("body").appendChild(newElem);\r\n            return newElem;\r\n        };\r\n        this.createMovableHelper = () => {\r\n            let newElem;\r\n            newElem = document.createElement("div");\r\n            newElem.id = "MovableHelper";\r\n            newElem.style.top = `${0}`;\r\n            newElem.style.left = `${0}`;\r\n            // newElem.style.width=`${50}px`;\r\n            // newElem.style.height=`${50}px`;\r\n            newElem.classList.add("testElemStyle");\r\n            newElem.style.visibility = "hidden";\r\n            newElem.style.zIndex = "3";\r\n            getHtmlElement("body").appendChild(newElem);\r\n            return newElem;\r\n        };\r\n        this.movingElementFlag = false;\r\n        this.movableElem = this.createMovable();\r\n        this.movableHelper = this.createMovableHelper();\r\n        this.inputText = getHtmlElement("InputText");\r\n        this.currentLineElem = getHtmlElement("currentLine");\r\n        this.descriptionLineElem = getHtmlElement("descriptionLines");\r\n        this.vorgangElem = getHtmlElement("Description");\r\n        this.symbolTableElem = getHtmlElement("symbolTableLines");\r\n        this.symbolTableBox = getHtmlElement("SymbolTable");\r\n        this.outPutLinesElem = getHtmlElement("OutputLines");\r\n        this.descriptionTableBox = getHtmlElement("descriptionSymboltableBox");\r\n        this.outPutText = getHtmlElement("OutputText");\r\n        this.addresszaehlerElem = getHtmlElement("Addresszahler");\r\n        this.translatedinfoDividerDiv = getHtmlElement("translatedinfoDividerDiv");\r\n    }\r\n    reset() {\r\n        this.movingElementFlag = false;\r\n        this.turnMovableHidden();\r\n        this.turnMovableHelperHidden();\r\n        this.turnArrowElemsHidden();\r\n        this.frameSleepTime = 10;\r\n        this.turnSleepTime = 1000;\r\n    }\r\n    async moveConstToSymbolTable(line) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let targetElem = getHtmlElement(targetSymbolTableLine);\r\n        this.movableElem.innerHTML = this.formatLineString("h4", line);\r\n        this.targetElemLeft = this.descriptionLineElem.offsetLeft;\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight), this.targetElemLeft);\r\n        let n = updateScrollOfSymbolTable(targetSymbolTableLine);\r\n        this.targetElemTop = targetElem.offsetTop - n + targetElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableHelper.innerHTML = this.formatLineString("h4", line);\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + arrowHead.offsetTop - this.movableElem.offsetTop - this.movableElem.offsetHeight + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    getStaticBodyWidth() {\r\n        // console.log("Arrowbody width: "+rootVariables.getPropertyValue("--arrowBodyW"));\r\n        // console.log("Arrowhead width: "+rootVariables.getPropertyValue("--arrowHeadlrW"));\r\n        // console.log("Arrowhead height: "+rootVariables.getPropertyValue(\'--arrowHeadlrH\'));\r\n        let s = Number(rootVariables.getPropertyValue("--arrowBodyW").replace("px", ""));\r\n        // console.log(s);\r\n        return s;\r\n    }\r\n    async moveLabeltoSymboltableALTMoveableHelper(hex) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        this.movableHelper.style.top = this.addresszaehlerElem.offsetTop + "px";\r\n        this.movableHelper.style.left = this.addresszaehlerElem.offsetLeft + "px";\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", hex);\r\n        let placeholder = document.getElementById(targetlabelValuePlaceholder);\r\n        if (placeholder == null) {\r\n            throw new Error("BRUV");\r\n        }\r\n        let n = updateScrollOfSymbolTable(targetlabelValuePlaceholder);\r\n        this.targetElemTop = placeholder.offsetTop - n + placeholder.offsetHeight * 1 / 2 - this.movableHelper.offsetHeight * 1 / 2;\r\n        this.targetElemLeft = placeholder.offsetLeft;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableHelperVisible();\r\n            await sleepStopStartTime();\r\n            while (placeholder.offsetLeft > this.movableHelper.offsetLeft) {\r\n                await this.moveHelperSleepCheck(0, this.getPixeljump());\r\n            }\r\n            this.movableHelper.style.left = placeholder.offsetLeft + "px";\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableHelper.offsetTop) {\r\n                await this.moveHelperSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHelperHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableElem.innerHTML = this.formatLineString("h3", hex);\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n            let arrowJoint = this.getArrowElem(arrowJointID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.setClassOfJoint(1, JQ1);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = (this.movableElem.offsetTop - arrowHead.offsetHeight) + "px";\r\n            arrowHead.style.left = (this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowHead.offsetWidth / 2) + "px";\r\n            arrowVertical.style.left = (arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2) + "px";\r\n            arrowHorizontal.style.top = (this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2) + "px";\r\n            arrowJoint.style.top = (arrowHorizontal.offsetTop) + "px";\r\n            arrowJoint.style.left = (arrowVertical.offsetLeft) + "px";\r\n            arrowHorizontal.style.width = (this.movableHelper.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider - this.movableHelper.offsetLeft + arrowJoint.offsetLeft - this.movableHelper.offsetWidth) + "px";\r\n            arrowHorizontal.style.left = (this.movableHelper.offsetLeft + this.movableHelper.offsetWidth - this.movableHelper.offsetWidth / overlapdivider) + "px";\r\n            arrowVertical.style.height = (arrowJoint.offsetHeight / overlapdivider + arrowHead.offsetHeight / overlapdivider + arrowHead.offsetTop - arrowJoint.offsetTop) + "px";\r\n            arrowVertical.style.top = (arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider) + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async moveLabeltoSymboltableALTMoveable(line) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let targetElem = getHtmlElement(targetSymbolTableLine);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight), this.descriptionLineElem.offsetLeft);\r\n        let n = updateScrollOfSymbolTable(targetSymbolTableLine);\r\n        this.targetElemTop = targetElem.offsetTop - n + targetElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + arrowHead.offsetTop - this.movableElem.offsetTop - this.movableElem.offsetHeight + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async exchangeLabelWithSymbolTable(toLine, returnLine, id) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let targetElem = getHtmlElement(`symbol${id}`);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", toLine);\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.movableElem.offsetHeight), this.descriptionLineElem.offsetLeft);\r\n        if (targetElem != null) {\r\n            let n = updateScrollOfSymbolTable(targetElem.id);\r\n            this.targetElemTop = targetElem.offsetTop - (n > 0 ? n : 0) + targetElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2;\r\n        }\r\n        else {\r\n            this.targetElemTop = this.symbolTableElem.offsetTop;\r\n        }\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            if (id < 0) {\r\n                this.turnMovableHidden();\r\n                return;\r\n            }\r\n            // await sleepStopStartTime();\r\n            // this.movableElem.innerHTML=`<h3 class="moveableText">${returnLine}</h3>`;\r\n            this.movableElem.innerHTML = this.formatLineString("h3", returnLine);\r\n            this.targetElemTop = this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight;\r\n            while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableHelper.innerHTML = this.formatLineString("h3", toLine);\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + arrowHead.offsetTop - this.movableElem.offsetTop - this.movableElem.offsetHeight + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            if (id < 0) {\r\n                return;\r\n            }\r\n            this.movableHelper.innerHTML = this.formatLineString("h3", returnLine);\r\n            this.movableElem.innerHTML = this.formatLineString("h3", returnLine);\r\n            await sleepStopStartTime();\r\n            this.setClassOfHead(UP);\r\n            arrowHead.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = arrowHead.offsetTop + arrowHead.offsetHeight - arrowHead.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableHelper.offsetHeight / overlapdivider - arrowHead.offsetTop - arrowHead.offsetHeight + this.movableHelper.offsetTop + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async searchEntryInSymboltablephaseOne(idToSearch, entryName, idToFind) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let isSuccessful = false;\r\n        let fromElem = document.getElementById(idToSearch);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", entryName);\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        this.setClassOfHead(DOWN);\r\n        this.setClassOfJoint(1, JQ2);\r\n        this.toggleToUp(true);\r\n        //setup parameters\r\n        let toElem;\r\n        toElem = this.symbolTableElem.firstChild;\r\n        let n = updateScrollOfSymbolTable(toElem.id);\r\n        arrowHead.style.top = toElem.offsetTop - (n > 0 ? n : 0) - arrowHead.offsetHeight + "px";\r\n        if (fromElem != null) {\r\n            this.movableElem.style.left = fromElem.offsetLeft + fromElem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n            this.movableElem.style.top = fromElem.offsetTop - this.descriptionLineElem.scrollTop + fromElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.descriptionTableBox.offsetLeft + this.descriptionTableBox.offsetWidth / 100 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowJoint.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.width = this.movableElem.offsetLeft - arrowJoint.offsetLeft + arrowJoint.offsetWidth / overlapdivider + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowJoint.offsetLeft + arrowJoint.offsetWidth - arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowHead.offsetTop - arrowJoint.offsetTop + arrowHead.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider + "px";\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        }\r\n        else {\r\n            this.movableElem.style.left = this.descriptionTableBox.offsetLeft + "px";\r\n            this.movableElem.style.top = this.descriptionTableBox.offsetTop + this.descriptionTableBox.offsetHeight - this.movableElem.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowHead.offsetTop - this.movableElem.offsetTop + arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + "px";\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n        }\r\n        this.turnMovableVisible();\r\n        // this.turnMovableHelperVisible();\r\n        // await sleepStaticAnimation();\r\n        if (idToFind >= 0 && this.symbolTableElem.childElementCount - 2 >= idToFind) {\r\n            isSuccessful = true;\r\n        }\r\n        else {\r\n            idToFind = this.symbolTableElem.childElementCount > 1 ? this.symbolTableElem.childElementCount - 2 : 0;\r\n        }\r\n        for (let i = 0; i <= idToFind; i++) {\r\n            if (i == 0) {\r\n                await sleepStaticAnimationHalf();\r\n                continue;\r\n            }\r\n            if (this.symbolTableElem.childElementCount == i) {\r\n                //probably wont happen but just to make sure\r\n                break;\r\n            }\r\n            toElem = this.symbolTableElem.children[i];\r\n            n = updateScrollOfSymbolTable(toElem.id);\r\n            //ArrowSetup\r\n            arrowHead.style.top = toElem.offsetTop - (n > 0 ? n : 0) - arrowHead.offsetHeight + "px";\r\n            if (fromElem != null) {\r\n                arrowVertical.style.height = arrowHead.offsetTop - arrowJoint.offsetTop + arrowHead.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider + "px";\r\n            }\r\n            else {\r\n                arrowVertical.style.height = arrowHead.offsetTop - this.movableElem.offsetTop + arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + "px";\r\n            }\r\n            // arrowVertical.style.height=arrowVertical.offsetHeight+toElem.offsetHeight+"px";\r\n            //wait for a step\r\n            await sleepStaticAnimationHalf();\r\n            //next turn\r\n        }\r\n        //set everything invisible\r\n        await this.turnArrowElemsHidden();\r\n        // await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async searchEntryInSymboltablephaseTwo(fromId, valueToReturn) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let fromElem = getHtmlElement(symboladdress + (fromId));\r\n        ;\r\n        let toElem = getHtmlElement(p2LabelValuePlaceholder);\r\n        if (toElem == null) {\r\n            throw new Error("placeholder-div was not found");\r\n        }\r\n        //setup return value\r\n        this.movableElem.innerHTML = this.formatLineString("h3", valueToReturn);\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", valueToReturn);\r\n        let n = updateScrollOfSymbolTable(fromElem.id);\r\n        this.movableElem.style.left = fromElem.offsetLeft + fromElem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n        this.movableElem.style.top = fromElem.offsetTop - (n > 0 ? n : 0) + fromElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2 + "px";\r\n        this.movableHelper.style.top = toElem.offsetTop - this.descriptionLineElem.scrollTop + toElem.offsetHeight / 2 - this.movableHelper.offsetHeight / 2 + "px";\r\n        this.movableHelper.style.left = toElem.offsetLeft + toElem.offsetWidth / 2 - this.movableHelper.offsetWidth / 2 + "px";\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft < this.movableHelper.offsetLeft) {\r\n                await this.moveSleepCheck(0, this.getPixeljump());\r\n            }\r\n            this.movableElem.style.left = this.movableHelper.offsetLeft + "px";\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetTop > this.movableHelper.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.movableHelper.offsetTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n            let arrowJoint = this.getArrowElem(arrowJointID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(UP);\r\n            this.setClassOfJoint(1, JQ4);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = arrowHead.offsetTop + arrowHead.offsetHeight - arrowHead.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowHorizontal.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n            arrowHorizontal.style.width = -this.movableElem.offsetLeft + arrowJoint.offsetLeft + arrowJoint.offsetWidth / overlapdivider + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.height = -arrowHead.offsetTop + arrowJoint.offsetTop + arrowHead.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowHorizontalID, arrowJointID]);\r\n            this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n    }\r\n    async pushAufzulosendestoCurrentLine(i, line) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let childelem = getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP`);\r\n        let n = updateScrollOfIn_Out(this.outPutText.id, childelem.id);\r\n        // console.log(n);\r\n        await this.setMovableParameters(childelem.offsetTop - n, this.outPutText.offsetLeft);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        this.targetElemTop = this.currentLineElem.offsetTop + this.currentLineElem.offsetHeight - this.movableElem.offsetHeight;\r\n        this.targetElemLeft = this.currentLineElem.offsetLeft;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            if (this.targetElemTop > this.movableElem.offsetTop) {\r\n                while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n            }\r\n            else {\r\n                while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            await sleepStopStartTime();\r\n            while (this.targetElemLeft < this.movableElem.offsetLeft) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n        this.movableHelper.style.top = this.targetElemTop + "px";\r\n        this.movableHelper.style.left = this.targetElemLeft + "px";\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        this.setClassOfHead(LEFT);\r\n        this.setClassOfJoint(1, JQ1);\r\n        this.toggleToUp(false);\r\n        arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n        arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth + "px";\r\n        arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n        if (this.movableHelper.offsetTop + 2 * this.movableHelper.offsetHeight > this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 < this.movableElem.offsetTop) {\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ3);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft - arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft + arrowHorizontal.offsetWidth - arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = arrowJoint2.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth - arrowJoint2.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = -arrowJoint2.offsetLeft - arrowJoint2.offsetWidth / overlapdivider\r\n                + this.movableElem.offsetLeft - arrowJoint2.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        arrowVertical.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n        arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n        arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n        arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider - arrowHead.offsetLeft - arrowHead.offsetWidth + arrowJoint.offsetLeft + "px";\r\n        arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth - arrowHead.offsetWidth / overlapdivider + "px";\r\n        arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + this.movableElem.offsetTop - arrowJoint.offsetTop + "px";\r\n        arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n        this.turnMovableVisible();\r\n        this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        await this.turnMovableHelperVisible();\r\n        await sleepStaticAnimation();\r\n        await this.turnArrowElemsHidden();\r\n        await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async animationInputLineToCurrentLine(id, line) {\r\n        if (aniControl.isAni3()) {\r\n            return;\r\n        }\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        await this.setStartTopToInputLine(id);\r\n        this.targetElemTop = this.currentLineElem.offsetTop + this.currentLineElem.offsetHeight - this.movableElem.offsetHeight;\r\n        this.targetElemLeft = this.currentLineElem.offsetLeft;\r\n        this.turnMovableVisible();\r\n        if (aniControl.isAni1()) {\r\n            await sleepStopStartTime();\r\n            if (this.targetElemTop > this.movableElem.offsetTop) {\r\n                while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n            }\r\n            else {\r\n                while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            await sleepStopStartTime();\r\n            while (this.targetElemLeft > this.movableElem.offsetLeft) {\r\n                await this.moveSleepCheck(0, this.getPixeljump());\r\n            }\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n        this.movableHelper.style.top = this.targetElemTop + "px";\r\n        this.movableHelper.style.left = this.targetElemLeft + "px";\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        this.setClassOfHead(RIGHT);\r\n        this.setClassOfJoint(1, JQ2);\r\n        this.toggleToUp(false);\r\n        arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n        arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n        arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n        if (this.movableHelper.offsetTop + 2 * this.movableHelper.offsetHeight > this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 < this.movableElem.offsetTop) {\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ4);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft - arrowJoint.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = arrowJoint2.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth\r\n                - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth / overlapdivider\r\n                - this.movableElem.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        arrowVertical.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n        arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n        arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n        arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider + arrowHead.offsetLeft - arrowJoint.offsetLeft - arrowJoint.offsetWidth + "px";\r\n        arrowHorizontal.style.left = arrowJoint.offsetLeft + arrowJoint.offsetWidth - arrowJoint.offsetWidth / overlapdivider + "px";\r\n        arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + this.movableElem.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight + "px";\r\n        arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n        this.turnMovableVisible();\r\n        this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        await this.turnMovableHelperVisible();\r\n        await sleepStaticAnimation();\r\n        await this.turnArrowElemsHidden();\r\n        await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async moveDetailToSpeicherabbild(line, id) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        this.setMovableParameters(this.addresszaehlerElem.offsetTop, this.descriptionTableBox.offsetLeft);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        await this.setTargetTopToSpeicherabbild(id);\r\n        this.targetElemLeft = this.outPutText.offsetLeft;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            // await sleepStopStartTime();\r\n            while (this.targetElemLeft > this.movableElem.offsetLeft) {\r\n                await this.moveSleepCheck(0, this.getPixeljump());\r\n                // await this.adjustWidthOfMovable(this.getPixeljump(),this.outPutText.offsetWidth);\r\n            }\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            // this.movableElem.style.width=this.outPutText.offsetWidth+"px";\r\n            await sleepStopStartTime();\r\n            if (this.targetElemTop > this.movableElem.offsetTop) {\r\n                while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n            }\r\n            else {\r\n                while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n        this.movableHelper.style.top = this.targetElemTop + "px";\r\n        this.movableHelper.style.left = this.targetElemLeft + "px";\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        if (this.movableHelper.offsetTop + this.movableHelper.offsetHeight * 2 < this.movableElem.offsetTop) {\r\n            this.setClassOfHead(UP);\r\n            this.setClassOfJoint(1, JQ4);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n            arrowHorizontal.style.width = this.movableElem.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider + arrowJoint.offsetLeft - this.movableElem.offsetLeft - this.movableElem.offsetWidth + "px";\r\n            arrowHorizontal.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider - arrowHead.offsetTop - arrowHead.offsetHeight + arrowJoint.offsetTop + "px";\r\n            arrowVertical.style.top = arrowHead.offsetTop + arrowHead.offsetHeight - arrowHead.offsetHeight / overlapdivider + "px";\r\n        }\r\n        else if (this.movableHelper.offsetTop + 2 * this.movableHelper.offsetHeight > this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 4 <= this.movableElem.offsetTop) {\r\n            this.setClassOfJoint(1, JQ2);\r\n            this.setClassOfHead(RIGHT);\r\n            this.toggleToUp(false);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n            arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            console.log(arrowHorizontal2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ4);\r\n            console.log(arrowJoint2);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft - arrowJoint.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = arrowJoint2.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth\r\n                - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth / overlapdivider\r\n                - this.movableElem.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else if (this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 4 >= this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop <= this.movableElem.offsetTop) {\r\n            this.setClassOfHead(RIGHT);\r\n            this.toggleToUp(false);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n            arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowHorizontal.style.width = arrowHead.offsetLeft - this.movableElem.offsetLeft - this.movableElem.offsetWidth\r\n                + arrowHead.offsetWidth / overlapdivider + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowHorizontalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else if (this.movableHelper.offsetTop - 2 * this.movableHelper.offsetHeight < this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 4 > this.movableElem.offsetTop) {\r\n            this.setClassOfHead(RIGHT);\r\n            this.setClassOfJoint(1, JQ3);\r\n            this.toggleToUp(false);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n            arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ1);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft - arrowJoint.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = -arrowJoint2.offsetTop + arrowJoint.offsetTop - arrowJoint2.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint2.offsetTop + arrowJoint2.offsetHeight - arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth\r\n                - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth / overlapdivider\r\n                - this.movableElem.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.setClassOfHead(DOWN);\r\n            this.setClassOfJoint(1, JQ1);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n            arrowHorizontal.style.width = this.movableElem.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider - this.movableElem.offsetLeft + arrowJoint.offsetLeft - this.movableElem.offsetWidth + "px";\r\n            arrowHorizontal.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + arrowHead.offsetHeight / overlapdivider + arrowHead.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n        }\r\n        this.turnMovableVisible();\r\n        this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        await this.turnMovableHelperVisible();\r\n        await sleepStaticAnimation();\r\n        await this.turnArrowElemsHidden();\r\n        await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async displayAddresserhoehung(id, i, pre, hex) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        console.log(addressbyte + id);\r\n        let targetelem = document.getElementById(addressbyte + id);\r\n        this.movableElem.innerHTML = this.formatLineString("h1", pre + i);\r\n        let endaddr = Manipulator_Manipulator.isHex(i)\r\n            ? Manipulator_Manipulator.formatHextoDat16(String(Manipulator_Manipulator.hexToDec(hex) - Manipulator_Manipulator.hexToDec(i)))\r\n            : Manipulator_Manipulator.formatHextoDat16(String(Manipulator_Manipulator.hexToDec(hex) - Number(i))); // DecOrHex\r\n        // let endaddr:string = String(Manipulator.hexToDec(hex)-i); // DecOrHex\r\n        // console.log(endaddr);\r\n        if (targetelem != null) {\r\n            this.movableElem.style.top = targetelem.offsetTop - this.descriptionLineElem.scrollTop + targetelem.offsetHeight / 2 - this.movableElem.offsetHeight / 2 + "px";\r\n            this.movableElem.style.left = targetelem.offsetLeft + targetelem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n        }\r\n        else {\r\n            console.log("elem not found");\r\n            this.movableElem.style.top = this.descriptionTableBox.offsetTop + this.descriptionTableBox.offsetHeight - this.movableElem.offsetHeight + "px";\r\n            this.movableElem.style.left = this.descriptionTableBox.offsetLeft + this.descriptionTableBox.offsetWidth / 2 + "px";\r\n        }\r\n        this.targetElemLeft = this.addresszaehlerElem.offsetLeft + this.addresszaehlerElem.offsetWidth;\r\n        this.targetElemTop = this.translatedinfoDividerDiv.offsetTop;\r\n        if (aniControl.isAni1()) {\r\n            this.movableHelper.innerHTML = this.formatLineString("h1", endaddr);\r\n            this.movableHelper.style.left = this.addresszaehlerElem.offsetLeft + this.addresszaehlerElem.offsetWidth / 2 - this.movableHelper.offsetWidth / 2 + "px";\r\n            this.movableHelper.style.top = this.translatedinfoDividerDiv.offsetTop + "px";\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft > this.targetElemLeft) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetTop < this.targetElemTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            this.turnMovableHelperVisible();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft + this.movableElem.offsetWidth > this.movableHelper.offsetLeft + this.movableHelper.offsetWidth) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            this.turnMovableHidden();\r\n            this.movableHelper.innerHTML = this.formatLineString("h1", Manipulator_Manipulator.formatHextoDat16(hex));\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            this.turnMovableHelperHidden();\r\n            return;\r\n        }\r\n        else {\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n            let arrowJoint = this.getArrowElem(arrowJointID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.setClassOfJoint(1, JQ2);\r\n            this.toggleToUp(true);\r\n            this.movableHelper.innerHTML = this.formatLineString("h1", "+" + i);\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            arrowHead.style.top = (this.movableHelper.offsetTop - arrowHead.offsetHeight) + "px";\r\n            arrowHead.style.left = (this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2) + "px";\r\n            arrowVertical.style.left = (arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2) + "px";\r\n            arrowHorizontal.style.top = (this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2) + "px";\r\n            arrowJoint.style.top = (arrowHorizontal.offsetTop) + "px";\r\n            arrowJoint.style.left = (arrowVertical.offsetLeft) + "px";\r\n            arrowHorizontal.style.width = (this.movableElem.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider + this.movableElem.offsetLeft - arrowJoint.offsetLeft - arrowJoint.offsetWidth) + "px";\r\n            arrowHorizontal.style.left = (arrowJoint.offsetLeft + arrowJoint.offsetWidth - arrowJoint.offsetWidth / overlapdivider) + "px";\r\n            arrowVertical.style.height = (arrowJoint.offsetHeight / overlapdivider + arrowHead.offsetHeight / overlapdivider + arrowHead.offsetTop - arrowJoint.offsetTop) + "px";\r\n            arrowVertical.style.top = (arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider) + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHidden();\r\n            this.movableElem.innerHTML = this.formatLineString("h1", endaddr);\r\n            this.movableElem.style.left = this.addresszaehlerElem.offsetLeft + this.addresszaehlerElem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n            this.movableElem.style.top = this.translatedinfoDividerDiv.offsetTop + "px";\r\n            await this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft + this.movableElem.offsetWidth > this.movableHelper.offsetLeft + this.movableHelper.offsetWidth) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            this.turnMovableHelperHidden();\r\n            this.movableElem.innerHTML = this.formatLineString("h1", Manipulator_Manipulator.formatHextoDat16(hex));\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n    }\r\n    async moveSleepCheck(t, l) {\r\n        await this.updateMovingElement(t, l);\r\n        await sleepForFrame();\r\n        await checkIfPaused();\r\n    }\r\n    async moveHelperSleepCheck(t, l) {\r\n        await this.updateMovingHelperElement(t, l);\r\n        await sleepForFrame();\r\n        await checkIfPaused();\r\n    }\r\n    formatLineString(tag, line) {\r\n        if (line.length > 30) {\r\n            line = line.substring(0, 25);\r\n            return `<${tag} class="moveableText">${line}...</${tag}>`;\r\n        }\r\n        return `<${tag} class="moveableText">${line}</${tag}>`;\r\n    }\r\n    getArrowElem(s) {\r\n        for (let i = 0; i < this.arrowElems.length; i++) {\r\n            if (this.arrowElems[i].id === s) {\r\n                return this.arrowElems[i];\r\n            }\r\n        }\r\n        return this.createArrowBodyElem(s);\r\n    }\r\n    toggleToUp(b) {\r\n        let elem = this.getArrowElem(arrowHeadID);\r\n        if (b) {\r\n            elem.classList.add(arrowUp_DownCN);\r\n            elem.classList.remove(arrowLeft_RightCN);\r\n        }\r\n        else {\r\n            elem.classList.remove(arrowUp_DownCN);\r\n            elem.classList.add(arrowLeft_RightCN);\r\n        }\r\n    }\r\n    setMovableParameters(t, l) {\r\n        this.movableElem.style.top = t + "px";\r\n        this.movableElem.style.left = l + "px";\r\n        // this.movableElem.style.height=h+"px";\r\n        // this.movableElem.style.width=w+"px";\r\n    }\r\n    getPixeljump() {\r\n        return aniControl.speed + 1;\r\n    }\r\n    async adjustWidthOfMovable(n, w) {\r\n        if (this.movableElem.offsetWidth + n > w && this.movableElem.offsetWidth - n < w) {\r\n            this.movableElem.style.width = this.movableElem.offsetWidth + "px";\r\n        }\r\n        else if (this.movableElem.offsetWidth > w) {\r\n            this.movableElem.style.width = (this.movableElem.offsetWidth - n) + "px";\r\n        }\r\n        else {\r\n            this.movableElem.style.width = (this.movableElem.offsetWidth + n) + "px";\r\n        }\r\n    }\r\n    async adjustHeightOfMovable(n, h) {\r\n        if (this.movableElem.offsetHeight + n > h && this.movableElem.offsetHeight - n < h) {\r\n            this.movableElem.style.height = this.movableElem.offsetHeight + "px";\r\n        }\r\n        else if (this.movableElem.offsetHeight > h) {\r\n            this.movableElem.style.height = (this.movableElem.offsetHeight - n) + "px";\r\n        }\r\n        else {\r\n            this.movableElem.style.height = (this.movableElem.offsetHeight + n) + "px";\r\n        }\r\n    }\r\n    createArrowBodyElem(s) {\r\n        let newElem;\r\n        newElem = document.createElement("div");\r\n        newElem.id = s;\r\n        newElem.style.top = `${0}`;\r\n        newElem.style.left = `${0}`;\r\n        newElem.style.visibility = "hidden";\r\n        newElem.style.zIndex = "2";\r\n        switch (s) {\r\n            case arrowHeadID:\r\n                newElem.style.zIndex = "3";\r\n                newElem.classList.add("bgI_C_C");\r\n                break;\r\n            case arrowHorizontalID:\r\n            case arrowHorizontalID2:\r\n                newElem.classList.add("bgI_C_C", "horizontalBody");\r\n                break;\r\n            case arrowJointID:\r\n            case arrowJointID2:\r\n                newElem.classList.add("bgI_C_C", "jointBody");\r\n                break;\r\n            case arrowVerticalID:\r\n                newElem.classList.add("bgI_C_C", "verticalBody");\r\n                break;\r\n            default:\r\n                alert("someshit gone down");\r\n                break;\r\n        }\r\n        getHtmlElement("body").appendChild(newElem);\r\n        this.arrowElems.push(newElem);\r\n        return newElem;\r\n    }\r\n    setClassOfHead(s) {\r\n        let elem = this.getArrowElem(arrowHeadID);\r\n        switch (s) {\r\n            case UP:\r\n                elem.classList.add("arrowU");\r\n                elem.classList.remove("arrowD");\r\n                elem.classList.remove("arrowLeft");\r\n                elem.classList.remove("arrowRight");\r\n                break;\r\n            case DOWN:\r\n                elem.classList.remove("arrowU");\r\n                elem.classList.add("arrowD");\r\n                elem.classList.remove("arrowLeft");\r\n                elem.classList.remove("arrowRight");\r\n                break;\r\n            case LEFT:\r\n                elem.classList.remove("arrowU");\r\n                elem.classList.remove("arrowD");\r\n                elem.classList.add("arrowLeft");\r\n                elem.classList.remove("arrowRight");\r\n                break;\r\n            case RIGHT:\r\n                elem.classList.remove("arrowU");\r\n                elem.classList.remove("arrowD");\r\n                elem.classList.remove("arrowLeft");\r\n                elem.classList.add("arrowRight");\r\n                break;\r\n        }\r\n    }\r\n    setClassOfJoint(id, s) {\r\n        let elem = id == 1 ? this.getArrowElem(arrowJointID) : this.getArrowElem(arrowJointID2);\r\n        switch (s) {\r\n            case JQ1:\r\n                elem.classList.add("jointQ1");\r\n                elem.classList.remove("jointQ2");\r\n                elem.classList.remove("jointQ3");\r\n                elem.classList.remove("jointQ4");\r\n                break;\r\n            case JQ2:\r\n                elem.classList.remove("jointQ1");\r\n                elem.classList.add("jointQ2");\r\n                elem.classList.remove("jointQ3");\r\n                elem.classList.remove("jointQ4");\r\n                break;\r\n            case JQ3:\r\n                elem.classList.remove("jointQ1");\r\n                elem.classList.remove("jointQ2");\r\n                elem.classList.add("jointQ3");\r\n                elem.classList.remove("jointQ4");\r\n                break;\r\n            case JQ4:\r\n                elem.classList.remove("jointQ1");\r\n                elem.classList.remove("jointQ2");\r\n                elem.classList.remove("jointQ3");\r\n                elem.classList.add("jointQ4");\r\n                break;\r\n            default:\r\n                throw new Error("Error occured at JointSVG assigment");\r\n        }\r\n    }\r\n    async setStartTopToInputLine(id) {\r\n        let childElem = document.getElementById(`${(id + 1) < 10 ? "0" + (id + 1) : (id + 1)}inputP`);\r\n        if (childElem != null) {\r\n            let n = updateScrollOfIn_Out(this.outPutText.id, childElem.id);\r\n            console.log(n);\r\n            this.movableElem.style.top = childElem.offsetTop - n - 1 / 2 * this.movableElem.offsetHeight + 1 / 2 * childElem.offsetHeight + "px";\r\n            if (this.movableElem.offsetTop < this.inputText.offsetTop) {\r\n                this.movableElem.style.top = this.inputText.offsetTop + "px";\r\n            }\r\n            this.movableElem.style.left = childElem.offsetLeft + "px";\r\n        }\r\n    }\r\n    async setTargetTopToSpeicherabbild(id) {\r\n        let childElem = document.getElementById(`${(id + 1) < 10 ? "0" + (id + 1) : (id + 1)}outputP`);\r\n        if (childElem != null) {\r\n            let n = updateScrollOfIn_Out(this.outPutText.id, childElem.id);\r\n            console.log(n);\r\n            this.targetElemTop = childElem.offsetTop - n - 1 / 2 * this.movableElem.offsetHeight + 1 / 2 * childElem.offsetHeight;\r\n        }\r\n    }\r\n    async turnArrowElemVisible(s) {\r\n        this.arrowElems.forEach(e => {\r\n            if (s.includes(e.id)) {\r\n                e.style.visibility = "visible";\r\n            }\r\n        });\r\n    }\r\n    async turnArrowElemsHidden() {\r\n        this.arrowElems.forEach(e => {\r\n            if (e.id == arrowHorizontalID || e.id == arrowHorizontalID2) {\r\n                e.style.width = 0 + "px";\r\n            }\r\n            if (e.id == arrowVerticalID) {\r\n                e.style.height = 0 + "px";\r\n            }\r\n            e.style.visibility = "hidden";\r\n        });\r\n    }\r\n    async turnMovableHidden() {\r\n        this.movableElem.style.visibility = "hidden";\r\n    }\r\n    async turnMovableVisible() {\r\n        this.movableElem.style.visibility = "visible";\r\n    }\r\n    async turnMovableHelperHidden() {\r\n        this.movableHelper.style.visibility = "hidden";\r\n    }\r\n    async turnMovableHelperVisible() {\r\n        this.movableHelper.style.visibility = "visible";\r\n    }\r\n    async updateMovingElement(mTop, mLeft) {\r\n        this.movableElem.style.top = (this.movableElem.offsetTop + mTop) + "px";\r\n        this.movableElem.style.left = (this.movableElem.offsetLeft + mLeft) + "px";\r\n        /* this.movableElem.style.top = (100*this.movableElem.offsetTop/bodyElem.offsetHeight+mTop/5)+"%";\r\n        this.movableElem.style.left = (100*this.movableElem.offsetLeft/bodyElem.offsetWidth+mLeft/5)+"%"; */\r\n    }\r\n    async updateMovingHelperElement(mTop, mLeft) {\r\n        this.movableHelper.style.top = (this.movableHelper.offsetTop + mTop) + "px";\r\n        this.movableHelper.style.left = (this.movableHelper.offsetLeft + mLeft) + "px";\r\n        /* this.movableHelper.style.top = (100*this.movableHelper.offsetTop/bodyElem.offsetHeight+mTop/5)+"%";\r\n        this.movableHelper.style.left = (100*this.movableHelper.offsetLeft/bodyElem.offsetWidth+mLeft/5)+"%"; */\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ProjectWindow.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst descriptionLines = getHtmlElement(\'descriptionLines\');\r\nconst symbolTableLines = getHtmlElement(\'symbolTableLines\');\r\nconst currentLine = getHtmlElement(\'currentLine\');\r\nconst outputText = getHtmlElement(\'OutputText\');\r\nconst inputText = getHtmlElement(\'InputText\');\r\nconst addresszahler = getHtmlElement(\'Addresszahler\');\r\nconst machinenbefehl = getHtmlElement(\'Machinenbefehl\');\r\nconst outputwindowContainer = getHtmlElement(\'OutputWindowContainer\');\r\nconst OutputTextAreaElement = getHtmlElement(\'OutputTextArea\');\r\nconst InputID = getHtmlElement(\'InputID\');\r\nconst InputLines = getHtmlElement(\'InputLines\');\r\nconst OutputAddresses = getHtmlElement(\'OutputAddresses\');\r\nconst OutputLines = getHtmlElement(\'OutputLines\');\r\nconst currentLineLine = getHtmlElement("currentLineLine");\r\nconst windowOutputAddresses = getHtmlElement("OutputWindowAddresses");\r\nconst windowOutputLines = getHtmlElement("OutputWindowLines");\r\nconst OutputWindowMachineCode = getHtmlElement("OutputWindowMachineCode");\r\nconst targetSymbolTableLine = "bufferTargetSymbolTable";\r\nconst targetlabelValuePlaceholder = "labelValuePlaceholder";\r\nconst p2LabelValuePlaceholder = "p2LabelValuePlaceholder";\r\nlet skipped = false;\r\nconst searchEntryLabel = "searchEntryLabel";\r\nconst symboladdress = "symboladdress";\r\nconst translating = getHtmlElement("translatingContainer");\r\nconst translatingInfo = getHtmlElement("translatingInfo");\r\nconst setTranslatingDivHidden = () => {\r\n    translating.style.visibility = "hidden";\r\n};\r\nconst setTranslatingDivVisible = () => {\r\n    if (aniControl.isAni3() && aniControl.speed == 4 && aniControl.play && translating.getAttribute("displayable") == "true") {\r\n        // console.log("set");\r\n        translating.style.visibility = "visible";\r\n    }\r\n};\r\nclass ProjectWindow {\r\n    constructor() {\r\n        this.inputLineControl = InputLineControl.getInstance();\r\n        this.symbolList = SymbolList.getInstance();\r\n        this.iWindow = new InputWindow(this);\r\n        this.linkerAuflosungB = false;\r\n        this.nextParseID = 0;\r\n        this.inputLines = [];\r\n        this.inputstrings = [];\r\n        this.symbols = [];\r\n        this.partialReset = async () => {\r\n            this.inputLines = [];\r\n            await this.clearMachinenbefehlandCurrentLine();\r\n            symbolTableLines.innerHTML = `<h4 id="${targetSymbolTableLine}"> &nbsp; </h4>`;\r\n            descriptionLines.innerHTML = "";\r\n            addresszahler.innerHTML = "0000h";\r\n            translating.setAttribute("displayable", "true");\r\n            this.nextParseID = 0;\r\n            OutputAddresses.innerHTML = "";\r\n            OutputLines.innerHTML = "";\r\n            OutputTextAreaElement.innerHTML = "";\r\n            windowOutputAddresses.innerHTML = "";\r\n            windowOutputLines.innerHTML = "";\r\n            await this.inputLineControl.reset();\r\n            await this.anim.reset();\r\n            await aniControl.resetFlags();\r\n            getHtmlElement("InputText").scrollTop = 0;\r\n        };\r\n        this.refreshInputListItems = () => {\r\n            InputID.innerHTML = "";\r\n            InputLines.innerHTML = "";\r\n            OutputAddresses.innerHTML = "";\r\n            OutputLines.innerHTML = "";\r\n            let ss = [];\r\n            let e;\r\n            for (let i = 0; i < this.inputstrings.length; i++) {\r\n                e = this.inputLines[i];\r\n                if (e != null) {\r\n                    if (e.getType() == InputLineType.EMPTY) {\r\n                        InputID.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputLineId" class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                        InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP" class="overflowElipsis">${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}</p>`;\r\n                    }\r\n                    else {\r\n                        InputID.innerHTML += `<p  class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                        InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP" class="overflowElipsis">${Manipulator_Manipulator.formatLabelandBefehlDisplay(e.getLabel(), e.getFirstPart(), e.commandLinetoString(false))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}</p>`;\r\n                    }\r\n                    OutputAddresses.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}oAddress" class="gray">&nbsp;</p>`;\r\n                    OutputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP" class="overflowElipsis">&nbsp;</p>`;\r\n                }\r\n                else {\r\n                    InputID.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputLineId" class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                    InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP"  class="overflowElipsis">${this.inputstrings[i]}&nbsp;</p>`;\r\n                    OutputAddresses.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}oAddress" class="gray">&nbsp;</p>`;\r\n                    OutputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP" class="overflowElipsis">&nbsp;</p>`;\r\n                }\r\n            }\r\n            // console.log("items refreshed");\r\n        };\r\n        this.refreshInputListItem = (i) => {\r\n            if (i < this.inputLines.length) {\r\n                let e = this.inputLines[i];\r\n                let idString = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`;\r\n                let inputLineHTML = getHtmlElement(idString);\r\n                // console.log(inputLineHTML);\r\n                if (e.getType() == InputLineType.EMPTY) {\r\n                    inputLineHTML.innerHTML = `${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n                else if (e.getType() == InputLineType.PSEUDOTRANSLATED) {\r\n                    inputLineHTML.innerHTML = `${Manipulator_Manipulator.formatLabelDisplay(e.getLabel(), true)}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n                else {\r\n                    if (this.symbolList.isConst(e.getFirstPart())) {\r\n                        inputLineHTML.innerHTML = `${Manipulator_Manipulator.formatConstandBefehlDisplay(e.getFirstPart(), e.getSecondPart(), e.commandLinetoString(true))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                    }\r\n                    else\r\n                        inputLineHTML.innerHTML = `${Manipulator_Manipulator.formatLabelandBefehlDisplay(e.getLabel(), e.getFirstPart(), e.commandLinetoString(true))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n            }\r\n        };\r\n        this.repushSpeicherabbildOf = (i, b) => {\r\n            if (i < this.inputLines.length) {\r\n                let e = this.inputLines[i];\r\n                let idString = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP`;\r\n                let outputLineHTML = getHtmlElement(idString);\r\n                if (e.getType() == InputLineType.TRANSLATED) {\r\n                    // console.log(b);\r\n                    if (!b) {\r\n                        getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}oAddress`).innerHTML = `${Manipulator_Manipulator.formatHextoDat16(e.getStartingAddr()) + ":"}`;\r\n                    }\r\n                    if (e.getTranslation().includes("????")) {\r\n                        // outputLineHTML.innerHTML=`${this.inputLineControl.getDisplayableSpeicherabbild(e,false)}&nbsp;${this.getLabelIfUnknown(i,b)}`;\r\n                        outputLineHTML.innerHTML = `${Manipulator_Manipulator.formatSpeicherabbildandLabel(this.inputLineControl.getDisplayableSpeicherabbild(e, false), this.getLabelIfUnknown(i, b))}`;\r\n                    }\r\n                    else {\r\n                        outputLineHTML.innerHTML = `${this.inputLineControl.getDisplayableSpeicherabbild(e, true)}&nbsp;`;\r\n                    }\r\n                }\r\n                else {\r\n                    outputLineHTML.innerHTML = `&nbsp;`;\r\n                }\r\n            }\r\n        };\r\n        this.rePushSymbols = () => {\r\n            this.symbols = this.symbolList.getSequence();\r\n            let s;\r\n            let n, p;\r\n            let idString = "";\r\n            symbolTableLines.innerHTML = "";\r\n            if (this.symbols.length != 0) {\r\n                for (let i = 0; i < this.symbols.length; i++) {\r\n                    idString = `symbol${i}`;\r\n                    if (this.symbols[i] != null) {\r\n                        s = this.symbols[i];\r\n                        if (s instanceof Label) {\r\n                            n = s.getName();\r\n                            p = s.getPosition();\r\n                            symbolTableLines.innerHTML += `<h4 id="${idString}"><span class="gray">L:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = <span id="${symboladdress}${i}">${this.inputLineControl.fHD16(p)}</span> (${this.inputLineControl.getLittleEndianOf(p)})</h4>`;\r\n                        }\r\n                        if (s instanceof Constant) {\r\n                            n = s.getName();\r\n                            p = s.getValue();\r\n                            if (Manipulator_Manipulator.isDat_8(p)) {\r\n                                symbolTableLines.innerHTML += `<h4 id="${idString}"><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = <span id="${symboladdress}${i}">&nbsp;&nbsp;${this.inputLineControl.fHD8(p)}</span></h4>`;\r\n                            }\r\n                            else {\r\n                                symbolTableLines.innerHTML += `<h4 id="${idString}"><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = <span id="${symboladdress}${i}">${this.inputLineControl.fHD16(p)}</span></h4>`;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                symbolTableLines.innerHTML += `<h4 id="${targetSymbolTableLine}"> &nbsp;</h4>`;\r\n            }\r\n            updateScroll("symbolTableLines");\r\n        };\r\n        this.repushTranslations = async () => {\r\n            OutputTextAreaElement.innerHTML = "";\r\n            windowOutputLines.innerHTML = "";\r\n            windowOutputAddresses.innerHTML = "";\r\n            let i;\r\n            for (let j = 0; j <= this.inputLines.length; j++) {\r\n                i = this.inputLines[j];\r\n                if (i != undefined) {\r\n                    if (i.getType() != InputLineType.TRANSLATED) {\r\n                        continue;\r\n                    }\r\n                    if (i.getTranslation().includes("??")) {\r\n                        windowOutputLines.innerHTML += `<p class="overflowElipsis">\r\n                    ${Manipulator_Manipulator.formatSpeicherabbildandLabel(this.inputLineControl.getDisplayableSpeicherabbild(i, false), this.getLabelIfUnknown(i.getId(), false))}</p>`;\r\n                    }\r\n                    else {\r\n                        windowOutputLines.innerHTML += `<p class="overflowElipsis">\r\n                    ${this.inputLineControl.getDisplayableSpeicherabbild(i, true)}&nbsp;</p>`;\r\n                    }\r\n                    windowOutputAddresses.innerHTML += `<p class="gray">${i.getStartingAddr()}</p>`;\r\n                    OutputTextAreaElement.innerHTML += ":" + i.getTranslation() + "\\n";\r\n                }\r\n                else {\r\n                    windowOutputAddresses.innerHTML += `<p class="gray">&nbsp;</p>`;\r\n                    windowOutputLines.innerHTML += `<p class="overflowElipsis">&nbsp;</p>`;\r\n                    OutputTextAreaElement.innerHTML += ":00000001FF";\r\n                }\r\n            }\r\n        };\r\n        this.repushTranslationOf = async (i) => {\r\n            let e;\r\n            windowOutputAddresses.innerHTML = "";\r\n            windowOutputLines.innerHTML = "";\r\n            if (this.inputLines.length == this.inputstrings.length) {\r\n                e = this.inputLines[i];\r\n                if (i == this.inputLines.length - 1) {\r\n                    if (e.getType() == InputLineType.TRANSLATED) {\r\n                        OutputTextAreaElement.innerHTML += ":" + e.getTranslation() + "\\n";\r\n                    }\r\n                    OutputTextAreaElement.innerHTML += ":00000001FF";\r\n                }\r\n            }\r\n            if (i < this.inputLines.length) {\r\n                e = this.inputLines[i];\r\n                if (e.getType() == InputLineType.TRANSLATED) {\r\n                    OutputTextAreaElement.innerHTML += ":" + e.getTranslation() + "\\n";\r\n                }\r\n            }\r\n        };\r\n        this.linkerAuflosung = async () => {\r\n            this.repushTranslations();\r\n            if (this.linkerAuflosungB) {\r\n                await this.displaySecondPhase();\r\n                // this.toggleStop();\r\n                for (let i = 0; i < this.inputLines.length; i++) {\r\n                    await this.checkInputLine(this.inputLines[i]);\r\n                    await this.clearMachinenbefehlandCurrentLine();\r\n                }\r\n            }\r\n        };\r\n        this.displaySecondPhase = async () => {\r\n            let sleeptime = 400;\r\n            let newElem;\r\n            let lineBuffer = [];\r\n            let blockAnimation = this.checkForNoAniStep();\r\n            newElem = document.createElement("div");\r\n            newElem.id = "linkerTitelDiv";\r\n            newElem.classList.add("noMP");\r\n            if (!this.checkForSkip()) {\r\n                newElem.classList.add("hiddenDescriptionDiv");\r\n            }\r\n            descriptionLines.appendChild(newElem);\r\n            for (let i = 0; i < 7; i++) {\r\n                if (i < 2 || i > 4) {\r\n                    lineBuffer.push(`<p>&nbsp;&nbsp;&nbsp;</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                }\r\n                if (i == 2 || i == 4) {\r\n                    lineBuffer.push(`<p>************************</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>************************</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                }\r\n                if (i == 3) {\r\n                    lineBuffer.push(`<p>2.Phase LinkerAuflösung</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>2.Phase LinkerAuflösung</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                }\r\n            }\r\n            if (!blockAnimation) {\r\n                lineBuffer.forEach(e => {\r\n                    newElem.innerHTML += e;\r\n                });\r\n            }\r\n        };\r\n        this.checkInputLine = async (e) => {\r\n            let s = "";\r\n            let n = "";\r\n            let k;\r\n            if (e.getType() != InputLineType.TRANSLATED) {\r\n                return;\r\n            }\r\n            let newElem;\r\n            let lineBuffer = [];\r\n            let blockAnimation = this.checkForNoAniStep();\r\n            newElem = document.createElement("div");\r\n            newElem.id = `${e.getId()}LinkerDiv`;\r\n            newElem.classList.add("noMP");\r\n            if (!this.checkForSkip()) {\r\n                newElem.classList.add("hiddenDescriptionDiv");\r\n            }\r\n            descriptionLines.appendChild(newElem);\r\n            if (e.getTranslation().includes("????") || e.hasOffsetLabel()) {\r\n                k = this.symbolList.getLabels().find(i => {\r\n                    if (e.hasOffsetLabel()) {\r\n                        if (i.getName().toLowerCase() == e.getLabelOfOffset().toLowerCase()) {\r\n                            return i;\r\n                        }\r\n                    }\r\n                    if (i.getName().toLowerCase() == e.getSecondPart().toLowerCase() || i.getName().toLowerCase() == e.getThirdPart().toLowerCase()) {\r\n                        return i;\r\n                    }\r\n                });\r\n                // console.log(this.getLinkerAufloesungLine(e.getId()));\r\n                if (aniControl.singleStepFlag)\r\n                    await aniControl.setPaused();\r\n                if (blockAnimation)\r\n                    await checkIfPaused();\r\n                await updateScrollOfIn_Out("OutputText", `${(e.getId() + 1) < 10 ? "0" + (e.getId() + 1) : (e.getId() + 1)}outputP`);\r\n                if (blockAnimation) {\r\n                    await this.anim.pushAufzulosendestoCurrentLine(e.getId(), this.getLinkerAufloesungLine(e.getId(), false));\r\n                }\r\n                currentLineLine.innerHTML = `${e.getStartingAddr()}: ${this.inputLineControl.getDisplayableSpeicherabbild(e, false)} <span>${this.getLabelIfUnknown(e.getId(), false)}</span>`;\r\n                addresszahler.innerHTML = `${e.getStartingAddr()}`;\r\n                machinenbefehl.innerHTML = `${this.inputLineControl.getDisplayableSpeicherabbild(e, false)}`;\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                //  id="${e.getId()}LD+${}\r\n                lineBuffer.push(`<p>Suche Label \'<span id="${searchEntryLabel}${e.getId()}" class="labelBlue">${k.getName()}</span>\' in SymbolTabelle</p>`);\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                    newElem.innerHTML += `<p>Suche Label \'<span id="${searchEntryLabel}${e.getId()}" class="labelBlue">${k.getName()}</span>\' in SymbolTabelle</p>`;\r\n                    updateScroll(descriptionLines.id);\r\n                }\r\n                currentLineLine.innerHTML = `${e.getStartingAddr()}: ${this.inputLineControl.getDisplayableSpeicherabbild(e, false)} <span class="crInvert">${this.getLabelIfUnknown(e.getId(), false)}</span>`;\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                if (k.getPosition() == "????") {\r\n                    if (blockAnimation) {\r\n                        await this.anim.searchEntryInSymboltablephaseOne(`${searchEntryLabel}${e.getId()}`, k.getName(), this.symbols.indexOf(k));\r\n                    }\r\n                    currentLineLine.innerHTML = `${e.getStartingAddr()}: ${this.inputLineControl.getDisplayableSpeicherabbild(e, false)} <span class="crInvert bkError">${this.getLabelIfUnknown(e.getId(), false)}</span>`;\r\n                    lineBuffer.push(`<p><span class="errorRed eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' konnte nicht aufgelöst werden!</span></p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p><span class="errorRed eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' konnte nicht aufgelöst werden!</span></p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    if (!blockAnimation) {\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                    }\r\n                    await sleepFor(10);\r\n                    aniControl.setStop();\r\n                    throw Error(\'Stop pressed\');\r\n                }\r\n                else {\r\n                    s = this.inputLineControl.getDisplayableSpeicherabbild(e, false);\r\n                    this.inputLineControl.retranslate(e);\r\n                    n = this.inputLineControl.getDisplayableSpeicherabbild(e, true);\r\n                    /* if(blockAnimation){\r\n                        await this.anim.exchangeLabelWithSymbolTable("Label \'"+k.getName()+"\'?","Label \'"+k.getName()+"\' = "+Manipulator.hexToDec(k.getPosition()!)+" ("+k.getPosition()!+")",this.symbols.indexOf(k));\r\n                    } */\r\n                    if (blockAnimation) {\r\n                        await this.anim.searchEntryInSymboltablephaseOne(`${searchEntryLabel}${e.getId()}`, k.getName(), this.symbols.indexOf(k));\r\n                    }\r\n                    lineBuffer.push(`<p class="eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' in Symboltabelle gefunden &nbsp;&nbsp;&nbsp; <span id="${p2LabelValuePlaceholder}"><span></p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML += `<p class="eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' in Symboltabelle gefunden &nbsp;&nbsp;&nbsp; <span id="${p2LabelValuePlaceholder}"><span></p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                        await sleepUntilNextStep();\r\n                    }\r\n                    if (blockAnimation) {\r\n                        await this.anim.searchEntryInSymboltablephaseTwo(this.symbols.indexOf(k), k.getPosition());\r\n                    }\r\n                    lineBuffer.pop();\r\n                    lineBuffer.push(`<p class="eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' in Symboltabelle gefunden, Wert: ${Manipulator_Manipulator.hexToDec(k.getPosition()) + " (" + k.getPosition() + ")"}</p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML = "";\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                        updateScroll(descriptionLines.id);\r\n                        await sleepUntilNextStep();\r\n                    }\r\n                    lineBuffer.push(`<p class="eingeruckt">Ersetzung im Speicherabbild: ${s}--\x3e${n}</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p class="eingeruckt">Ersetzung im Speicherabbild: ${s}--\x3e${n}</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    this.repushTranslations();\r\n                    machinenbefehl.innerHTML = `${n}`;\r\n                    if (blockAnimation) {\r\n                        await this.anim.moveDetailToSpeicherabbild(this.getLinkerAufloesungLine(e.getId(), true), e.getId());\r\n                    }\r\n                    this.repushSpeicherabbildOf(e.getId(), true);\r\n                    lineBuffer.push(`<p>&nbsp;</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>&nbsp;</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    if (!blockAnimation) {\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                    }\r\n                }\r\n                updateScroll(descriptionLines.id);\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                if (this.checkForSkip()) { //bufferZeit für AnimationsTyp3 mit speed==3\r\n                    await sleepFor(40);\r\n                }\r\n            }\r\n        };\r\n        this.pushLines = async (isSkipped) => {\r\n            let input;\r\n            let iP;\r\n            skipped = isSkipped;\r\n            if (this.inputstrings.length > 0) {\r\n                for (let i = 0; i < this.inputstrings.length; i++) {\r\n                    this.translateInputStringOfId(i);\r\n                    translatingInfo.innerHTML = `${i + 1}/${this.inputstrings.length}`;\r\n                    if (this.inputLines.length > i) {\r\n                        input = this.inputLines[i];\r\n                        iP = getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`);\r\n                        await updateScrollOfIn_Out("InputText", `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`);\r\n                        if (input.getType() == InputLineType.EMPTY) {\r\n                            if (this.checkForNoAniStep())\r\n                                await checkIfPaused();\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            if (aniControl.start && aniControl.speed < 3 && aniControl.animationType != AnimationsTyp.Typ3)\r\n                                await sleepFor(1200 - (aniControl.speed) * 200);\r\n                            if (this.checkForNoAniStep()) {\r\n                                await this.anim.animationInputLineToCurrentLine(i, this.inputstrings[i].split(";")[0]);\r\n                            }\r\n                            this.nextParseID = 0;\r\n                            currentLineLine.innerHTML = `${input.getCommandLineToCurrentLine()}`;\r\n                            await this.pushDescriptionLinesOf(i);\r\n                        }\r\n                        await this.repushTranslationOf(i);\r\n                    }\r\n                    if (aniControl.singleStepFlag)\r\n                        await this.pause();\r\n                    if (!skipped)\r\n                        await checkIfPaused();\r\n                    if (!this.checkForSkip()) {\r\n                        await sleepFor(1);\r\n                    }\r\n                }\r\n                descriptionLines.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> -------------------------------------------------------- </p>`;\r\n                this.linkerAuflosungB = this.aufzulosendeLabel();\r\n                await this.linkerAuflosung();\r\n                await updateScroll(descriptionLines.id);\r\n                aniControl.setEnd();\r\n            }\r\n        };\r\n        this.pushDescriptionLinesOf = async (i) => {\r\n            let e;\r\n            let ss;\r\n            let l;\r\n            let newElem;\r\n            let lineBuffer = [];\r\n            let blockAnimation = this.checkForNoAniStep();\r\n            if (this.inputLines.length <= i) {\r\n                throw new Error("Expected was an ID of an Inputline smaller than " + this.inputLines.length + " but got " + i);\r\n            }\r\n            newElem = document.createElement("div");\r\n            newElem.id = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}DescriptionDiv`;\r\n            newElem.classList.add("noMP");\r\n            if (!this.checkForSkip()) {\r\n                newElem.classList.add("hiddenDescriptionDiv");\r\n            }\r\n            descriptionLines.appendChild(newElem);\r\n            l = this.inputLines[i];\r\n            ss = l.getDescriptionLine();\r\n            lineBuffer.push(`<p style=" white-space: nowrap; overflow: hidden;"> ----<span class="bold"><${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}></span>------------------------------------------------ </p>`);\r\n            // newElem.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> ----<span class="bold"><${(i+1)<10?"0"+(i+1):(i+1)}></span>------------------------------------------------ </p>`;\r\n            if (blockAnimation) {\r\n                newElem.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> ----<span class="bold"><${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}></span>------------------------------------------------ </p>`;\r\n            }\r\n            for (let j = 0; j < ss.length; j++) {\r\n                e = ss[j];\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                if (e.includes("parse")) {\r\n                    await this.nextInverted(l.getAllV());\r\n                }\r\n                if (e.includes(\'error\')) {\r\n                    console.log("error has been found");\r\n                    await this.nextInverted(l.getAllV());\r\n                    aniControl.setStop();\r\n                    lineBuffer.push(`<p>${e}</p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML += `<p>${e}</p>`;\r\n                    }\r\n                    else {\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                    }\r\n                    addClassTo("crError", "bkError");\r\n                    updateScroll(descriptionLines.id);\r\n                    throw Error(\'Stop pressed\');\r\n                }\r\n                else {\r\n                    lineBuffer.push(`<p>${e}</p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML += `<p>${e}</p>`;\r\n                    }\r\n                    updateScroll(descriptionLines.id);\r\n                }\r\n                if (e.includes("gefunden: Doppelpunkt")) {\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        await this.anim.moveLabeltoSymboltableALTMoveable(l.getLabel());\r\n                        await this.rePushLastSymbolEmpty();\r\n                        await sleepUntilNextStep();\r\n                        await this.anim.moveLabeltoSymboltableALTMoveableHelper(this.symbolList.getPositionOfSpecificLabel(l.getLabel()));\r\n                    }\r\n                    this.rePushSymbols();\r\n                }\r\n                if (j - 1 > 0) {\r\n                    if (ss[j - 1].includes("gesamter")) {\r\n                        if (l.getFirstPart().toUpperCase() == "ORG") {\r\n                            // this.pushTranslationOf(i);\r\n                            this.repushSpeicherabbildOf(i, false);\r\n                        }\r\n                        else if (l.getEndAddr() != "") {\r\n                            // machinenbefehl.innerHTML= `${this.inputLineControl.getDisplayableSpeicherabbild(l,false)}`;\r\n                            machinenbefehl.innerHTML = `\r\n                            ${Manipulator_Manipulator.formatSpeicherabbildandLabel(this.inputLineControl.getDisplayableSpeicherabbild(l, false), this.getLabelIfUnknown(l.getId(), false))}\r\n                            `;\r\n                            if (blockAnimation) {\r\n                                await sleepUntilNextStep();\r\n                                await this.anim.moveDetailToSpeicherabbild(this.getLinkerAufloesungLine(i, false), i);\r\n                            }\r\n                            // this.pushTranslationOf(i);\r\n                            this.repushSpeicherabbildOf(i, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!blockAnimation) {\r\n                lineBuffer.forEach(e => {\r\n                    newElem.innerHTML += e;\r\n                });\r\n            }\r\n            if (this.symbolList.isConst(l.getFirstPart())) {\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                    await this.anim.moveConstToSymbolTable(this.symbolList.getSpecificConstantByName(l.getFirstPart()).toStringtoMovable());\r\n                }\r\n                this.rePushSymbols();\r\n                this.repushSpeicherabbildOf(i, false);\r\n            }\r\n            else if (l.getType() == InputLineType.PSEUDOTRANSLATED) {\r\n                this.repushSpeicherabbildOf(i, false);\r\n            }\r\n            else {\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                    if (l.getFirstPart().toUpperCase() == "ORG") {\r\n                        // console.log("yes");\r\n                        let m = l.getSecondPart();\r\n                        if (this.symbolList.isConst(l.getSecondPart())) {\r\n                            m = this.symbolList.getSpecificConstantByName(l.getSecondPart()).getValue();\r\n                        }\r\n                        await this.anim.displayAddresserhoehung(l.getId(), m, "=", l.getEndAddr());\r\n                    }\r\n                    else\r\n                        await this.anim.displayAddresserhoehung(l.getId(), String(l.getLength()), "+", l.getEndAddr());\r\n                }\r\n                addresszahler.innerHTML = `${Manipulator_Manipulator.formatHextoDat16(l.getEndAddr())}`;\r\n            }\r\n            if (this.checkForSkip()) { //bufferZeit für AnimationsTyp3 mit speed==3\r\n                await sleepFor(30);\r\n            }\r\n            if (blockAnimation) {\r\n                await sleepUntilNextStep();\r\n            }\r\n            removeClassOfAll("crInvert");\r\n            l.formatInputToDisplay();\r\n            this.refreshInputListItem(i);\r\n            await this.clearMachinenbefehlandCurrentLine();\r\n            updateScroll(descriptionLines.id);\r\n            getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`).onclick = ((e) => {\r\n                if (!aniControl.play) {\r\n                    updateScrollOfDescriptionLines(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}DescriptionDiv`, descriptionLines.id);\r\n                }\r\n            });\r\n        };\r\n        this.aufzulosendeLabel = () => {\r\n            let b = false;\r\n            this.inputLines.forEach(e => {\r\n                if (e.getTranslation().includes("????")) {\r\n                    b = true;\r\n                }\r\n                if (e.hasOffsetLabel()) {\r\n                    b = true;\r\n                }\r\n            });\r\n            return b;\r\n        };\r\n        this.translateInputStringOfId = (n) => {\r\n            if (n < this.inputstrings.length) {\r\n                this.inputLineControl.addInputLine(this.inputstrings[n]);\r\n                this.refreshInputLines();\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.nextInverted = async (n) => {\r\n            if (this.checkForNoAniStep()) {\r\n                await sleepFor(30);\r\n            }\r\n            for (this.nextParseID; this.nextParseID < n.length; this.nextParseID++) {\r\n                if (n[this.nextParseID] == 1) {\r\n                    this.switchInvertedTo(this.nextParseID);\r\n                    this.nextParseID += 1;\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        this.switchInvertedTo = (n) => {\r\n            switch (n) {\r\n                case 0:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crLabel", "crInvert");\r\n                    break;\r\n                case 1:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crFirst", "crInvert");\r\n                    break;\r\n                case 2:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crSecond", "crInvert");\r\n                    break;\r\n                case 3:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crThird", "crInvert");\r\n                    break;\r\n                case 4:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crError", "crInvert");\r\n                    break;\r\n                case 5:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        this.startPlaying = async () => {\r\n            if (aniControl.stop || aniControl.reset || aniControl.end)\r\n                throw new Error("Reset was presser recently!");\r\n            if (this.inputstrings.length > 0) {\r\n                let date = Date.now();\r\n                await this.pushLines(false);\r\n                await this.clearMachinenbefehlandCurrentLine();\r\n                aniControl.setEnd();\r\n                console.log(Date.now() - date);\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n        };\r\n        this.toggleStop = async () => {\r\n            if (this.inputstrings.length > 0) {\r\n                if (aniControl.end || aniControl.stop) {\r\n                    throw new Error("Stop has been pressed or animation Finished!");\r\n                    return;\r\n                }\r\n                if (aniControl.reset) {\r\n                    throw new Error("Waiting until reset is finished!");\r\n                    return;\r\n                }\r\n                if (!aniControl.start) {\r\n                    await aniControl.setStart();\r\n                    await this.startPlaying();\r\n                }\r\n                else {\r\n                    if (aniControl.play) {\r\n                        await aniControl.setPaused();\r\n                    }\r\n                    else {\r\n                        await aniControl.setPlaying();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n        };\r\n        this.pause = () => {\r\n            aniControl.setPaused();\r\n        };\r\n        this.speed = () => {\r\n            this.anim.getStaticBodyWidth();\r\n        };\r\n        this.reset = async () => {\r\n            if (!aniControl.reset) {\r\n                aniControl.setReset();\r\n                await this.partialReset();\r\n                await this.refreshInputListItems();\r\n            }\r\n        };\r\n        this.displayInputLines = async () => {\r\n            await this.partialReset();\r\n            await this.refreshInputListItems();\r\n        };\r\n        this.setInputStrings = (s) => {\r\n            this.inputstrings = s;\r\n        };\r\n        this.refreshInputStrings = (s) => {\r\n            this.inputstrings = s;\r\n        };\r\n        this.refreshInputLines = () => {\r\n            this.inputLines = this.inputLineControl.getInputLines();\r\n        };\r\n        this.openOutputWindow = () => {\r\n            try {\r\n                aniControl.setPaused();\r\n                let b = window.getComputedStyle(outputwindowContainer);\r\n                if (b.getPropertyValue(\'visibility\') == "hidden") {\r\n                    outputwindowContainer.style.visibility = "visible";\r\n                }\r\n                else {\r\n                    outputwindowContainer.style.visibility = "hidden";\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.createListeners = () => {\r\n            try {\r\n                this.iWindow.createEventListeners();\r\n                // createClickListener(\'testButton\',this.testCycling);\r\n                createClickListener(\'CloseOutputWindow\', this.openOutputWindow);\r\n                createClickListener(\'TranslateWindow\', this.openOutputWindow);\r\n                createClickListener(\'play\', this.toggleStop);\r\n                // createClickListener(\'stop\',this.pause);\r\n                createClickListener(\'speed\', setTranslatingDivVisible);\r\n                // createClickListener(\'skip\',this.skipToFinish);\r\n                createClickListener(\'reset\', this.reset);\r\n                aniControl.createEventListeners();\r\n                // createClickListener(InputID.id,setScrollbarOfDescriptionLine);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.anim = new Animator();\r\n    }\r\n    rePushLastSymbolEmpty() {\r\n        this.symbols = this.symbolList.getSequence();\r\n        let s;\r\n        let n, p;\r\n        let idString = "";\r\n        symbolTableLines.innerHTML = "";\r\n        if (this.symbols.length != 0) {\r\n            for (let i = 0; i < this.symbols.length; i++) {\r\n                if (this.symbols[i] != null) {\r\n                    s = this.symbols[i];\r\n                    if (i == this.symbols.length - 1) {\r\n                        if (s instanceof Label) {\r\n                            n = s.getName();\r\n                            p = s.getPosition();\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">L:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} =&nbsp;&nbsp;<span id="${targetlabelValuePlaceholder}"> </span></h4>`;\r\n                        }\r\n                        break;\r\n                    }\r\n                    if (s instanceof Label) {\r\n                        n = s.getName();\r\n                        p = s.getPosition();\r\n                        symbolTableLines.innerHTML += `<h4><span class="gray">L:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = ${this.inputLineControl.fHD16(p)} (${this.inputLineControl.getLittleEndianOf(p)})</h4>`;\r\n                    }\r\n                    if (s instanceof Constant) {\r\n                        n = s.getName();\r\n                        p = s.getValue();\r\n                        if (Manipulator_Manipulator.isDat_8(p)) {\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = &nbsp;&nbsp;${this.inputLineControl.fHD8(p)}</h4>`;\r\n                        }\r\n                        else {\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = ${this.inputLineControl.fHD16(p)}</h4>`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            symbolTableLines.innerHTML += `<h4> &nbsp;<span id="${targetSymbolTableLine}"></span> </h4>`;\r\n        }\r\n        updateScroll("symbolTableLines");\r\n    }\r\n    getLabelIfUnknown(i, b) {\r\n        let e;\r\n        let addr, spa, l = "";\r\n        if (i < this.inputLines.length) {\r\n            e = this.inputLines[i];\r\n            spa = this.inputLineControl.getDisplayableSpeicherabbild(e, b);\r\n            if (spa.includes("??")) {\r\n                if (e.hasOffsetLabel()) {\r\n                    l = "(" + e.getLabelOfOffset() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getSecondPart())) {\r\n                    l = "(" + e.getSecondPart() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getThirdPart())) {\r\n                    l = "(" + e.getThirdPart() + ")";\r\n                }\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n    getLinkerAufloesungLine(i, b) {\r\n        let e;\r\n        let addr, spa, l = "";\r\n        if (i < this.inputLines.length) {\r\n            e = this.inputLines[i];\r\n            addr = e.getStartingAddr();\r\n            spa = this.inputLineControl.getDisplayableSpeicherabbild(e, b);\r\n            if (spa.includes("??")) {\r\n                if (e.hasOffsetLabel()) {\r\n                    l = "(" + e.getLabelOfOffset() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getSecondPart())) {\r\n                    l = "(" + e.getSecondPart() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getThirdPart())) {\r\n                    l = "(" + e.getThirdPart() + ")";\r\n                }\r\n            }\r\n            return addr + ": " + spa + " " + l;\r\n        }\r\n        return "";\r\n    }\r\n    checkForSkip() {\r\n        if (skipped)\r\n            return false;\r\n        return !(aniControl.speed == 4 && aniControl.isAni3());\r\n    }\r\n    checkForNoAniStep() {\r\n        if (skipped)\r\n            return false;\r\n        return !(aniControl.speed >= 3 && aniControl.isAni3());\r\n    }\r\n    clearMachinenbefehlandCurrentLine() {\r\n        machinenbefehl.innerHTML = "&nbsp;";\r\n        currentLineLine.innerHTML = "&nbsp;";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\nconst onscrollIn_Out = () => {\r\n    /* let inputText= document.getElementById("InputText");\r\n    let outputText= document.getElementById("OutputText"); */\r\n    var ignoreScrollEvents = false;\r\n    try {\r\n        if (inputText != null && outputText != null) {\r\n            inputText.onscroll = function () {\r\n                if (aniControl.play)\r\n                    return;\r\n                var ignore = ignoreScrollEvents;\r\n                ignoreScrollEvents = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents = true;\r\n                if (inputText != null && outputText != null) {\r\n                    outputText.scrollTop = inputText.scrollTop;\r\n                }\r\n            };\r\n            outputText.onscroll = function () {\r\n                // if(inputText!=null && outputText!=null&&!aniControl.play){\r\n                if (aniControl.play)\r\n                    return;\r\n                var ignore = ignoreScrollEvents;\r\n                ignoreScrollEvents = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents = true;\r\n                if (inputText != null && outputText != null) {\r\n                    /* if(inputText.scrollTop>outputText.scrollTop && inputText.scrollTop+inputText.clientHeight>outputText.scrollHeight){\r\n\r\n                    } */\r\n                    inputText.scrollTop = outputText.scrollTop;\r\n                }\r\n            };\r\n        }\r\n        else\r\n            throw new Error("Element InputText oder OutputText ist null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst root = document.documentElement;\r\nconst rootVariables = getComputedStyle(root);\r\nlet contentloaded = false;\r\nconst switchToFullscreen = () => {\r\n    var elem = document.documentElement;\r\n    const elem2 = document.getElementById("vollbild");\r\n    if (elem != null && elem2 != null) {\r\n        if (!fullscreened) {\r\n            if (elem.requestFullscreen) {\r\n                elem.requestFullscreen();\r\n            }\r\n            else if (elem.webkitRequestFullscreen) { /* Safari */\r\n                elem.webkitRequestFullscreen();\r\n            }\r\n            else if (elem.msRequestFullscreen) { /* IE11 */\r\n                elem.msRequestFullscreen();\r\n            }\r\n            elem2.setAttribute("fullscreen", "on");\r\n            fullscreened = true;\r\n        }\r\n        else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            }\r\n            else if (document.webkitExitFullscreen) {\r\n                document.webkitExitFullscreen();\r\n            }\r\n            else if (document.msExitFullscreen) {\r\n                document.msExitFullscreen();\r\n            }\r\n            elem2.setAttribute("fullscreen", "off");\r\n            fullscreened = false;\r\n        }\r\n    }\r\n    /*\r\n    function toggleFullScreen() {\r\n        var doc = window.document;\r\n        var docEl = doc.documentElement;\r\n\r\n        var requestFullScreen =\r\n            docEl.requestFullscreen ||\r\n            docEl.mozRequestFullScreen ||\r\n            docEl.webkitRequestFullScreen ||\r\n            docEl.msRequestFullscreen;\r\n        var cancelFullScreen =\r\n            doc.exitFullscreen ||\r\n            doc.mozCancelFullScreen ||\r\n            doc.webkitExitFullscreen ||\r\n            doc.msExitFullscreen;\r\n\r\n        if (\r\n            !doc.fullscreenElement &&\r\n            !doc.mozFullScreenElement &&\r\n            !doc.webkitFullscreenElement &&\r\n            !doc.msFullscreenElement\r\n        ) {\r\n            requestFullScreen.call(docEl);\r\n        } else {\r\n            cancelFullScreen.call(doc);\r\n        }\r\n    }\r\n    */\r\n};\r\nconst consoleWindowsize = () => {\r\n    console.log("Innerwidth: " + window.innerWidth);\r\n    console.log("Innerheight: " + window.innerHeight);\r\n    console.log("Outerwidth: " + window.outerWidth);\r\n    console.log("Outerheight: " + window.outerHeight);\r\n};\r\nconst outputClip = () => {\r\n    var copyText = document.getElementById("OutputTextArea");\r\n    if (copyText != null) {\r\n        navigator.clipboard.writeText(copyText.value);\r\n    }\r\n};\r\nconst syncScroll_MachineCode_Hexadecimal = () => {\r\n    var ignoreScrollEvents2 = false;\r\n    // console.log(OutputWindowMachineCode.scrollTop);\r\n    // console.log(OutputTextAreaElement.scrollTop);\r\n    try {\r\n        if (OutputWindowMachineCode != null && OutputTextAreaElement != null) {\r\n            OutputWindowMachineCode.onscroll = function () {\r\n                var ignore = ignoreScrollEvents2;\r\n                ignoreScrollEvents2 = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents2 = true;\r\n                OutputTextAreaElement.scrollTop = OutputWindowMachineCode.scrollTop;\r\n            };\r\n            OutputTextAreaElement.onscroll = function () {\r\n                var ignore = ignoreScrollEvents2;\r\n                ignoreScrollEvents2 = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents2 = true;\r\n                OutputWindowMachineCode.scrollTop = OutputTextAreaElement.scrollTop;\r\n            };\r\n        }\r\n        else\r\n            throw new Error("Element OutputWindowMachineCode oder OutputTextAreaElement ist null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst setCurrentlyHovered = async (e) => {\r\n    let id;\r\n    if (e.target instanceof HTMLElement) {\r\n        removeClassOfAll("highlighted");\r\n        id = getIDOfSelected(e.target.id);\r\n        // console.log(id);\r\n        addClassTo(id + "inputP", "highlighted");\r\n        addClassTo(id + "outputP", "highlighted");\r\n    }\r\n    /* if(e instanceof PointerEvent){\r\n    } */\r\n    return false;\r\n};\r\nconst changeTheme = () => {\r\n    let theme = preferedTheme === "light" ? \'dark\' : \'light\';\r\n    preferedTheme = theme;\r\n    const root = document.querySelector(\':root\');\r\n    root.setAttribute(\'color-scheme\', `${theme}`);\r\n};\r\nlet preferedTheme = "light";\r\nlet fullscreened = false;\r\nlet p = new ProjectWindow();\r\nwindow.addEventListener(\'DOMContentLoaded\', async () => {\r\n    const root1 = document.querySelector(\':root\');\r\n    root1.setAttribute(\'color-scheme\', `${preferedTheme}`);\r\n    contentloaded = true;\r\n    aniControl.setLoaded(true);\r\n});\r\nconst testBinToHex = () => {\r\n    let ss = [\r\n        Manipulator.binToHex("1111"),\r\n        Manipulator.binToHex("01111"),\r\n        Manipulator.binToHex("001111"),\r\n        Manipulator.binToHex("001111"),\r\n        Manipulator.binToHex("0001111"),\r\n        Manipulator.binToHex("00001111"),\r\n        Manipulator.binToHex("000001111")\r\n    ];\r\n    ss.forEach(e => console.log(e));\r\n};\r\nconst main = async () => {\r\n    p.createListeners();\r\n    onscrollIn_Out();\r\n    createClickListener("InputLines", setCurrentlyHovered);\r\n    InputLines.addEventListener("touchstart", setCurrentlyHovered);\r\n    createClickListener("light", changeTheme);\r\n    createClickListener("OutputClip", outputClip);\r\n    syncScroll_MachineCode_Hexadecimal();\r\n    createClickListener("vollbild", switchToFullscreen);\r\n    window.addEventListener("resize", consoleWindowsize);\r\n    document.getElementById("vollbild").setAttribute("fullscreen", "off");\r\n    // testBinToHex();\r\n};\r\nmain();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBQyxTQUFTLENBQUMsWUFBWSxHQUFDLElBQUksQ0FBQztRQUUzRSxJQUFHLFFBQVEsSUFBRyxJQUFJLEVBQUM7WUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUMsUUFBUSxDQUFDLFVBQVUsR0FBQyxRQUFRLENBQUMsV0FBVyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBQzNHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxRQUFRLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDLFlBQVksR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQztZQUU5SSxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBQyxDQUFDLEdBQUMsZUFBZSxDQUFDLFlBQVksR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBQ3pILFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsR0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDO1lBRXpHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLGVBQWUsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDO1lBQ3RELFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFFLFNBQVMsQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsVUFBVSxDQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBRWxHLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxXQUFXLENB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QUMsR0FBQyxlQUFlLENBQUMsWUFBWSxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUM7WUFFekgsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUMsZUFBZSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUM7WUFDcEQsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUMsYUFBYSxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUM7WUFFcEQsZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUMsY0FBYyxHQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUMsY0FBYyxHQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUMsSUFBSSxDQUFDO1lBQ25NLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFDLGNBQWMsR0FBQyxJQUFJLENBQUM7WUFFdkksYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLFlBQVksR0FBQyxjQUFjLEdBQUMsVUFBVSxDQUFDLFlBQVksR0FBQyxjQUFjLEdBQUMsU0FBUyxDQUFDLFNBQVMsR0FBQyxTQUFTLENBQUMsWUFBWSxHQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDO1lBQ2hMLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFNLFNBQVMsQ0FBQyxTQUFTLEdBQUMsU0FBUyxDQUFDLFlBQVksR0FBQyxTQUFTLENBQUMsWUFBWSxHQUFDLGNBQWMsR0FBQyxJQUFJLENBQUM7U0FDdEg7YUFDSSxJQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksR0FBQyxJQUFJLENBQUMs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QUFJLENBQUM7WUFDL0UsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsU0FBUyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUM7WUFFbkgsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxHQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBRXpHLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxHQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBRTNILFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFDLElBQUksQ0FBQztZQUN0RCxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksR0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsR0FBQyxJQUFJLENBQUM7WUFFdEQsZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBQyxjQUFjLEdBQUMsVUFBVSxDQUFDLFdBQVcsR0FBQyxjQUFjLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUMsVUFBVSxDQUFDLFVBQVUsR0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBQzlMLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBQyxVQUFVLENBQUMsV0FBVyxHQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUMsY0FBYyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBRXJILGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBQyxjQUFjLEdBQUMsU0FBUyxDQUFDLFlBQVksR0FBQyxjQUFjLEdBQUMsU0FBUyxDQUFDLFNBQVMsR0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBQ3hKLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBQyxVQUFVLENBQUMsWUFBWSxHQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUMsY0FBYyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBRW5ILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLFdBQVcsRUFBQyxlQUFlLEVBQUMsWUFBWSxFQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sb0JBQW9CLEVBQUUsQ0FBQztZQUM3QixNQUFNLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFHL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBQyxPQUFPLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1lBQzNJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQztZQUUxRSxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQztZQUMzQixNQUFNLGtCQUFrQixFQUFFLENBQUM7WUFDM0IsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO1lBQzNCLE9BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUM7Z0JBQ3hILE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQzthQUNyRDtZQUNELElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUMsd0NBQTRCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN6RixNQUFNLGtCQUFrQixFQUFFLENBQUM7WUFDM0IsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3pCLE9BQU87U0FDVjtJQUNMLENBQUM7SUFFTyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQVEsRUFBQyxDQUFRO1FBQzFDLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLGFBQWEsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sYUFBYSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVPLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFRLEVBQUMsQ0FBUTtRQUNoRCxNQUFNLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxhQUFhLEVBQUUsQ0FBQztRQUN0QixNQUFNLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxHQUFVLEVBQUMsSUFBVztRQUMzQyxJQUFHLElBQUksQ0FBQyxNQUFNLEdBQUMsRUFBRSxFQUFDO1lBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLE9BQU8sSUFBSSxHQUFHLHlCQUF5QixJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUM7U0FDN0Q7UUFDRCxPQUFPLElBQUksR0FBRyx5QkFBeUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQzNELENBQUM7SUFDTyxZQUFZLENBQUMsQ0FBUTtRQUN6QixLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUM7WUFDckMsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBRyxDQUFDLEVBQUM7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3QjtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFVBQVUsQ0FBQyxDQUFTO1FBQ2hCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsSUFBRyxDQUFDLEVBQUU7WUFDRixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzVDO2FBQ0c7WUFDQSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQztJQUVELG9CQUFvQixDQUFDLENBQVEsRUFBQyxDQUFRO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1FBQ25DLHdDQUF3QztRQUN4Qyx1Q0FBdUM7SUFDM0MsQ0FBQztJQUVPLFlBQVk7UUFDaEIsT0FBTyxnQkFBZ0IsR0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFRLEVBQUMsQ0FBUTtRQUN4QyxJQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFDLENBQUMsR0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQztZQUNwRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUMsSUFBSSxDQUFDO1NBQ2xFO2FBQ0ksSUFBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBQyxDQUFDLEVBQUM7WUFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO1NBQ3RFO2FBQ0c7WUFDQSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUM7U0FDdEU7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQVEsRUFBQyxDQUFRO1FBQ3pDLElBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEdBQUMsQ0FBQyxHQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDO1lBQ3RFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBQyxJQUFJLENBQUM7U0FDcEU7YUFDSSxJQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFDLENBQUMsRUFBQztZQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUM7U0FDeEU7YUFDRztZQUNBLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQztTQUN4RTtJQUNMLENBQUM7SUFrQ08sbUJBQW1CLENBQUMsQ0FBUTtRQUNoQyxJQUFJLE9BQXNCLENBQUM7UUFDM0IsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsUUFBUSxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFDLEdBQUcsQ0FBQztRQUN6QixRQUFPLENBQUMsRUFBQztZQUNMLEtBQUssV0FBVztnQkFDWixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxHQUFHLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUVqQyxNQUFNO1lBQ1YsS0FBSyxpQkFBaUIsQ0FBQztZQUN2QixLQUFLLGtCQUFrQjtnQkFDbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBRWxELE1BQU07WUFDVixLQUFLLFlBQVksQ0FBQztZQUNsQixLQUFLLGFBQWE7Z0JBQ2QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNO1lBQ1YsS0FBSyxlQUFlO2dCQUNoQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ2hELE1BQU07WUFDVjtnQkFDSyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFDN0IsTUFBTTtTQUNiO1FBQ0QsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRU8sY0FBYyxDQUFDLENBQVE7UUFDM0IsSUFBSSxJQUFJLEdBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QyxRQUFPLENBQUMsRUFBQztZQUNMLEtBQUssRUFBRTtnQkFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDeEMsTUFBTTtZQUNOLEtBQUssSUFBSTtnQkFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDeEMsTUFBTTtZQUNOLEtBQUssSUFBSTtnQkFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDeEMsTUFBTTtZQUNOLEtBQUssS0FBSztnQkFDTixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDckMsTUFBTTtTQUNUO0lBQ0wsQ0FBQztJQUVPLGVBQWUsQ0FBQyxFQUFTLEVBQUMsQ0FBUTtRQUN0QyxJQUFJLElBQUksR0FBRSxFQUFFLElBQUUsQ0FBQyxFQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEVBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVqRixRQUFPLENBQUMsRUFBQztZQUNMLEtBQUssR0FBRztnQkFDSixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFckMsTUFBTTtZQUNOLEtBQUssR0FBRztnQkFDSixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFckMsTUFBTTtZQUNOLEtBQUssR0FBRztnQkFDSixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFckMsTUFBTTtZQUNOLEtBQUssR0FBRztnQkFDSixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDOUIsTUFBTTtZQUNWO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztTQUM5RDtJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBUztRQUNsQyxJQUFJLFNBQVMsR0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQUUsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUUsSUFBRyxTQUFTLElBQUUsSUFBSSxFQUFDO1lBQ2YsSUFBSSxDQUFDLEdBQUUsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFZixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLFNBQVMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUMsSUFBSSxDQUFDO1lBQ3JILElBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUM7Z0JBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUM7YUFDNUQ7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUUsU0FBUyxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUM7U0FFMUQ7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLDRCQUE0QixDQUFDLEVBQVM7UUFDeEMsSUFBSSxTQUFTLEdBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9FLElBQUcsU0FBUyxJQUFFLElBQUksRUFBQztZQUNmLElBQUksQ0FBQyxHQUFFLG9CQUFvQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUMsU0FBUyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztTQUMzRztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBVTtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUU7WUFDdkIsSUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQztnQkFDaEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDO2FBQ2hDO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELEtBQUssQ0FBQyxvQkFBb0I7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFO1lBQ3ZCLElBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBRSxpQkFBaUIsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFFLGtCQUFrQixFQUFDO2dCQUNuRCxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO2FBQ3hCO1lBQ0QsSUFBRyxDQUFDLENBQUMsRUFBRSxJQUFFLGVBQWUsRUFBQztnQkFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQzthQUN6QjtZQUNELENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFDLFFBQVEsQ0FBQztRQUNoQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQjtRQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsUUFBUSxDQUFDO0lBQy9DLENBQUM7SUFFRCxLQUFLLENBQUMsa0JBQWtCO1FBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBQyxTQUFTLENBQUM7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyx1QkFBdUI7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFDLFFBQVEsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSyxDQUFDLHdCQUF3QjtRQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDO0lBQ2xELENBQUM7SUFFRCxLQUFLLENBQUMsbUJBQW1CLENBQUMsSUFBVyxFQUFDLEtBQVk7UUFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUMsSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDO1FBQ3BFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxHQUFDLEtBQUssQ0FBQyxHQUFDLElBQUksQ0FBQztRQUN2RTs0R0FDb0c7SUFDeEcsQ0FBQztJQUVELEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxJQUFXLEVBQUMsS0FBWTtRQUNwRCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsR0FBQyxJQUFJLENBQUM7UUFDeEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUMsS0FBSyxDQUFDLEdBQUMsSUFBSSxDQUFDO1FBQzNFO2dIQUN3RztJQUM1RyxDQUFDO0NBQ0o7OztBQ3YwQ21EO0FBQ0Y7QUFDTztBQUNqQjtBQUNNO0FBQ2dCO0FBRWxCO0FBQ29IO0FBQ1I7QUFDbEg7QUFJL0IsTUFBTSxnQkFBZ0IsR0FBZSxjQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN4RSxNQUFNLGdCQUFnQixHQUFlLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sV0FBVyxHQUFlLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM5RCxNQUFNLFVBQVUsR0FBZSxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDNUQsTUFBTSxTQUFTLEdBQWMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sYUFBYSxHQUFlLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNsRSxNQUFNLGNBQWMsR0FBZSxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNwRSxNQUFNLHFCQUFxQixHQUFlLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2xGLE1BQU0scUJBQXFCLEdBQXNCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBdUIsQ0FBQztBQUN4RyxNQUFNLE9BQU8sR0FBYSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEQsTUFBTSxVQUFVLEdBQWEsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFELE1BQU0sZUFBZSxHQUFhLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sV0FBVyxHQUFhLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM1RCxNQUFNLGVBQWUsR0FBYyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNyRSxNQUFNLHFCQUFxQixHQUFlLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2xGLE1BQU0saUJBQWlCLEdBQWUsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDMUUsTUFBTSx1QkFBdUIsR0FBZSxjQUFjLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUN0RixNQUFNLHFCQUFxQixHQUFRLHlCQUF5QixDQUFDO0FBQzdELE1BQU0sMkJBQTJCLEdBQVEsdUJBQXVCO0FBQ2hFLE1BQU0sdUJBQXVCLEdBQVEseUJBQXlCLENBQUM7QUFDdEUsSUFBSSxPQUFPLEdBQVMsS0FBSyxDQUFDO0FBR25CLE1BQU0sZ0JBQWdCLEdBQVEsa0JBQWtCLENBQUM7QUFDakQsTUFBTSxhQUFhLEdBQVEsZUFBZSxDQUFDO0FBQzNDLE1BQU0sV0FBVyxHQUFhLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sZUFBZSxHQUFrQixjQUFjLENBQUMsaUJBQWlCLENBQW9CLENBQUM7QUFDNUYsTUFBTSx1QkFBdUIsR0FBQyxHQUFFLEVBQUU7SUFDckMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsUUFBUSxDQUFDO0FBQzFDLENBQUM7QUFDTSxNQUFPLHdCQUF3QixHQUFDLEdBQUUsRUFBRTtJQUN2QyxJQUFHLGlCQUFpQixFQUFFLElBQUksZ0JBQWdCLElBQUUsQ0FBQyxJQUFJLGVBQWUsSUFBSSxXQUFXLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFFLE1BQU0sRUFBQztRQUNoSCxzQkFBc0I7UUFDdEIsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDO0tBQzFDO0FBQ0wsQ0FBQztBQUVNLE1BQU0sYUFBYTtJQVV0QjtRQVRRLHFCQUFnQixHQUFrQiw0QkFBNEIsRUFBRSxDQUFDO1FBQ2pFLGVBQVUsR0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3BDLFlBQU8sR0FBZSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1QyxxQkFBZ0IsR0FBUyxLQUFLLENBQUM7UUFDL0IsZ0JBQVcsR0FBUSxDQUFDLENBQUM7UUFDckIsZUFBVSxHQUFhLEVBQUUsQ0FBQztRQUMxQixpQkFBWSxHQUFXLEVBQUUsQ0FBQztRQUMxQixZQUFPLEdBQXVCLEVBQUU7UUFPakMsaUJBQVksR0FBRSxLQUFLLElBQUksRUFBRTtZQUM1QixJQUFJLENBQUMsVUFBVSxHQUFDLEVBQUUsQ0FBQztZQUNuQixNQUFNLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO1lBQy9DLGdCQUFnQixDQUFDLFNBQVMsR0FBQyxXQUFXLHFCQUFxQixpQkFBaUIsQ0FBQztZQUM3RSxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFDO1lBQzlCLGFBQWEsQ0FBQyxTQUFTLEdBQUMsT0FBTyxDQUFDO1lBQ2hDLFdBQVcsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDO1lBQ25CLGVBQWUsQ0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFDO1lBQzdCLFdBQVcsQ0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFDO1lBQ3pCLHFCQUFxQixDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7WUFDbkMscUJBQXFCLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUNuQyxpQkFBaUIsQ0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3BDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN4QixNQUFNLHFCQUFxQixFQUFFLENBQUM7WUFDOUIsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUVNLDBCQUFxQixHQUFDLEdBQUUsRUFBRTtZQUM3QixPQUFPLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUNyQixVQUFVLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUN4QixlQUFlLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUM3QixXQUFXLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUN6QixJQUFJLEVBQUUsR0FBVSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFXLENBQUM7WUFDaEIsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDO2dCQUN2QyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsSUFBRyxDQUFDLElBQUcsSUFBSSxFQUFDO29CQUNSLElBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFFLG1CQUFtQixFQUFDO3dCQUNoQyxPQUFPLENBQUMsU0FBUyxJQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQzt3QkFDbEgsVUFBVSxDQUFDLFNBQVMsSUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsYUFBYSxFQUFFLElBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7cUJBQ25KO3lCQUFJO3dCQUNELE9BQU8sQ0FBQyxTQUFTLElBQUUsb0JBQW9CLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQzt3QkFDdkUsVUFBVSxDQUFDLFNBQVMsSUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLG1DQUFtQyxtREFBdUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsSUFBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQztxQkFDelA7b0JBQ0QsZUFBZSxDQUFDLFNBQVMsSUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO29CQUNqRyxXQUFXLENBQUMsU0FBUyxJQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsNkNBQTZDLENBQUM7aUJBQzFHO3FCQUNHO29CQUNBLE9BQU8sQ0FBQyxTQUFTLElBQUUsVUFBVSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxFQUFFLEVBQUMsSUFBRyxHQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO29CQUNsSCxVQUFVLENBQUMsU0FBUyxJQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsb0NBQW9DLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztvQkFDN0gsZUFBZSxDQUFDLFNBQVMsSUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO29CQUNqRyxXQUFXLENBQUMsU0FBUyxJQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsNkNBQTZDLENBQUM7aUJBQzFHO2FBQ0o7WUFDRCxrQ0FBa0M7UUFDdEMsQ0FBQztRQUVNLHlCQUFvQixHQUFDLENBQUMsQ0FBUSxFQUFDLEVBQUU7WUFDcEMsSUFBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUM7Z0JBQ3hCLElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO2dCQUNuRCxJQUFJLGFBQWEsR0FBZSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3pELDhCQUE4QjtnQkFDOUIsSUFBRyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUUsbUJBQW1CLEVBQUM7b0JBQ2hDLGFBQWEsQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLElBQUUsRUFBRSxFQUFDLEdBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7aUJBQy9FO3FCQUNJLElBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFFLDhCQUE4QixFQUFDO29CQUNoRCxhQUFhLENBQUMsU0FBUyxHQUFDLEdBQUcsMENBQThCLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsSUFBRSxFQUFFLEVBQUMsR0FBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztpQkFDbkk7cUJBQ0c7b0JBQ0EsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBQzt3QkFDekMsYUFBYSxDQUFDLFNBQVMsR0FBQyxHQUFHLG1EQUF1QyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBQyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxJQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxHQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO3FCQUN6TDs7d0JBQ0ksYUFBYSxDQUFDLFNBQVMsR0FBQyxHQUFHLG1EQUF1QyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxJQUFFLEVBQUUsRUFBQyxHQUFFLEVBQUMsSUFBRyxHQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO2lCQUN6TDthQUVKO1FBQ0wsQ0FBQztRQUVNLDJCQUFzQixHQUFDLENBQUMsQ0FBUSxFQUFDLENBQVMsRUFBQyxFQUFFO1lBRWhELElBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFDO2dCQUN4QixJQUFJLENBQUMsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDcEQsSUFBSSxjQUFjLEdBQWUsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxRCxJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSx3QkFBd0IsRUFBQztvQkFDdkMsa0JBQWtCO29CQUNsQixJQUFHLENBQUMsQ0FBQyxFQUFDO3dCQUNGLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsR0FBQyxHQUFHLHdDQUE0QixDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUFDLEdBQUcsRUFBRSxDQUFDO3FCQUM5SDtvQkFDRCxJQUFHLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUM7d0JBQ25DLGlJQUFpSTt3QkFDakksY0FBYyxDQUFDLFNBQVMsR0FBQyxHQUFHLG9EQUF3QyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7cUJBQ25LO3lCQUNHO3dCQUNBLGNBQWMsQ0FBQyxTQUFTLEdBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7cUJBQ2xHO2lCQUNKO3FCQUNHO29CQUNBLGNBQWMsQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDO2lCQUNyQzthQUNKO1FBQ0wsQ0FBQztRQUVPLGtCQUFhLEdBQUMsR0FBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMzQyxJQUFJLENBQWdCLENBQUM7WUFDckIsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1lBQ1IsSUFBSSxRQUFRLEdBQVEsRUFBRSxDQUFDO1lBQ3ZCLGdCQUFnQixDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7WUFDOUIsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBRSxDQUFDLEVBQUM7Z0JBQ3RCLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQztvQkFDbEMsUUFBUSxHQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUNyQixJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxFQUFDO3dCQUNyQixDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbEIsSUFBRyxDQUFDLFlBQVksS0FBSyxFQUFDOzRCQUNsQixDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDOzRCQUNkLENBQUMsR0FBQyxDQUFDLENBQUMsV0FBVyxFQUFHLENBQUM7NEJBQ25CLGdCQUFnQixDQUFDLFNBQVMsSUFBRSxXQUFXLFFBQVEsa0NBQWtDLHVEQUEyQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsYUFBYSxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO3lCQUNyUTt3QkFDRCxJQUFHLENBQUMsWUFBWSxRQUFRLEVBQUM7NEJBQ3JCLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7NEJBQ2QsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs0QkFDZixJQUFHLCtCQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFDO2dDQUN0QixnQkFBZ0IsQ0FBQyxTQUFTLElBQUUsV0FBVyxRQUFRLGtDQUFrQyx1REFBMkMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLGFBQWEsR0FBRyxDQUFDLGlCQUFpQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjOzZCQUMvTjtpQ0FDRztnQ0FDQSxnQkFBZ0IsQ0FBQyxTQUFTLElBQUUsV0FBVyxRQUFRLGtDQUFrQyx1REFBMkMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLGFBQWEsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsY0FBYzs2QkFDcE47eUJBQ0o7cUJBQ0o7aUJBQ0o7Z0JBQ0QsZ0JBQWdCLENBQUMsU0FBUyxJQUFFLFdBQVcscUJBQXFCLGdCQUFnQixDQUFDO2FBQ2hGO1lBQ0QsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDckMsQ0FBQztRQTBDTSx1QkFBa0IsR0FBQyxLQUFLLElBQUUsRUFBRTtZQUMvQixxQkFBcUIsQ0FBQyxTQUFTLEdBQUMsRUFBRSxDQUFDO1lBQ25DLGlCQUFpQixDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7WUFDL0IscUJBQXFCLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsQ0FBQztZQUNOLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsSUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQztnQkFDdEMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLElBQUcsQ0FBQyxJQUFFLFNBQVMsRUFBQztvQkFDWixJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSx3QkFBd0IsRUFBQzt3QkFDdkMsU0FBUztxQkFDWjtvQkFDRCxJQUFHLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUM7d0JBQ2pDLGlCQUFpQixDQUFDLFNBQVMsSUFBRTtzQkFDM0Isb0RBQXdDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDRCQUE0QixDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsRUFDbEcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxLQUFLLENBQUMsQ0FBQyxNQUFNO3FCQUNyRDt5QkFDRzt3QkFDSixpQkFBaUIsQ0FBQyxTQUFTLElBQUU7c0JBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFlBQVk7cUJBQzNFO29CQUNELHFCQUFxQixDQUFDLFNBQVMsSUFBRSxtQkFBbUIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7b0JBQzlFLHFCQUFxQixDQUFDLFNBQVMsSUFBRSxHQUFHLEdBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxHQUFDLElBQUksQ0FBQztpQkFDaEU7cUJBQUk7b0JBQ0QscUJBQXFCLENBQUMsU0FBUyxJQUFFLDRCQUE0QixDQUFDO29CQUM5RCxpQkFBaUIsQ0FBQyxTQUFTLElBQUUsdUNBQXVDLENBQUM7b0JBQ3JFLHFCQUFxQixDQUFDLFNBQVMsSUFBRSxhQUFhLENBQUM7aUJBQ2xEO2FBQ0o7UUFDTCxDQUFDO1FBRU0sd0JBQW1CLEdBQUMsS0FBSyxFQUFDLENBQVEsRUFBQyxFQUFFO1lBQ3hDLElBQUksQ0FBVyxDQUFDO1lBQ2hCLHFCQUFxQixDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7WUFDbkMsaUJBQWlCLENBQUMsU0FBUyxHQUFDLEVBQUUsQ0FBQztZQUMvQixJQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFDO2dCQUNoRCxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsSUFBRyxDQUFDLElBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO29CQUMzQixJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBRSx3QkFBd0IsRUFBQzt3QkFDckMscUJBQXFCLENBQUMsU0FBUyxJQUFFLEdBQUcsR0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEdBQUMsSUFBSSxDQUFDO3FCQUNoRTtvQkFFRCxxQkFBcUIsQ0FBQyxTQUFTLElBQUUsYUFBYSxDQUFDO2lCQUNsRDthQUNKO1lBQ0QsSUFBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUM7Z0JBQ3hCLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBRSx3QkFBd0IsRUFBQztvQkFDckMscUJBQXFCLENBQUMsU0FBUyxJQUFFLEdBQUcsR0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEdBQUMsSUFBSSxDQUFDO2lCQUNoRTthQUNKO1FBQ0wsQ0FBQztRQUVNLG9CQUFlLEdBQUMsS0FBSyxJQUFHLEVBQUU7WUFDN0IsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFFMUIsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUM7Z0JBQ3JCLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7Z0JBQ2hDLHFCQUFxQjtnQkFFckIsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDO29CQUNyQyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM5QyxNQUFNLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDO2lCQUNsRDthQUNKO1FBQ0wsQ0FBQztRQUVPLHVCQUFrQixHQUFDLEtBQUssSUFBRSxFQUFFO1lBQ2hDLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQztZQUNwQixJQUFJLE9BQXNCLENBQUM7WUFDM0IsSUFBSSxVQUFVLEdBQVUsRUFBRSxDQUFDO1lBQzNCLElBQUksY0FBYyxHQUFTLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBRXBELE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsZ0JBQWdCO1lBQzdCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUM7Z0JBQ3BCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDakQ7WUFDRCxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEMsS0FBSSxJQUFJLENBQUMsR0FBRSxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQztnQkFDakIsSUFBRyxDQUFDLEdBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUM7b0JBQ1YsVUFBVSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO29CQUM3QyxJQUFHLGNBQWMsRUFBQzt3QkFDZCxNQUFNLGtCQUFrQixFQUFFLENBQUM7d0JBQzNCLE9BQU8sQ0FBQyxTQUFTLElBQUksMkJBQTJCLENBQUM7d0JBQ2pELFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDckM7aUJBQ0o7Z0JBQ0QsSUFBRyxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsSUFBRSxDQUFDLEVBQUM7b0JBQ1osVUFBVSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO29CQUNuRCxJQUFHLGNBQWMsRUFBQzt3QkFDZCxNQUFNLGtCQUFrQixFQUFFLENBQUM7d0JBQzNCLE9BQU8sQ0FBQyxTQUFTLElBQUksaUNBQWlDLENBQUM7d0JBQ3ZELFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDckM7aUJBQ0o7Z0JBQ0QsSUFBRyxDQUFDLElBQUUsQ0FBQyxFQUFDO29CQUNKLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztvQkFDbEQsSUFBRyxjQUFjLEVBQUM7d0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO3dCQUMzQixPQUFPLENBQUMsU0FBUyxJQUFHLGdDQUFnQyxDQUFDO3dCQUNyRCxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ3JDO2lCQUNKO2FBQ0o7WUFDRCxJQUFHLENBQUMsY0FBYyxFQUFDO2dCQUNmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFO29CQUNsQixPQUFPLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQztnQkFDekIsQ0FBQyxDQUFDO2FBQ0w7UUFFTCxDQUFDO1FBRU0sbUJBQWMsR0FBQyxLQUFLLEVBQUMsQ0FBVyxFQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEdBQVEsRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxHQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQWlCLENBQUM7WUFFdEIsSUFBRyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUUsd0JBQXdCLEVBQUM7Z0JBQ3JDLE9BQU87YUFDVjtZQUNELElBQUksT0FBc0IsQ0FBQztZQUMzQixJQUFJLFVBQVUsR0FBVSxFQUFFLENBQUM7WUFDM0IsSUFBSSxjQUFjLEdBQVMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFFcEQsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEMsT0FBTyxDQUFDLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUM7Z0JBQ3BCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDakQ7WUFDRCxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEMsSUFBRyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBQztnQkFFekQsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRTtvQkFDbEMsSUFBRyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUM7d0JBQ2xCLElBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFDOzRCQUM3RCxPQUFPLENBQUMsQ0FBQzt5QkFDWjtxQkFDSjtvQkFDRCxJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBRSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBQzt3QkFDeEgsT0FBTyxDQUFDLENBQUM7cUJBQ1o7Z0JBQ0wsQ0FBQyxDQUFFLENBQUM7Z0JBQ0osd0RBQXdEO2dCQUN4RCxJQUFHLHlCQUF5QjtvQkFBRSxNQUFNLG9CQUFvQixFQUFFLENBQUM7Z0JBQzNELElBQUcsY0FBYztvQkFBRSxNQUFNLGFBQWEsRUFBRSxDQUFDO2dCQUN6QyxNQUFNLG9CQUFvQixDQUFDLFlBQVksRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN0RyxJQUFHLGNBQWMsRUFBQztvQkFDZCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDM0c7Z0JBQ0QsZUFBZSxDQUFDLFNBQVMsR0FBQyxHQUFHLENBQUMsQ0FBQyxlQUFlLEVBQUUsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUMsS0FBSyxDQUFDLFNBQVM7Z0JBQzFLLGFBQWEsQ0FBQyxTQUFTLEdBQUUsR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQztnQkFDbEQsY0FBYyxDQUFDLFNBQVMsR0FBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDM0YsSUFBRyxjQUFjLEVBQUM7b0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO2lCQUM5QjtnQkFDRCwwQkFBMEI7Z0JBQzFCLFVBQVUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxPQUFPLEVBQUUsK0JBQStCLENBQUM7Z0JBQzNJLElBQUcsY0FBYyxFQUFDO29CQUNkLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQztvQkFDM0IsT0FBTyxDQUFDLFNBQVMsSUFBRyw2QkFBNkIsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQztvQkFDL0ksWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNyQztnQkFDRCxlQUFlLENBQUMsU0FBUyxHQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRSxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLDJCQUEyQixJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssQ0FBQyxTQUFTO2dCQUUzTCxJQUFHLGNBQWMsRUFBQztvQkFDZCxNQUFNLGtCQUFrQixFQUFFLENBQUM7aUJBQzlCO2dCQUNELElBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFFLE1BQU0sRUFBQztvQkFDdkIsSUFBRyxjQUFjLEVBQUM7d0JBQ2QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQzNIO29CQUNELGVBQWUsQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFLEtBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLDRCQUE0QixDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsbUNBQW1DLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUMsS0FBSyxDQUFDLFNBQVM7b0JBQ25NLFVBQVUsQ0FBQyxJQUFJLENBQUMsdUVBQXVFLENBQUMsQ0FBQyxPQUFPLEVBQUUsb0RBQW9ELENBQUM7b0JBQ3ZKLElBQUcsY0FBYyxFQUFDO3dCQUNkLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQzt3QkFDM0IsT0FBTyxDQUFDLFNBQVMsSUFBRyx1RUFBdUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxvREFBb0QsQ0FBQzt3QkFDM0osWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUNyQztvQkFDRCxJQUFHLENBQUMsY0FBYyxFQUFDO3dCQUNmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFOzRCQUNsQixPQUFPLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQzt3QkFDekIsQ0FBQyxDQUFDO3FCQUNMO29CQUNELE1BQU0sUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNuQixrQkFBa0IsRUFBRSxDQUFDO29CQUNyQixNQUFNLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztpQkFDL0I7cUJBQ0c7b0JBQ0EsQ0FBQyxHQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzlELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3JDLENBQUMsR0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDO29CQUM3RDs7d0JBRUk7b0JBQ0osSUFBRyxjQUFjLEVBQUM7d0JBQ2QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQzNIO29CQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsd0RBQXdELENBQUMsQ0FBQyxPQUFPLEVBQUUsbUVBQW1FLHVCQUF1QixjQUFjLENBQUM7b0JBQzVMLElBQUcsY0FBYyxFQUFDO3dCQUNkLE9BQU8sQ0FBQyxTQUFTLElBQUcsd0RBQXdELENBQUMsQ0FBQyxPQUFPLEVBQUUsbUVBQW1FLHVCQUF1QixjQUFjLENBQUM7d0JBQ2hNLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDbEMsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO3FCQUM5QjtvQkFDRCxJQUFHLGNBQWMsRUFBQzt3QkFDZCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRyxDQUFDLENBQUM7cUJBQzlGO29CQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDakIsVUFBVSxDQUFDLElBQUksQ0FBQyx3REFBd0QsQ0FBQyxDQUFDLE9BQU8sRUFBRSw2Q0FBNkMsZ0NBQW9CLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRyxDQUFDLEdBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUcsR0FBQyxHQUFHLE1BQU0sQ0FBQztvQkFDdk0sSUFBRyxjQUFjLEVBQUM7d0JBQ2QsT0FBTyxDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7d0JBQ3JCLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFOzRCQUNsQixPQUFPLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQzt3QkFDekIsQ0FBQyxDQUFDO3dCQUNGLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDbEMsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO3FCQUM5QjtvQkFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLHNEQUFzRCxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7b0JBQ3JGLElBQUcsY0FBYyxFQUFDO3dCQUNkLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQzt3QkFDM0IsT0FBTyxDQUFDLFNBQVMsSUFBRyxzREFBc0QsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO3dCQUN6RixZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ3JDO29CQUVELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO29CQUMxQixjQUFjLENBQUMsU0FBUyxHQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7b0JBQ2pDLElBQUcsY0FBYyxFQUFDO3dCQUNkLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO3FCQUN0RztvQkFDRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksQ0FBQyxDQUFDO29CQUM1QyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztvQkFDaEMsSUFBRyxjQUFjLEVBQUM7d0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO3dCQUMzQixPQUFPLENBQUMsU0FBUyxJQUFHLGVBQWUsQ0FBQzt3QkFDcEMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUNyQztvQkFDRCxJQUFHLENBQUMsY0FBYyxFQUFDO3dCQUNmLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFOzRCQUNsQixPQUFPLENBQUMsU0FBUyxJQUFFLENBQUMsQ0FBQzt3QkFDekIsQ0FBQyxDQUFDO3FCQUNMO2lCQUNKO2dCQUNELFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDbEMsSUFBRyxjQUFjLEVBQUM7b0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO2lCQUM5QjtnQkFDRCxJQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBQyxFQUFFLDRDQUE0QztvQkFDakUsTUFBTSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3RCO2FBQ0o7UUFFTCxDQUFDO1FBRU8sY0FBUyxHQUFDLEtBQUssRUFBQyxTQUFpQixFQUFDLEVBQUU7WUFDeEMsSUFBSSxLQUFlLENBQUM7WUFDcEIsSUFBSSxFQUFjLENBQUM7WUFDbkIsT0FBTyxHQUFDLFNBQVMsQ0FBQztZQUNsQixJQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBQztnQkFDMUIsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDO29CQUN2QyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLGVBQWUsQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7b0JBQy9ELElBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO3dCQUN4QixLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsRUFBRSxHQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUN4RCxNQUFNLG9CQUFvQixDQUFDLFdBQVcsRUFBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUU1RSxJQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBRSxtQkFBbUIsRUFBQzs0QkFDcEMsSUFBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7Z0NBQUMsTUFBTSxhQUFhLEVBQUUsQ0FBQzs0QkFDbEQsU0FBUzt5QkFDWjs2QkFDRzs0QkFDQSxJQUFHLGdCQUFnQixJQUFJLGdCQUFnQixHQUFDLENBQUMsSUFBSSx3QkFBd0IsSUFBRSxrQkFBa0I7Z0NBQUUsTUFBTSxRQUFRLENBQUMsSUFBSSxHQUFDLENBQUMsZ0JBQWdCLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDdkksSUFBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBQztnQ0FDeEIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzZCQUN6Rjs0QkFDRCxJQUFJLENBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQzs0QkFDbkIsZUFBZSxDQUFDLFNBQVMsR0FBQyxHQUFHLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxFQUFFLENBQUM7NEJBQ25FLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO3lCQUN4Qzt3QkFDRCxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFFckM7b0JBQ0QsSUFBRyx5QkFBeUI7d0JBQUUsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2pELElBQUcsQ0FBQyxPQUFPO3dCQUFDLE1BQU0sYUFBYSxFQUFFLENBQUM7b0JBQ2xDLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUM7d0JBQ3BCLE1BQU0sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNyQjtpQkFDSjtnQkFFRCxnQkFBZ0IsQ0FBQyxTQUFTLElBQUksbUhBQW1ILENBQUM7Z0JBRWxKLElBQUksQ0FBQyxnQkFBZ0IsR0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDL0MsTUFBTSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQzdCLE1BQU0sWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxpQkFBaUIsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0wsQ0FBQztRQUVPLDJCQUFzQixHQUFDLEtBQUssRUFBQyxDQUFRLEVBQUMsRUFBRTtZQUM1QyxJQUFJLENBQVEsQ0FBQztZQUNiLElBQUksRUFBVyxDQUFDO1lBQ2hCLElBQUksQ0FBVyxDQUFDO1lBQ2hCLElBQUksT0FBc0IsQ0FBQztZQUMzQixJQUFJLFVBQVUsR0FBVSxFQUFFLENBQUM7WUFDM0IsSUFBSSxjQUFjLEdBQVMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEQsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBRSxDQUFDLEVBQUM7Z0JBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzVHO1lBQ0QsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEMsT0FBTyxDQUFDLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO1lBQ3ZELE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUM7Z0JBQ3BCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDakQ7WUFDRCxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEMsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsRUFBRSxHQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzFCLFVBQVUsQ0FBQyxJQUFJLENBQUMsK0VBQStFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLCtEQUErRCxDQUFDLENBQUM7WUFDeEwsK0xBQStMO1lBQy9MLElBQUcsY0FBYyxFQUFDO2dCQUNkLE9BQU8sQ0FBQyxTQUFTLElBQUksK0VBQStFLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLCtEQUErRCxDQUFDO2FBQy9MO1lBRUQsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUM7Z0JBQ3hCLENBQUMsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNQLElBQUcsY0FBYyxFQUFDO29CQUNkLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQztpQkFDOUI7Z0JBQ0QsSUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFDO29CQUNuQixNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7aUJBQ3hDO2dCQUNELElBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBQztvQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO29CQUNwQyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQ3JDLGtCQUFrQixFQUFFLENBQUM7b0JBQ3JCLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUMvQixJQUFHLGNBQWMsRUFBQzt3QkFDZCxPQUFPLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUM7cUJBQ3RDO3lCQUNHO3dCQUNBLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFOzRCQUNsQixPQUFPLENBQUMsU0FBUyxJQUFHLENBQUMsQ0FBQzt3QkFDMUIsQ0FBQyxDQUFDLENBQUM7cUJBQ047b0JBQ0QsVUFBVSxDQUFDLFNBQVMsRUFBQyxTQUFTLENBQUMsQ0FBQztvQkFDaEMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNsQyxNQUFNLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztpQkFDL0I7cUJBQUk7b0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBRS9CLElBQUcsY0FBYyxFQUFDO3dCQUVkLE9BQU8sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQztxQkFDdEM7b0JBQ0QsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNyQztnQkFDRCxJQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsRUFBQztvQkFFbkMsSUFBRyxjQUFjLEVBQUM7d0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO3dCQUMzQixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7d0JBQ2hFLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7d0JBQ25DLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQzt3QkFDM0IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFFLENBQUMsQ0FBQztxQkFDdEg7b0JBRUQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2lCQUN4QjtnQkFDRCxJQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDO29CQUNMLElBQUcsRUFBRSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUM7d0JBQzVCLElBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFFLEtBQUssRUFBQzs0QkFDckMsNkJBQTZCOzRCQUM3QixJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFDO3lCQUN4Qzs2QkFDSSxJQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBRSxFQUFFLEVBQUM7NEJBQ3ZCLDhGQUE4Rjs0QkFDOUYsY0FBYyxDQUFDLFNBQVMsR0FBRTs4QkFDcEIsb0RBQXdDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDRCQUE0QixDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsRUFBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssQ0FBQyxDQUFDOzZCQUM5SSxDQUFDOzRCQUVOLElBQUcsY0FBYyxFQUFDO2dDQUNkLE1BQU0sa0JBQWtCLEVBQUUsQ0FBQztnQ0FDM0IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7NkJBQ3ZGOzRCQUNELDZCQUE2Qjs0QkFDN0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsQ0FBQzt5QkFDeEM7cUJBQ0o7aUJBQ0o7YUFDSjtZQUNELElBQUcsQ0FBQyxjQUFjLEVBQUM7Z0JBQ2YsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUU7b0JBQ2xCLE9BQU8sQ0FBQyxTQUFTLElBQUcsQ0FBQyxDQUFDO2dCQUMxQixDQUFDLENBQUMsQ0FBQzthQUNOO1lBQ0QsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBQztnQkFDekMsSUFBRyxjQUFjLEVBQUM7b0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO29CQUMzQixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7aUJBQzVIO2dCQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFDckIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsQ0FBQzthQUN4QztpQkFDSSxJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBRSw4QkFBOEIsRUFBQztnQkFDaEQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsQ0FBQzthQUN4QztpQkFDRztnQkFDQSxJQUFHLGNBQWMsRUFBQztvQkFDZCxNQUFNLGtCQUFrQixFQUFFLENBQUM7b0JBQzNCLElBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFFLEtBQUssRUFBQzt3QkFDckMsc0JBQXNCO3dCQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7d0JBQzFCLElBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUM7NEJBQzFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO3lCQUNoRjt3QkFDRCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7cUJBQzNFOzt3QkFDSSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7aUJBRXBHO2dCQUNELGFBQWEsQ0FBQyxTQUFTLEdBQUUsR0FBRyx3Q0FBNEIsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQzlFO1lBQ0QsSUFBRyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUMsRUFBRSw0Q0FBNEM7Z0JBQ2pFLE1BQU0sUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3RCO1lBRUQsSUFBRyxjQUFjLEVBQUM7Z0JBQ2QsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO2FBQzlCO1lBRUQsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFN0IsQ0FBQyxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sSUFBSSxDQUFDLGlDQUFpQyxFQUFFLENBQUM7WUFFL0MsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsRUFBQyxJQUFHLEdBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sR0FBQyxDQUFDLENBQUMsQ0FBWSxFQUFDLEVBQUU7Z0JBQ3pFLElBQUcsQ0FBQyxlQUFlLEVBQUM7b0JBQ2hCLDhCQUE4QixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUMsRUFBRSxFQUFDLElBQUcsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ25HO1lBQ0wsQ0FBQyxDQUFDO1FBQ04sQ0FBQztRQStDTyxzQkFBaUIsR0FBQyxHQUFVLEVBQUU7WUFDbEMsSUFBSSxDQUFDLEdBQUMsS0FBSyxDQUFDO1lBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFO2dCQUN2QixJQUFHLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUM7b0JBQ25DLENBQUMsR0FBQyxJQUFJLENBQUM7aUJBQ1Y7Z0JBQ0QsSUFBRyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUM7b0JBQ2xCLENBQUMsR0FBQyxJQUFJLENBQUM7aUJBQ1Y7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQztRQUNPLDZCQUF3QixHQUFDLENBQUMsQ0FBUSxFQUFTLEVBQUU7WUFDakQsSUFBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUM7Z0JBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDekIsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFDTSxpQkFBWSxHQUFDLEtBQUssRUFBRSxDQUFVLEVBQUMsRUFBRTtZQUNwQyxJQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFDO2dCQUN4QixNQUFNLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN0QjtZQUNELEtBQUksSUFBSSxDQUFDLFdBQVcsRUFBQyxJQUFJLENBQUMsV0FBVyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFDO2dCQUM5RCxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUUsQ0FBQyxFQUFDO29CQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztvQkFDdkMsSUFBSSxDQUFDLFdBQVcsSUFBRSxDQUFDLENBQUM7b0JBQ3BCLE1BQU07aUJBQ1Q7YUFDSjtRQUNMLENBQUM7UUFFTSxxQkFBZ0IsR0FBQyxDQUFDLENBQVEsRUFBQyxFQUFFO1lBQ2pDLFFBQU8sQ0FBQyxFQUFDO2dCQUNKLEtBQUssQ0FBQztvQkFDRixnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDN0IsVUFBVSxDQUFDLFNBQVMsRUFBQyxVQUFVLENBQUMsQ0FBQztvQkFDakMsTUFBTTtnQkFDVixLQUFLLENBQUM7b0JBQ0YsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzdCLFVBQVUsQ0FBQyxTQUFTLEVBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ2pDLE1BQU07Z0JBRVYsS0FBSyxDQUFDO29CQUNGLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM3QixVQUFVLENBQUMsVUFBVSxFQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNsQyxNQUFNO2dCQUNWLEtBQUssQ0FBQztvQkFDRixnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDN0IsVUFBVSxDQUFDLFNBQVMsRUFBQyxVQUFVLENBQUMsQ0FBQztvQkFDakMsTUFBTTtnQkFDVixLQUFLLENBQUM7b0JBQ0YsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzdCLFVBQVUsQ0FBQyxTQUFTLEVBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ2pDLE1BQU07Z0JBQ1YsS0FBSyxDQUFDO29CQUNGLE1BQU07Z0JBQ1Y7b0JBQ0ksTUFBTTthQUNiO1FBQ0wsQ0FBQztRQWdCTSxpQkFBWSxHQUFDLEtBQUssSUFBRSxFQUFFO1lBQ3pCLElBQUcsZUFBZSxJQUFJLGdCQUFnQixJQUFJLGNBQWM7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBQ3pHLElBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO2dCQUMxQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsTUFBTSxJQUFJLENBQUMsaUNBQWlDLEVBQUUsQ0FBQztnQkFDL0MsaUJBQWlCLEVBQUUsQ0FBQztnQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEM7aUJBQ0c7Z0JBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUMzQjtRQUNMLENBQUM7UUFDTSxlQUFVLEdBQUMsS0FBSyxJQUFFLEVBQUU7WUFDdkIsSUFBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUM7Z0JBRXRCLElBQUcsY0FBYyxJQUFJLGVBQWUsRUFBQztvQkFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO29CQUNoRSxPQUFPO2lCQUNWO2dCQUNELElBQUcsZ0JBQWdCLEVBQUM7b0JBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztvQkFDcEQsT0FBTztpQkFDVjtnQkFDRCxJQUFHLENBQUMsZ0JBQWdCLEVBQUM7b0JBQ2pCLE1BQU0sbUJBQW1CLEVBQUUsQ0FBQztvQkFDNUIsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQzdCO3FCQUNHO29CQUNBLElBQUcsZUFBZSxFQUFDO3dCQUNmLE1BQU0sb0JBQW9CLEVBQUUsQ0FBQztxQkFDaEM7eUJBQ0c7d0JBQ0EsTUFBTSxxQkFBcUIsRUFBRSxDQUFDO3FCQUNqQztpQkFDSjthQUNSO2lCQUFJO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDM0I7UUFDTCxDQUFDO1FBRU0sVUFBSyxHQUFDLEdBQUUsRUFBRTtZQUNiLG9CQUFvQixFQUFFLENBQUM7UUFDM0IsQ0FBQztRQUVNLFVBQUssR0FBQyxHQUFFLEVBQUU7WUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbkMsQ0FBQztRQUVNLFVBQUssR0FBQyxLQUFLLElBQUUsRUFBRTtZQUNsQixJQUFHLENBQUMsZ0JBQWdCLEVBQUM7Z0JBQ2pCLG1CQUFtQixFQUFFLENBQUM7Z0JBQ3RCLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUMxQixNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2FBQ3RDO1FBQ0wsQ0FBQztRQUVNLHNCQUFpQixHQUFDLEtBQUssSUFBRSxFQUFFO1lBQzlCLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDdkMsQ0FBQztRQUVELG9CQUFlLEdBQUMsQ0FBQyxDQUFVLEVBQUMsRUFBRTtZQUMxQixJQUFJLENBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBRUQsd0JBQW1CLEdBQUMsQ0FBQyxDQUFVLEVBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsWUFBWSxHQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBQ00sc0JBQWlCLEdBQUMsR0FBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzFELENBQUM7UUFFTSxxQkFBZ0IsR0FBRSxHQUFFLEVBQUU7WUFDekIsSUFBRztnQkFDQyxvQkFBb0IsRUFBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsR0FBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDdEQsSUFBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLElBQUUsUUFBUSxFQUFDO29CQUMxQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFDLFNBQVMsQ0FBQztpQkFDcEQ7cUJBQ0c7b0JBQ0EscUJBQXFCLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBQyxRQUFRLENBQUM7aUJBQ25EO2FBQ0o7WUFBQSxPQUFNLENBQUMsRUFBQztnQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xCO1FBQ0wsQ0FBQztRQUNNLG9CQUFlLEdBQUMsR0FBRSxFQUFFO1lBQ3ZCLElBQUc7Z0JBQ0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2dCQUNwQyxzREFBc0Q7Z0JBQ3RELG1CQUFtQixDQUFDLG1CQUFtQixFQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUMvRCxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDN0QsbUJBQW1CLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDNUMsMENBQTBDO2dCQUMxQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUMsd0JBQXdCLENBQUMsQ0FBQztnQkFDdEQsaURBQWlEO2dCQUNqRCxtQkFBbUIsQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN4QywrQkFBK0IsRUFBRSxDQUFDO2dCQUNsQyxpRUFBaUU7YUFDcEU7WUFBQSxPQUFNLENBQUMsRUFBQztnQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xCO1FBQ0wsQ0FBQztRQTcwQkcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFxSU8scUJBQXFCO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQyxJQUFJLENBQWdCLENBQUM7UUFDckIsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ1IsSUFBSSxRQUFRLEdBQVEsRUFBRSxDQUFDO1FBQ3ZCLGdCQUFnQixDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7UUFFOUIsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBRSxDQUFDLEVBQUM7WUFDdEIsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFDO2dCQUNsQyxJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUUsSUFBSSxFQUFDO29CQUNyQixDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsSUFBRyxDQUFDLElBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFDO3dCQUN4QixJQUFHLENBQUMsWUFBWSxLQUFLLEVBQUM7NEJBQ2xCLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7NEJBQ2QsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUcsQ0FBQzs0QkFDbkIsZ0JBQWdCLENBQUMsU0FBUyxJQUFFLG9DQUFvQyx1REFBMkMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCLDJCQUEyQixpQkFBaUIsQ0FBQzt5QkFDekw7d0JBQ0QsTUFBTTtxQkFDVDtvQkFDRCxJQUFHLENBQUMsWUFBWSxLQUFLLEVBQUM7d0JBQ2xCLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7d0JBQ2QsQ0FBQyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUcsQ0FBQzt3QkFDbkIsZ0JBQWdCLENBQUMsU0FBUyxJQUFFLG9DQUFvQyx1REFBMkMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO3FCQUM3TTtvQkFDRCxJQUFHLENBQUMsWUFBWSxRQUFRLEVBQUM7d0JBQ3JCLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7d0JBQ2QsQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFDZixJQUFHLCtCQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFDOzRCQUN0QixnQkFBZ0IsQ0FBQyxTQUFTLElBQUUsb0NBQW9DLHVEQUEyQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTzt5QkFDdks7NkJBQ0c7NEJBQ0EsZ0JBQWdCLENBQUMsU0FBUyxJQUFFLG9DQUFvQyx1REFBMkMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPO3lCQUM1SjtxQkFDSjtpQkFDSjthQUNKO1lBQ0QsZ0JBQWdCLENBQUMsU0FBUyxJQUFFLHdCQUF3QixxQkFBcUIsaUJBQWlCLENBQUM7U0FDOUY7UUFDRCxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBK2JPLGlCQUFpQixDQUFDLENBQVEsRUFBQyxDQUFTO1FBQ3hDLElBQUksQ0FBVyxDQUFDO1FBRWhCLElBQUksSUFBVyxFQUFDLEdBQVUsRUFBQyxDQUFDLEdBQVEsRUFBRSxDQUFDO1FBQ3ZDLElBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFDO1lBQ3hCLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQztnQkFDbEIsSUFBRyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUM7b0JBQ2xCLENBQUMsR0FBRyxHQUFHLEdBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEdBQUMsR0FBRyxDQUFDO2lCQUNwQztxQkFDSSxJQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxFQUFDO29CQUMvQyxDQUFDLEdBQUcsR0FBRyxHQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsR0FBQyxHQUFHLENBQUM7aUJBQ2pDO3FCQUNJLElBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUM7b0JBQzlDLENBQUMsR0FBRyxHQUFHLEdBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxHQUFDLEdBQUcsQ0FBQztpQkFDaEM7YUFDSjtTQUNKO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFFYixDQUFDO0lBRU0sdUJBQXVCLENBQUMsQ0FBUSxFQUFDLENBQVM7UUFDN0MsSUFBSSxDQUFXLENBQUM7UUFDaEIsSUFBSSxJQUFXLEVBQUMsR0FBVSxFQUFDLENBQUMsR0FBUSxFQUFFLENBQUM7UUFDdkMsSUFBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUM7WUFDeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsSUFBSSxHQUFHLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMzQixHQUFHLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDRCQUE0QixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztZQUM5RCxJQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUM7Z0JBQ2xCLElBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFDO29CQUNsQixDQUFDLEdBQUcsR0FBRyxHQUFDLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFDLEdBQUcsQ0FBQztpQkFDcEM7cUJBQ0ksSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBQztvQkFDL0MsQ0FBQyxHQUFHLEdBQUcsR0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLEdBQUMsR0FBRyxDQUFDO2lCQUNqQztxQkFDSSxJQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFDO29CQUM5QyxDQUFDLEdBQUcsR0FBRyxHQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsR0FBQyxHQUFHLENBQUM7aUJBQ2hDO2FBQ0o7WUFDRCxPQUFPLElBQUksR0FBQyxJQUFJLEdBQUMsR0FBRyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUErREQsWUFBWTtRQUNSLElBQUcsT0FBTztZQUFDLE9BQU8sS0FBSyxDQUFDO1FBRXhCLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixJQUFFLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0lBQ3hELENBQUM7SUFDRCxpQkFBaUI7UUFDYixJQUFHLE9BQU87WUFBQyxPQUFPLEtBQUssQ0FBQztRQUV4QixPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsSUFBRSxDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRU8saUNBQWlDO1FBQ3JDLGNBQWMsQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDO1FBQ2xDLGVBQWUsQ0FBQyxTQUFTLEdBQUMsUUFBUSxDQUFDO0lBQ3ZDLENBQUM7Q0EwR0o7OztBQy80QjJHO0FBQ0M7QUFDdEQ7QUFDQztBQUNKO0FBRTdDLE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRTtJQUMvQjs2REFDeUQ7SUFDekQsSUFBSSxrQkFBa0IsR0FBRyxLQUFLO0lBQzlCLElBQUc7UUFDQyxJQUFHLFNBQVMsSUFBRSxJQUFJLElBQUksVUFBVSxJQUFFLElBQUksRUFBQztZQUNuQyxrQkFBa0IsR0FBRztnQkFDakIsSUFBRyxlQUFlO29CQUFFLE9BQU87Z0JBQzNCLElBQUksTUFBTSxHQUFHLGtCQUFrQjtnQkFDL0Isa0JBQWtCLEdBQUcsS0FBSztnQkFDMUIsSUFBSSxNQUFNO29CQUFFLE9BQU07Z0JBRWxCLGtCQUFrQixHQUFHLElBQUk7Z0JBQ3pCLElBQUcsU0FBUyxJQUFFLElBQUksSUFBSSxVQUFVLElBQUUsSUFBSSxFQUFDO29CQUNuQyxvQkFBb0IsR0FBQyxtQkFBbUIsQ0FBQztpQkFDNUM7WUFDTCxDQUFDO1lBQ0QsbUJBQW1CLEdBQUc7Z0JBQ2xCLDZEQUE2RDtnQkFDN0QsSUFBRyxlQUFlO29CQUFFLE9BQU87Z0JBRTNCLElBQUksTUFBTSxHQUFHLGtCQUFrQjtnQkFDL0Isa0JBQWtCLEdBQUcsS0FBSztnQkFDMUIsSUFBSSxNQUFNO29CQUFFLE9BQU07Z0JBRWxCLGtCQUFrQixHQUFHLElBQUk7Z0JBQ3pCLElBQUcsU0FBUyxJQUFFLElBQUksSUFBSSxVQUFVLElBQUUsSUFBSSxFQUFDO29CQUNuQzs7d0JBRUk7b0JBQ0osbUJBQW1CLEdBQUMsb0JBQW9CLENBQUM7aUJBQzVDO1lBQ0wsQ0FBQztTQUNKOztZQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztLQUV2RTtJQUFBLE9BQU0sQ0FBQyxFQUFDO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsQjtBQUNMLENBQUM7QUFDTSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDO0FBQ3RDLE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdDLElBQUksYUFBYSxHQUFVLEtBQUssQ0FBQztBQWlCeEMsTUFBTSxrQkFBa0IsR0FBQyxHQUFFLEVBQUU7SUFDekIsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQztJQUNwQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELElBQUcsSUFBSSxJQUFFLElBQUksSUFBSSxLQUFLLElBQUcsSUFBSSxFQUFDO1FBQzFCLElBQUcsQ0FBQyxZQUFZLEVBQUM7WUFDYixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7YUFDNUI7aUJBQU0sSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxZQUFZO2dCQUNuRCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQzthQUNsQztpQkFBTSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLFVBQVU7Z0JBQzdDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2FBQzlCO1lBQ0QsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsWUFBWSxHQUFFLElBQUksQ0FBQztTQUN0QjthQUNHO1lBQ0EsSUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFO2dCQUN6QixRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDN0I7aUJBQU0sSUFBSSxRQUFRLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ3RDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2FBQ25DO2lCQUFNLElBQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFO2dCQUNsQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzthQUMvQjtZQUNELEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLFlBQVksR0FBQyxLQUFLLENBQUM7U0FDdEI7S0FDSjtJQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUEyQkU7QUFDTixDQUFDO0FBQ0QsTUFBTSxpQkFBaUIsR0FBQyxHQUFFLEVBQUU7SUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVoRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXBELENBQUM7QUFDRCxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDcEIsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBd0IsQ0FBQztJQUNoRixJQUFHLFFBQVEsSUFBRSxJQUFJLEVBQUM7UUFDZCxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDakQ7QUFDTCxDQUFDO0FBQ0QsTUFBTSxrQ0FBa0MsR0FBRyxHQUFHLEVBQUU7SUFDNUMsSUFBSSxtQkFBbUIsR0FBRyxLQUFLLENBQUM7SUFDaEMsa0RBQWtEO0lBQ2xELGdEQUFnRDtJQUNoRCxJQUFHO1FBQ0MsSUFBRyx1QkFBdUIsSUFBRSxJQUFJLElBQUkscUJBQXFCLElBQUUsSUFBSSxFQUFDO1lBQzVELGdDQUFnQyxHQUFHO2dCQUMvQixJQUFJLE1BQU0sR0FBRyxtQkFBbUI7Z0JBQ2hDLG1CQUFtQixHQUFHLEtBQUs7Z0JBQzNCLElBQUksTUFBTTtvQkFBRSxPQUFNO2dCQUVsQixtQkFBbUIsR0FBRyxJQUFJO2dCQUMxQiwrQkFBK0IsR0FBQyxpQ0FBaUMsQ0FBQztZQUV0RSxDQUFDO1lBQ0QsOEJBQThCLEdBQUc7Z0JBQzdCLElBQUksTUFBTSxHQUFHLG1CQUFtQjtnQkFDaEMsbUJBQW1CLEdBQUcsS0FBSztnQkFDM0IsSUFBSSxNQUFNO29CQUFFLE9BQU07Z0JBRWxCLG1CQUFtQixHQUFHLElBQUk7Z0JBQzFCLGlDQUFpQyxHQUFDLCtCQUErQixDQUFDO1lBQ3RFLENBQUM7U0FDSjs7WUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7S0FFaEc7SUFBQSxPQUFNLENBQUMsRUFBQztRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7QUFDTCxDQUFDO0FBQ00sTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQUUsQ0FBTSxFQUFFLEVBQUU7SUFDaEQsSUFBSSxFQUFTLENBQUM7SUFDZCxJQUFHLENBQUMsQ0FBQyxNQUFNLFlBQVksV0FBVyxFQUFDO1FBQy9CLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hDLEVBQUUsR0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxtQkFBbUI7UUFDbkIsVUFBVSxDQUFDLEVBQUUsR0FBQyxRQUFRLEVBQUMsYUFBYSxDQUFDLENBQUM7UUFDdEMsVUFBVSxDQUFDLEVBQUUsR0FBQyxTQUFTLEVBQUMsYUFBYSxDQUFDLENBQUM7S0FFMUM7SUFDRDtRQUNJO0lBQ0osT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sV0FBVyxHQUFHLEdBQUcsRUFBRTtJQUNyQixJQUFJLEtBQUssR0FBVSxhQUFhLEtBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUM5RCxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsSUFBSyxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBRW5ELENBQUM7QUFFRCxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUM7QUFDNUIsSUFBSSxZQUFZLEdBQVcsS0FBSyxDQUFDO0FBRWpDLElBQUksQ0FBQyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFFNUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLEtBQUssSUFBRyxFQUFFO0lBQ2xELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsS0FBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsR0FBRyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELGFBQWEsR0FBQyxJQUFJLENBQUM7SUFDbkIsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUMsR0FBRSxFQUFFO0lBQ25CLElBQUksRUFBRSxHQUFVO1FBQ1osV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDNUIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDN0IsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDOUIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDOUIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDL0IsV0FBVyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDaEMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7S0FDcEMsQ0FBQztJQUNGLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFFLFFBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBQ0QsTUFBTyxJQUFJLEdBQUUsS0FBSyxJQUFHLEVBQUU7SUFDbkIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3BCLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLG1CQUFtQixDQUFDLFlBQVksRUFBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3RELDJCQUEyQixDQUFDLFlBQVksRUFBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzlELG1CQUFtQixDQUFDLE9BQU8sRUFBQyxXQUFXLENBQUMsQ0FBQztJQUN6QyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0Msa0NBQWtDLEVBQUUsQ0FBQztJQUNyQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNuRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLGtCQUFrQjtBQUN0QixDQUFDO0FBQ0QsSUFBSSxFQUFFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQmFja2VuZC9NYW5pcHVsYXRvci50cz9iMWE0Iiwid2VicGFjazovL2Fzc2VtYmxlci8uL3NyYy9CYWNrZW5kL0xhYmVsLnRzPzExNTciLCJ3ZWJwYWNrOi8vYXNzZW1ibGVyLy4vc3JjL0JhY2tlbmQvQ29uc3RhbnQudHM/YTZmYyIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQmFja2VuZC9TeW1ib2xMaXN0LnRzPzM1OTUiLCJ3ZWJwYWNrOi8vYXNzZW1ibGVyLy4vc3JjL0JhY2tlbmQvRW51bXMudHM/YzE2MCIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQmFja2VuZC9JbnB1dExpbmUudHM/MmNhMSIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQmFja2VuZC9NbmVtb0NvbW1hbmQudHM/NDg3MiIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQmFja2VuZC9TdHJpbmdDb25zdHJ1Y3Rvci50cz85NjkzIiwid2VicGFjazovL2Fzc2VtYmxlci8uL3NyYy9CYWNrZW5kL0NvbW1hbmRNYXAudHM/NGI5YyIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQmFja2VuZC9JbnB1dExpbmVDb250cm9sLnRzPzg2YzAiLCJ3ZWJwYWNrOi8vYXNzZW1ibGVyLy4vc3JjL1Rvb2xzLnRzPzFmN2MiLCJ3ZWJwYWNrOi8vYXNzZW1ibGVyLy4vc3JjL0FuaW1hdGlvblV0aWwudHM/OGFkOSIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvSW5wdXRXaW5kb3cudHM/MGNkMyIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvQW5pbWF0b3IudHM/ODgxOCIsIndlYnBhY2s6Ly9hc3NlbWJsZXIvLi9zcmMvUHJvamVjdFdpbmRvdy50cz9mMzRjIiwid2VicGFjazovL2Fzc2VtYmxlci8uL3NyYy9pbmRleC50cz9mZmI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBlcmxhdWJ0ZUzDpG5nZUxfQzpudW1iZXI9IDg7XHJcbmV4cG9ydCBjb25zdCBlcmxhdWJ0ZUzDpG5nZU1ORU1POm51bWJlcj00O1xyXG5leHBvcnQgY29uc3Qgc3BlaWNoZXJhYmJpbGRMOm51bWJlciA9IDE2O1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNYW5pcHVsYXRvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuICAgIHN0YXRpYyBiaW5Ub0hleCA9IChhZGRyOnN0cmluZyk6c3RyaW5nICA9PntcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoYWRkciwyKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKStcImhcIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBkZWNUb0hleD0gKGFkZHI6c3RyaW5nKTpzdHJpbmcgPT57XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChhZGRyLDEwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKStcImhcIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBoZXhUb0RlYz0oYWRkcjpzdHJpbmcpOm51bWJlciA9PntcclxuICAgICAgICAgICAgYWRkcj1hZGRyLnJlcGxhY2UoL2gkL2csXCJcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIocGFyc2VJbnQoYWRkciwxNikudG9TdHJpbmcoMTApKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzbGljZVN0cmluZyhzMTpzdHJpbmcsczI6c3RyaW5nKTpzdHJpbmdbXXtcclxuICAgICAgICBsZXQgbjpudW1iZXIscDpudW1iZXI7XHJcbiAgICAgICAgbj1zMS5pbmRleE9mKHMyKTtcclxuICAgICAgICBwPXMyLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gW3MxLnN1YnN0cmluZygwLG4pLHMxLnN1YnN0cmluZyhuK3ApXTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzcGxpdFN0cmluZ0hhbGYoYWRkcjpzdHJpbmcsY2g6c3RyaW5nKTpzdHJpbmdbXXtcclxuICAgICAgICBsZXQgcmVTdHJpbmc6c3RyaW5nW109W107XHJcbiAgICAgICAgbGV0IHA6bnVtYmVyID1hZGRyLmluZGV4T2YoY2gpO1xyXG4gICAgICAgIGlmKHAhPS0xICYmIHAhPXVuZGVmaW5lZCl7IFxyXG4gICAgICAgICAgICByZVN0cmluZ1swXSA9IGFkZHIuc2xpY2UoMCxwKS50cmltKCk7XHJcbiAgICAgICAgICAgIHJlU3RyaW5nWzFdID0gYWRkci5zbGljZShwKzEpLnRyaW0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZVN0cmluZ1swXT1hZGRyO1xyXG4gICAgICAgIHJldHVybiByZVN0cmluZztcclxuICAgIH1cclxuICAgIHN0YXRpYyBzcGxpdFN0cmluZ0hhbGZVbmZpbHRlcmVkKHM6c3RyaW5nLGNoOnN0cmluZyk6c3RyaW5nW117XHJcbiAgICAgICAgbGV0IHJlU3RyaW5nOnN0cmluZ1tdPVtdO1xyXG4gICAgICAgIGxldCBwOm51bWJlciA9cy5pbmRleE9mKGNoKTtcclxuICAgICAgICBpZihwIT0tMSAmJiBwIT11bmRlZmluZWQpeyBcclxuICAgICAgICAgICAgcmVTdHJpbmdbMF0gPSBzLnNsaWNlKDAscCkudHJpbSgpO1xyXG4gICAgICAgICAgICByZVN0cmluZ1sxXSA9IHMuc2xpY2UocCsxKTtcclxuICAgICAgICAgICAgaWYocmVTdHJpbmdbMV0udHJpbSgpIT1cIiBcInx8cmVTdHJpbmdbMV0udHJpbSgpIT1cIlwiKXtcclxuICAgICAgICAgICAgICAgIHJlU3RyaW5nWzFdPXJlU3RyaW5nWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJlU3RyaW5nWzBdPXM7XHJcbiAgICAgICAgcmV0dXJuIHJlU3RyaW5nO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzSGV4KGFkZHI6c3RyaW5nKTpib29sZWFueyAgICBcclxuICAgICAgICBpZihhZGRyLmVuZHNXaXRoKFwiaFwiKXx8YWRkci5lbmRzV2l0aChcIkhcIikpe1xyXG4gICAgICAgICAgICBhZGRyPWFkZHIucmVwbGFjZSgvaCQvaSxcIlwiKTtcclxuICAgICAgICAgICAgLy8gYWRkciA9YWRkci5yZXBsYWNlKC9eMHsxLH0vLCcwJyk7XHJcbiAgICAgICAgICAgIGlmKGFkZHI9PVwiXCIpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCEvW14wLTlBLUZdL2kudGVzdChhZGRyKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNEZWMoYWRkcjpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICAgICAgaWYoYWRkcj09XCJcIil7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIS9bXjAtOV0vLnRlc3QoYWRkcikpe1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNEYXRfOChhZGRyOnN0cmluZyk6Ym9vbGVhbntcclxuICAgICAgICAvLyBhZGRyID1hZGRyLnJlcGxhY2UoL14wKy8sJycpO1xyXG4gICAgICAgIGFkZHIgPWFkZHIucmVwbGFjZSgvXjB7MSx9LywnMCcpO1xyXG4gICAgICAgIGlmKGFkZHI9PVwiXCIpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuaXNEZWMoYWRkcikpe1xyXG4gICAgICAgICAgICBpZih0aGlzLmRlY1RvSGV4KGFkZHIpLmxlbmd0aDw9Myl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLmlzSGV4KGFkZHIpKXtcclxuICAgICAgICAgICAgd2hpbGUoYWRkci5zdGFydHNXaXRoKCcwJykgJiYgYWRkci5sZW5ndGg+Myl7XHJcbiAgICAgICAgICAgICAgICBhZGRyPSBhZGRyLnJlcGxhY2UoL14wLywnJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihhZGRyLmxlbmd0aDw9Myl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNEYXRfMTYoYWRkcjpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICAgICAgYWRkciA9YWRkci5yZXBsYWNlKC9eMHsxLH0vLCcwJyk7XHJcbiAgICAgICAgaWYoYWRkcj09XCJcIil7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5pc0RlYyhhZGRyKSl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuZGVjVG9IZXgoYWRkcikubGVuZ3RoPD01KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuaXNIZXgoYWRkcikpe1xyXG4gICAgICAgICAgICB3aGlsZShhZGRyLnN0YXJ0c1dpdGgoJzAnKSAmJiBhZGRyLmxlbmd0aD41KXtcclxuICAgICAgICAgICAgICAgIGFkZHI9IGFkZHIucmVwbGFjZSgvXjAvLCcnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGFkZHIubGVuZ3RoPD01KXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmb3JtYXRIZXh0b0RhdDgoYWRkcjpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICBhZGRyPWFkZHIucmVwbGFjZSgvXjB7MSx9LywnMCcpO1xyXG5cclxuICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KGFkZHIpKXtcclxuICAgICAgICAgICAgaWYodGhpcy5pc0RlYyhhZGRyKSl7XHJcbiAgICAgICAgICAgICAgICBhZGRyPU1hbmlwdWxhdG9yLmRlY1RvSGV4KGFkZHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlKGFkZHIuc3RhcnRzV2l0aCgnMCcpICYmIGFkZHIubGVuZ3RoPjMpe1xyXG4gICAgICAgICAgICAgICAgYWRkcj0gYWRkci5yZXBsYWNlKC9eMC8sJycpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoYWRkci5sZW5ndGg9PTIpe1xyXG4gICAgICAgICAgICAgICAgYWRkcj0nMCcrYWRkcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCB3YXMgRGF0OCBidXQgZ290IGluc3RlYWQgXCIrYWRkcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvcm1hdEhleHRvRGF0OFdpdGhvdXRIKGFkZHI6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgYWRkcj1hZGRyLnJlcGxhY2UoL14wezEsfS8sJzAnKTtcclxuXHJcbiAgICAgICAgaWYoTWFuaXB1bGF0b3IuaXNEYXRfOChhZGRyKSl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuaXNEZWMoYWRkcikpe1xyXG4gICAgICAgICAgICAgICAgYWRkcj1NYW5pcHVsYXRvci5kZWNUb0hleChhZGRyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZShhZGRyLnN0YXJ0c1dpdGgoJzAnKSAmJiBhZGRyLmxlbmd0aD4zKXtcclxuICAgICAgICAgICAgICAgIGFkZHI9IGFkZHIucmVwbGFjZSgvXjAvLCcnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGFkZHIubGVuZ3RoPT0yKXtcclxuICAgICAgICAgICAgICAgIGFkZHI9JzAnK2FkZHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgd2FzIERhdDggYnV0IGdvdCBpbnN0ZWFkIFwiK2FkZHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWRkci5yZXBsYWNlKC9oJC8sXCJcIik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZm9ybWF0SGV4dG9EYXQxNihhZGRyOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIGFkZHI9YWRkci5yZXBsYWNlKC9eMHsxLH0vLCcwJyk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuaXNEYXRfMTYoYWRkcikpe1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzRGVjKGFkZHIpKXtcclxuICAgICAgICAgICAgICAgIGFkZHI9dGhpcy5kZWNUb0hleChhZGRyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZShhZGRyLnN0YXJ0c1dpdGgoJzAnKSAmJiBhZGRyLmxlbmd0aD41KXtcclxuICAgICAgICAgICAgICAgIGFkZHI9IGFkZHIucmVwbGFjZSgvXjAvLCcnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaChhZGRyLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcj1cIjAwMDBcIithZGRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBhZGRyPScwMDAnK2FkZHI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IGFkZHI9JzAwJythZGRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBhZGRyPScwJythZGRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIHdhcyBEYXQxNiBidXQgZ290IGluc3RlYWQgXCIrYWRkcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvcm1hdEhleHRvRGF0MTZXaXRob3V0SChhZGRyOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIGFkZHI9YWRkci5yZXBsYWNlKC9eMHsxLH0vLCcwJyk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuaXNEYXRfMTYoYWRkcikpe1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzRGVjKGFkZHIpKXtcclxuICAgICAgICAgICAgICAgIGFkZHI9dGhpcy5kZWNUb0hleChhZGRyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZShhZGRyLnN0YXJ0c1dpdGgoJzAnKSAmJiBhZGRyLmxlbmd0aD41KXtcclxuICAgICAgICAgICAgICAgIGFkZHI9IGFkZHIucmVwbGFjZSgvXjAvLCcnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaChhZGRyLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkcj1cIjAwMDBcIithZGRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBhZGRyPScwMDAnK2FkZHI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6IGFkZHI9JzAwJythZGRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBhZGRyPScwJythZGRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIHdhcyBEYXQxNiBidXQgZ290IGluc3RlYWQgXCIrYWRkcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhZGRyLnJlcGxhY2UoL2gkL2csXCJcIik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc3BsaXREYXQxNkluRGF0OChhZGRyOnN0cmluZyk6c3RyaW5nW117XHJcbiAgICAgICAgbGV0IHI6c3RyaW5nW109W107XHJcbiAgICAgICAgaWYodGhpcy5pc0RhdF8xNihhZGRyKSl7XHJcbiAgICAgICAgICAgIGFkZHI9dGhpcy5mb3JtYXRIZXh0b0RhdDE2KGFkZHIpO1xyXG4gICAgICAgICAgICByWzBdPWFkZHJbMl0rYWRkclszXTtcclxuICAgICAgICAgICAgclsxXT1hZGRyWzBdK2FkZHJbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgZm9ybWF0TGFiZWxEaXNwbGF5KHM6c3RyaW5nLGI6Ym9vbGVhbik6c3RyaW5ne1xyXG4gICAgICAgIGxldCBzcz1cIlwiO1xyXG4gICAgICAgIGxldCB0b1JldHVybj1cIlwiO1xyXG4gICAgICAgIGlmKHMubGVuZ3RoPDEpe1xyXG4gICAgICAgICAgICByZXR1cm4gXCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcz1zLmNvbmNhdChcIjogXCIpO1xyXG4gICAgICAgIHdoaWxlKHMubGVuZ3RoPGVybGF1YnRlTMOkbmdlTF9DKzIpe1xyXG4gICAgICAgICAgICBzPXMuY29uY2F0KFwiIFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3M9IHM7XHJcbiAgICAgICAgd2hpbGUoc3MuaW5jbHVkZXMoXCIgXCIpKXtcclxuICAgICAgICAgICAgc3MgPSBzcy5yZXBsYWNlKFwiIFwiLFwiJm5ic3A7XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzcytcIiAtLT4gXCIrc3MubGVuZ3RoKTtcclxuICAgICAgICB0b1JldHVybiA9IGI/IHM6c3NcclxuICAgICAgICByZXR1cm4gdG9SZXR1cm47XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZm9ybWF0Q29uc3RhbnREaXNwbGF5KHM6c3RyaW5nLGI6Ym9vbGVhbik6c3RyaW5ne1xyXG4gICAgICAgIGxldCBzcz1cIlwiO1xyXG4gICAgICAgIGxldCB0b1JldHVybj1cIlwiO1xyXG4gICAgICAgIGlmKHMubGVuZ3RoPDEpe1xyXG4gICAgICAgICAgICByZXR1cm4gXCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcz1zLmNvbmNhdChcIiAgXCIpO1xyXG4gICAgICAgIHdoaWxlKHMubGVuZ3RoPGVybGF1YnRlTMOkbmdlTF9DKzIpe1xyXG4gICAgICAgICAgICBzPXMuY29uY2F0KFwiIFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3M9IHM7XHJcbiAgICAgICAgd2hpbGUoc3MuaW5jbHVkZXMoXCIgXCIpKXtcclxuICAgICAgICAgICAgc3MgPSBzcy5yZXBsYWNlKFwiIFwiLFwiJm5ic3A7XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzcytcIiAtLT4gXCIrc3MubGVuZ3RoKTtcclxuICAgICAgICB0b1JldHVybiA9IGI/IHM6c3NcclxuICAgICAgICByZXR1cm4gdG9SZXR1cm47XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZm9ybWF0TGFiZWxEaXNwbGF5dG9TeW1ib2xUYWJsZShzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIGxldCBzcz1cIlwiO1xyXG4gICAgICAgIHdoaWxlKHMubGVuZ3RoPGVybGF1YnRlTMOkbmdlTF9DKzEpe1xyXG4gICAgICAgICAgICBzPXMuY29uY2F0KFwiIFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3M9IHM7XHJcbiAgICAgICAgd2hpbGUoc3MuaW5jbHVkZXMoXCIgXCIpKXtcclxuICAgICAgICAgICAgc3MgPSBzcy5yZXBsYWNlKFwiIFwiLFwiJm5ic3A7XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzcytcIiAtLT4gXCIrc3MubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gc3M7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZm9ybWF0QmVmZWhsRGlzcGxheShzMTpzdHJpbmcsczI6c3RyaW5nLGI6Ym9vbGVhbik6c3RyaW5ne1xyXG4gICAgICAgIGxldCBzcz1cIlwiO1xyXG4gICAgICAgIGxldCB0b1JldHVybj1zMTtcclxuICAgICAgICB3aGlsZSh0b1JldHVybi5sZW5ndGg8ZXJsYXVidGVMw6RuZ2VNTkVNTyl7XHJcbiAgICAgICAgICAgIHRvUmV0dXJuPXRvUmV0dXJuLmNvbmNhdChcIiBcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHMyPXMyLnJlcGxhY2UoczEsdG9SZXR1cm4pO1xyXG4gICAgICAgIHMyPXRvUmV0dXJuK3MyLnNwbGl0KHMxKVsxXTtcclxuICAgICAgICB3aGlsZShzMi5sZW5ndGg8MTYpe1xyXG4gICAgICAgICAgICBzMj1zMi5jb25jYXQoXCIgXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcz0gczI7XHJcbiAgICAgICAgd2hpbGUoc3MuaW5jbHVkZXMoXCIgXCIpKXtcclxuICAgICAgICAgICAgc3MgPSBzcy5yZXBsYWNlKFwiIFwiLFwiJm5ic3A7XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b1JldHVybiA9IGI/IHMyOnNzXHJcbiAgICAgICAgcmV0dXJuIHRvUmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvcm1hdExhYmVsYW5kQmVmZWhsRGlzcGxheShzMTpzdHJpbmcsczI6c3RyaW5nLHMzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIGxldCBzcyA9XCJcIjtcclxuICAgICAgICBpZihzMS5sZW5ndGg8ZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRMYWJlbERpc3BsYXkoczEsZmFsc2UpLmNvbmNhdCh0aGlzLmZvcm1hdEJlZmVobERpc3BsYXkoczIsczMsZmFsc2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgczI9IHRoaXMuZm9ybWF0QmVmZWhsRGlzcGxheShzMixzMyx0cnVlKTtcclxuICAgICAgICBzMT0gdGhpcy5mb3JtYXRMYWJlbERpc3BsYXkoczEsdHJ1ZSk7XHJcbiAgICAgICAgc3M9IChzMS5jb25jYXQoczIpKS50cmltKCk7XHJcbiAgICAgICAgaWYoc3MubGVuZ3RoPDI2KXtcclxuICAgICAgICAgICAgd2hpbGUoc3MubGVuZ3RoPDI2KXtcclxuICAgICAgICAgICAgICAgIHNzPXNzLmNvbmNhdChcIiBcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coc3MpO1xyXG4gICAgICAgIHdoaWxlKHNzLmluY2x1ZGVzKFwiIFwiKSl7XHJcbiAgICAgICAgICAgIHNzID0gc3MucmVwbGFjZShcIiBcIixcIiZuYnNwO1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coc3MpO1xyXG4gICAgICAgIHJldHVybiBzcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBmb3JtYXRDb25zdGFuZEJlZmVobERpc3BsYXkoczE6c3RyaW5nLHMyOnN0cmluZyxzMzpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICBsZXQgc3MgPVwiXCI7XHJcbiAgICAgICAgaWYoczEubGVuZ3RoPGVybGF1YnRlTMOkbmdlTF9DKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0Q29uc3RhbnREaXNwbGF5KHMxLGZhbHNlKS5jb25jYXQodGhpcy5mb3JtYXRCZWZlaGxEaXNwbGF5KHMyLHMzLGZhbHNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMyPSB0aGlzLmZvcm1hdEJlZmVobERpc3BsYXkoczIsczMsdHJ1ZSk7XHJcbiAgICAgICAgczE9IHRoaXMuZm9ybWF0Q29uc3RhbnREaXNwbGF5KHMxLHRydWUpO1xyXG4gICAgICAgIHNzPSAoczEuY29uY2F0KHMyKSkudHJpbSgpO1xyXG4gICAgICAgIGlmKHNzLmxlbmd0aDwyNil7XHJcbiAgICAgICAgICAgIHdoaWxlKHNzLmxlbmd0aDwyNil7XHJcbiAgICAgICAgICAgICAgICBzcz1zcy5jb25jYXQoXCIgXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHNzKTtcclxuICAgICAgICB3aGlsZShzcy5pbmNsdWRlcyhcIiBcIikpe1xyXG4gICAgICAgICAgICBzcyA9IHNzLnJlcGxhY2UoXCIgXCIsXCImbmJzcDtcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHNzKTtcclxuICAgICAgICByZXR1cm4gc3M7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZm9ybWF0U3BlaWNoZXJhYmJpbGRhbmRMYWJlbChzMTpzdHJpbmcsczI6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgaWYoczEubGVuZ3RoPj1zcGVpY2hlcmFiYmlsZEwpe1xyXG4gICAgICAgICAgICByZXR1cm4gczErczI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aGlsZShzMS5sZW5ndGg8c3BlaWNoZXJhYmJpbGRMKXtcclxuICAgICAgICAgICAgczEgPSBzMStcIiBcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlKHMxLmluY2x1ZGVzKFwiIFwiKSl7XHJcbiAgICAgICAgICAgIHMxID0gczEucmVwbGFjZShcIiBcIixcIiZuYnNwO1wiKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gczErczI7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgTGFiZWx7XHJcbiAgICBwcml2YXRlIG5hbWU6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIHBvc2l0aW9uOnN0cmluZ3x1bmRlZmluZWQ9dW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG46c3RyaW5nLHA6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb249cDtcclxuICAgIH1cclxuICAgIGdldE5hbWUoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG4gICAgZ2V0UG9zaXRpb24oKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcclxuICAgIH1cclxuICAgIHNldFBvc2l0aW9uKGFkZHI6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uPWFkZHI7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZygpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiZ3JheVwiPkxhYmVsOjwvc3Bhbj4gJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IExhYmVsIFdlcnQ6MDAwMGggKGxpdHRsZSBlbmRpYW46MDAwMGgpYDtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBDb25zdGFudHtcclxuICAgIHByaXZhdGUgbmFtZTpzdHJpbmc9XCJcIjtcclxuXHJcbiAgICBwcml2YXRlIHZhbHVlOnN0cmluZz1cIlwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG46c3RyaW5nLHY6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLm5hbWU9bjtcclxuICAgICAgICB0aGlzLnZhbHVlPXY7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0VmFsdWUoYWRkcjpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMudmFsdWU9YWRkcjtcclxuICAgIH1cclxuICAgIHRvU3RyaW5ndG9Nb3ZhYmxlKCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFdlcnQ6JHt0aGlzLnZhbHVlfWA7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZygpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiZ3JheVwiPktvbnN0Ljo8L3NwYW4+IDsmbmJzcDsmbmJzcDsmbmJzcDsgJHt0aGlzLm5hbWV9IFdlcnQ6JHt0aGlzLnZhbHVlfWA7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBMYWJlbCB9IGZyb20gXCIuL0xhYmVsXCI7XHJcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgTWFuaXB1bGF0b3IgfSBmcm9tIFwiLi9NYW5pcHVsYXRvclwiO1xyXG5leHBvcnQgY2xhc3MgU3ltYm9sTGlzdHtcclxuXHJcbiAgICBwdWJsaWMgTGFiZWxzOkxhYmVsW109W107XHJcbiAgICBwdWJsaWMgQ29uc3RzOkNvbnN0YW50W109W107XHJcbiAgICBwcml2YXRlIHNlcXVlbmNlOkFycmF5PExhYmVsfENvbnN0YW50Pj1bXVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOlN5bWJvbExpc3Q7XHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7fVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTpTeW1ib2xMaXN0e1xyXG4gICAgICAgIGlmKCFTeW1ib2xMaXN0Lmluc3RhbmNlKXtcclxuICAgICAgICAgICAgU3ltYm9sTGlzdC5pbnN0YW5jZT0gbmV3IFN5bWJvbExpc3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFN5bWJvbExpc3QuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgZW1wdHkoKTp2b2lke1xyXG4gICAgICAgIHRoaXMuTGFiZWxzPVtdO1xyXG4gICAgICAgIHRoaXMuQ29uc3RzPVtdO1xyXG5cclxuICAgICAgICB0aGlzLnNlcXVlbmNlPVtdO1xyXG4gICAgfVxyXG4gICAgcHVzaFZhbGlkTGFiZWxDb25zdChzOkNvbnN0YW50fExhYmVsKXtcclxuICAgICAgICBpZih0aGlzLnNlcXVlbmNlLmZpbmQoZT0+e2U9PXN9KT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZS5wdXNoKHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlzRWxpZ2libGUoYWRkcjpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICAgICAgaWYoYWRkci5sZW5ndGg8Myl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoYWRkci50b0xvd2VyQ2FzZSgpPT1cIm9mZnNldFwiKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZigvXlxcZC8udGVzdChhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoL15cXHMrL2cudGVzdChhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIS9eW2EtekEtWjAtOV9dKiQvLnRlc3QoYWRkcikpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCEvXltcXFdfXS8udGVzdChhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuXHJcblxyXG4gICAgfVxyXG4gICAgdXBkYXRlTGFiZWwoczpzdHJpbmcsYWRkcjpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICAgICAgbGV0IGw6TGFiZWx8dW5kZWZpbmVkID0gdGhpcy5nZXRTcGVjaWZpY0xhYmVsQnlOYW1lKHMpO1xyXG4gICAgICAgIGlmKGwhPXVuZGVmaW5lZCAmJiBNYW5pcHVsYXRvci5pc0RhdF8xNihhZGRyKSl7XHJcbiAgICAgICAgICAgIGwuc2V0UG9zaXRpb24oTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihhZGRyKSk7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaFZhbGlkTGFiZWxDb25zdChsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaXNMYWJlbChhZGRyOnN0cmluZyk6Ym9vbGVhbntcclxuICAgICAgICAvLyAgY2FzZS1zZW5zaXRpdmVcclxuICAgICAgICAvKiBpZih0aGlzLkxhYmVscy5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC5nZXROYW1lKCk9PWFkZHIpICE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlOyAqL1xyXG4gICAgICAgIC8vICBOT1QgY2FzZS1zZW5zaXRpdmVcclxuICAgICAgICBpZih0aGlzLkxhYmVscy5maW5kKGVsZW1lbnQgPT4gZWxlbWVudC5nZXROYW1lKCkudG9Mb3dlckNhc2UoKT09YWRkci50b0xvd2VyQ2FzZSgpKSAhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9XHJcbiAgICBzZXRMYWJlbChzOnN0cmluZyxwOnN0cmluZyl7XHJcbiAgICAgICAgbGV0IGw7XHJcbiAgICAgICAgaWYoIXRoaXMuaXNMYWJlbChzKSAmJiBNYW5pcHVsYXRvci5pc0RhdF8xNihwKSl7XHJcbiAgICAgICAgICAgIGw9bmV3IExhYmVsKHMsTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihwKSlcclxuICAgICAgICAgICAgdGhpcy5MYWJlbHMucHVzaChsKTtcclxuICAgICAgICAgICAgdGhpcy5wdXNoVmFsaWRMYWJlbENvbnN0KGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldExhYmVsV2l0aG91dFBvc2l0aW9uKGFkZHI6c3RyaW5nKTpib29sZWFue1xyXG4gICAgICAgIGlmKCF0aGlzLmlzTGFiZWwoYWRkcikpe1xyXG4gICAgICAgICAgICB0aGlzLkxhYmVscy5wdXNoKG5ldyBMYWJlbChhZGRyLFwiPz8/P1wiKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoYWRkcik9PXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlzQ29uc3QoczpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICAgICAgaWYodGhpcy5Db25zdHMuZmluZChlbGVtZW50ID0+IGVsZW1lbnQuZ2V0TmFtZSgpLnRvTG93ZXJDYXNlKCk9PXMudG9Mb3dlckNhc2UoKSkgIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZ2V0U2VxdWVuY2UoKTpBcnJheTxDb25zdGFudHxMYWJlbD57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VxdWVuY2U7XHJcbiAgICB9XHJcbiAgICBzZXRDb25zdChzOnN0cmluZyx2OnN0cmluZyl7XHJcbiAgICAgICAgbGV0IGw7XHJcbiAgICAgICAgaWYoIXRoaXMuaXNDb25zdChzKSl7XHJcbiAgICAgICAgICAgIGw9bmV3IENvbnN0YW50KHMsdik7XHJcbiAgICAgICAgICAgIHRoaXMuQ29uc3RzLnB1c2gobmV3IENvbnN0YW50KHMsdikpO1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hWYWxpZExhYmVsQ29uc3QobCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVtb3ZlTGFiZWwoczpzdHJpbmcpe1xyXG4gICAgICAgIC8vICBjYXNlLXNlbnNpdGl2ZVxyXG4gICAgICAgIC8qIFxyXG4gICAgICAgIHRoaXMuTGFiZWxzLmZpbHRlcihlPT57XHJcbiAgICAgICAgICAgIGUuZ2V0TmFtZSgpIT1zO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgKi9cclxuICAgICAgICAvLyAgIE5PVCBjYXNlLXNlbnNpdGl2ZVxyXG4gICAgICAgIHRoaXMuTGFiZWxzLmZpbHRlcihlPT57XHJcbiAgICAgICAgICAgIGUuZ2V0TmFtZSgpLnRvTG93ZXJDYXNlKCkhPXMudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgZ2V0TGFiZWxzKCk6TGFiZWxbXXtcclxuICAgICAgICByZXR1cm4gdGhpcy5MYWJlbHM7XHJcbiAgICB9XHJcbiAgICBnZXRDb25zdHMoKTpDb25zdGFudFtde1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbnN0cztcclxuICAgIH1cclxuICAgIGdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUoYWRkcjpzdHJpbmcpOkNvbnN0YW50fHVuZGVmaW5lZHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Db25zdHMuZmluZChlPT5lLmdldE5hbWUoKS50b0xvd2VyQ2FzZSgpPT1hZGRyLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfVxyXG4gICAgZ2V0U3BlY2lmaWNMYWJlbEJ5TmFtZShhZGRyOnN0cmluZyk6TGFiZWx8dW5kZWZpbmVke1xyXG4gICAgICAgIC8vICBjYXNlLXNlbnNpdGl2ZVxyXG4gICAgICAgIC8qIFxyXG4gICAgICAgIHJldHVybiB0aGlzLkxhYmVscy5maW5kKGU9PmUuZ2V0TmFtZSgpPT1hZGRyKTtcclxuICAgICAgICAqL1xyXG4gICAgICAgIC8vICAgTk9UIGNhc2Utc2Vuc2l0aXZlXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTGFiZWxzLmZpbmQoZT0+ZS5nZXROYW1lKCkudG9Mb3dlckNhc2UoKT09YWRkci50b0xvd2VyQ2FzZSgpKTtcclxuICAgIH1cclxuICAgIGdldFBvc2l0aW9uT2ZTcGVjaWZpY0xhYmVsKGFkZHI6c3RyaW5nKTpzdHJpbmd8dW5kZWZpbmVke1xyXG4gICAgICAgIGxldCByPXRoaXMuZ2V0U3BlY2lmaWNMYWJlbEJ5TmFtZShhZGRyKTtcclxuICAgICAgICBpZihyPT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICB0aGlzLnNldExhYmVsV2l0aG91dFBvc2l0aW9uKGFkZHIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihyLmdldFBvc2l0aW9uKCk9PVwiPz8/P1wiKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSByZXR1cm4gci5nZXRQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgbGV0IFN5bWJvbEwgPSBTeW1ib2xMaXN0LmdldEluc3RhbmNlKCk7IiwiZXhwb3J0IGVudW0gRGF0YVR5cGV7XHJcbiAgICBkYXRfOD1cImRhdF84XCIsXHJcbiAgICBkYXRfMTY9XCJkYXRfMTZcIixcclxuICAgIExBQkVMPVwibGFiZWxcIixcclxuICAgIENPTlNUQU5UPVwiY29uc3RcIixcclxuICAgIEVMTElHSUJMRT1cImVsbGlnaWJsZVwiLFxyXG4gICAgTk9ORT1cIm5vbmVcIlxyXG59XHJcbmV4cG9ydCBlbnVtIElucHV0TGluZVR5cGV7XHJcbiAgICBUUkFOU0xBVEVEPVwiVFJBTlNMQVRFRFwiLFxyXG4gICAgUFNFVURPVFJBTlNMQVRFRD1cIlBTRVVET1RSQU5TTEFURURcIixcclxuICAgIE5PVFRSQU5TTEFURUQ9XCJOT1RUUkFOU0xBVEVEXCIsXHJcbiAgICBFTVBUWT1cIkVNUFRZXCJcclxufSIsImltcG9ydCB7IElucHV0TGluZVR5cGUgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBlcmxhdWJ0ZUzDpG5nZUxfQywgTWFuaXB1bGF0b3IgfSBmcm9tIFwiLi9NYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyBTeW1ib2xMIH0gZnJvbSBcIi4vU3ltYm9sTGlzdFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0TGluZXtcclxuICAgIHByaXZhdGUgc3RhcnRpbmdBZGRyOnN0cmluZz1cIlwiO1xyXG4gICAgcHJpdmF0ZSBsZW5ndGg6bnVtYmVyPS0xO1xyXG4gICAgcHJpdmF0ZSBpZDpudW1iZXI9LTE7XHJcbiAgICBwcml2YXRlIGhDb2RlOnN0cmluZz1cIlwiO1xyXG5cclxuICAgIHByaXZhdGUgaW5pdGlhbExpbmU6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIGNvbW1hbmRMaW5lOnN0cmluZz1cIlwiO1xyXG4gICAgcHJpdmF0ZSBmaXJzdFBhcnQ6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIHNlY29uZFBhcnQ6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIHRoaXJkUGFydDpzdHJpbmc9XCJcIjtcclxuICAgIHByaXZhdGUgZXJyb3I6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIHJlc3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIGNvbW1lbnRhcnk6c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIGxhYmVsOnN0cmluZz1cIlwiO1xyXG4gICAgcHJpdmF0ZSBvZmZzZXRMYWJlbDpib29sZWFuPWZhbHNlO1xyXG4gICAgcHJpdmF0ZSBlcnJvckJvb2w6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHByaXZhdGUgdHJhbnNsYXRpb246c3RyaW5nPVwiXCI7XHJcbiAgICBwcml2YXRlIGRlc2NyaXB0aW9uOnN0cmluZ1tdPVtdO1xyXG5cclxuICAgIHByaXZhdGUgdmFsaWQ6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHByaXZhdGUgdHlwZTpJbnB1dExpbmVUeXBlPUlucHV0TGluZVR5cGUuTk9UVFJBTlNMQVRFRDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihpbml0OnN0cmluZyxpZDpudW1iZXIpe1xyXG4gICAgICAgIC8vIHRoaXMuaW5pdGlhbExpbmU9aW5pdC5yZXBsYWNlKC9cXHMrL2csJyAnKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxMaW5lPWluaXQucmVwbGFjZSgvXFxzezMsfS9nLCcgJyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaW5pdC5yZXBsYWNlKC9cXHN7Myx9L2csJyAnKSk7XHJcbiAgICAgICAgLy8gdGhpcy5pbml0aWFsTGluZT1pbml0LnJlcGxhY2UoL1xccysvZywnICcpLnRyaW0oKTtcclxuICAgICAgICB0aGlzLmlkPWlkO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZExpbmU9dGhpcy5zZXRDb21tYW5kTGluZSgpO1xyXG4gICAgICAgIHRoaXMucHJlZW1wdGl2ZVZhbGlkYXRpb24oKTtcclxuICAgIH1cclxuICAgIGdldENvbW1hbmRsaW5lKCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRMaW5lO1xyXG4gICAgfVxyXG4gICAgcHJlZW1wdGl2ZVZhbGlkYXRpb24oKXtcclxuICAgICAgICBpZih0aGlzLmNvbW1hbmRMaW5lPT1cIlwiICYmIHRoaXMubGFiZWw9PVwiXCIpe1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkPXRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZT1JbnB1dExpbmVUeXBlLkVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuY29tbWFuZExpbmU9PVwiXCImJiB0aGlzLmxhYmVsIT1cIlwiKXtcclxuICAgICAgICAgICAgdGhpcy50eXBlPUlucHV0TGluZVR5cGUuUFNFVURPVFJBTlNMQVRFRDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXRFcnJvcihzOnN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5lcnJvckJvb2w9dHJ1ZTtcclxuICAgICAgICB0aGlzLmVycm9yPXM7XHJcbiAgICB9XHJcbiAgICBoYXNFcnJvcigpOmJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JCb29sO1xyXG4gICAgfVxyXG4gICAgaGFzT2Zmc2V0TGFiZWwoKTpib29sZWFue1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldExhYmVsO1xyXG4gICAgfVxyXG4gICAgc2V0T2Zmc2V0TGFiZWwoYjpib29sZWFuKXtcclxuICAgICAgICB0aGlzLm9mZnNldExhYmVsPWJcclxuICAgIH1cclxuICAgIHNldFN0YXJ0aW5nQWRkcihzOnN0cmluZyl7dGhpcy5zdGFydGluZ0FkZHI9czt9XHJcbiAgICBzZXRMZW5ndGgobjpudW1iZXJ8c3RyaW5nKXtcclxuICAgICAgICBpZihNYW5pcHVsYXRvci5pc0hleChTdHJpbmcobikpKXtcclxuICAgICAgICAgICAgdGhpcy5sZW5ndGg9TWFuaXB1bGF0b3IuaGV4VG9EZWMoU3RyaW5nKG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB0aGlzLmxlbmd0aCA9IE51bWJlcihuKTtcclxuICAgIH1cclxuICAgIHNldEhDb2RlKHM6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLmhDb2RlPXM7XHJcbiAgICB9XHJcbiAgICBzZXRGaXJzdFBhcnQoczpzdHJpbmcpe3RoaXMuZmlyc3RQYXJ0PXM7fVxyXG4gICAgc2V0U2Vjb25kUGFydChzOnN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRQYXJ0PXM7XHJcbiAgICB9XHJcbiAgICBnZXRFbmRBZGRyKCk6c3RyaW5ne1xyXG4gICAgICAgIGlmKHRoaXMuZmlyc3RQYXJ0LnRvVXBwZXJDYXNlKCk9PVwiT1JHXCIpe1xyXG4gICAgICAgICAgICByZXR1cm4gTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihTdHJpbmcodGhpcy5sZW5ndGgpKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgLy8gcmV0dXJuIFN0cmluZyh0aGlzLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuc3RhcnRpbmdBZGRyIT1cIlwiKXtcclxuICAgICAgICAgICByZXR1cm4gU3RyaW5nKE1hbmlwdWxhdG9yLmhleFRvRGVjKHRoaXMuc3RhcnRpbmdBZGRyKSt0aGlzLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbiAgICBzZXRUaGlyZFBhcnQoczpzdHJpbmcpe1xyXG4gICAgICAgIHRoaXMudGhpcmRQYXJ0PXM7XHJcbiAgICB9XHJcbiAgICBzZXRSZXN0KHM6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLnJlc3Q9cztcclxuICAgIH1cclxuICAgIC8qIGdldFdhcm5pbmcoKTpzdHJpbmd7XHJcbiAgICAgICAgbGV0IGw6c3RyaW5nfHVuZGVmaW5lZDtcclxuICAgICAgICBsID0gdGhpcy5nZXRMYWJlbG9yVW5kZWZpbmVkKCk7XHJcbiAgICAgICAgaWYobCAhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHJldHVybiBgTGFiZWwgJzxzcGFuIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtsfTwvc3Bhbj4nIGlzdCBsw6RuZ2VyIGFscyAke2VybGF1YnRlTMOkbmdlTF9DfSBaZWljaGVuIWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGw9IHRoaXMuZ2V0Q29uc3RvclVuZGVmaW5lZCgpO1xyXG4gICAgICAgIGlmKGwgIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICByZXR1cm4gYEtvbnN0YW50ZSAnJHtsfScgaXN0IGzDpG5nZXIgYWxzICR7ZXJsYXVidGVMw6RuZ2VMX0N9IFplaWNoZW4hYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbiAgICBnZXRXYXJuaW5ndG9EZXNjcmlwdGlvbkxpbmUoKTpzdHJpbmd7XHJcbiAgICAgICAgaWYodGhpcy5nZXRXYXJuaW5nKCkgIT1cIlwiKXtcclxuICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cIndhcm5pbmdcIj5XYXJudW5nOiAke3RoaXMuZ2V0V2FybmluZygpfSA8L3NwYW4+YFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH0gKi9cclxuICAgIGdldExhYmVsb3JVbmRlZmluZWQoKTpzdHJpbmd8dW5kZWZpbmVke1xyXG4gICAgICAgIGlmKHRoaXMubGFiZWwgIT0gXCJcIiAmJiB0aGlzLmxhYmVsLmxlbmd0aCA+IGVybGF1YnRlTMOkbmdlTF9DICl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLm9mZnNldExhYmVsICYmIHRoaXMuZ2V0TGFiZWxPZk9mZnNldCgpLmxlbmd0aCA+IGVybGF1YnRlTMOkbmdlTF9DKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGFiZWxPZk9mZnNldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihTeW1ib2xMLmlzTGFiZWwodGhpcy5maXJzdFBhcnQpICYmIHRoaXMuZmlyc3RQYXJ0Lmxlbmd0aCA+IGVybGF1YnRlTMOkbmdlTF9DICl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0UGFydDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoU3ltYm9sTC5pc0xhYmVsKHRoaXMuc2Vjb25kUGFydCkgJiYgdGhpcy5zZWNvbmRQYXJ0Lmxlbmd0aCA+IGVybGF1YnRlTMOkbmdlTF9DKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vjb25kUGFydDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoU3ltYm9sTC5pc0xhYmVsKHRoaXMudGhpcmRQYXJ0KSAmJiB0aGlzLnRoaXJkUGFydC5sZW5ndGggPiBlcmxhdWJ0ZUzDpG5nZUxfQyl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRoaXJkUGFydDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGdldENvbnN0b3JVbmRlZmluZWQoKTpzdHJpbmd8dW5kZWZpbmVke1xyXG4gICAgICAgIGlmKFN5bWJvbEwuaXNDb25zdCh0aGlzLmZpcnN0UGFydCkgJiYgdGhpcy5maXJzdFBhcnQubGVuZ3RoID4gZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJzdFBhcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKFN5bWJvbEwuaXNDb25zdCh0aGlzLnNlY29uZFBhcnQpICYmIHRoaXMuc2Vjb25kUGFydC5sZW5ndGggPiBlcmxhdWJ0ZUzDpG5nZUxfQyl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlY29uZFBhcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKFN5bWJvbEwuaXNDb25zdCh0aGlzLnRoaXJkUGFydCkgJiYgdGhpcy50aGlyZFBhcnQubGVuZ3RoID4gZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aGlyZFBhcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldFZhbGlkKGI6Ym9vbGVhbil7dGhpcy52YWxpZD1iO31cclxuICAgIHNldFR5cGUodDpJbnB1dExpbmVUeXBlKXt0aGlzLnR5cGU9dDt9XHJcbiAgICBzYXZlRGVzY3JpcHRpb25MaW5lKHM6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uLnB1c2gocyk7XHJcbiAgICB9XHJcbiAgICBzZXRUcmFuc2xhdGlvbj0oczpzdHJpbmcpPT57XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbj1zO1xyXG4gICAgfVxyXG4gICAgZ2V0VHJhbnNsYXRpb249KCk6c3RyaW5nPT57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb247XHJcbiAgICB9XHJcbiAgICBnZXRJbml0aWFsTGluZSgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsTGluZTtcclxuICAgIH1cclxuICAgIGdldERlc2NyaXB0aW9uTGluZT0oKTpzdHJpbmdbXT0+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uO1xyXG4gICAgfVxyXG4gICAgZ2V0U3RhcnRpbmdBZGRyPSgpPT57cmV0dXJuIHRoaXMuc3RhcnRpbmdBZGRyO31cclxuICAgIGdldExlbmd0aD0oKT0+e3JldHVybiB0aGlzLmxlbmd0aDt9XHJcbiAgICBnZXRIQ29kZT0oKTpzdHJpbmc9PntcclxuICAgICAgICByZXR1cm4gdGhpcy5oQ29kZTtcclxuICAgIH1cclxuICAgIGdldElkPSgpPT57cmV0dXJuIHRoaXMuaWQ7fVxyXG4gICAgZ2V0TGFiZWw9KCk9PntcclxuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbDtcclxuICAgIH1cclxuICAgIGdldEZpcnN0UGFydD0oKT0+eyByZXR1cm4gdGhpcy5maXJzdFBhcnQ7fVxyXG4gICAgZ2V0U2Vjb25kUGFydD0oKT0+e3JldHVybiB0aGlzLnNlY29uZFBhcnQ7fVxyXG4gICAgZ2V0VGhpcmRQYXJ0PSgpPT57cmV0dXJuIHRoaXMudGhpcmRQYXJ0O31cclxuICAgIGdldENvbW1lbnRhcnk9KCk9PntcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21tZW50YXJ5O1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsaWQ9KCk9PntyZXR1cm4gdGhpcy52YWxpZDt9XHJcbiAgICBnZXRUeXBlPSgpPT57cmV0dXJuIHRoaXMudHlwZTt9XHJcbiAgICBzZXRDb21tZW50PShzOnN0cmluZyk9PntcclxuICAgICAgICB0aGlzLmNvbW1lbnRhcnkgPXM7XHJcbiAgICB9XHJcbiAgICBzZXRMYWJlbFRvPShzOnN0cmluZyk9PntcclxuICAgICAgICB0aGlzLmxhYmVsID1zO1xyXG4gICAgfVxyXG4gICAgc2V0Q29tbWFuZExpbmU9KCk6c3RyaW5nPT57XHJcbiAgICAgICAgaWYodGhpcy5pbml0aWFsTGluZS50cmltKCk9PVwiXCIgfHwgdGhpcy5pbml0aWFsTGluZS50cmltKCk9PVwiIFwiKXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzPU1hbmlwdWxhdG9yLnNwbGl0U3RyaW5nSGFsZih0aGlzLmluaXRpYWxMaW5lLFwiOlwiKTtcclxuICAgICAgICBpZihzLmxlbmd0aD4xKXtcclxuICAgICAgICAgICAgdGhpcy5sYWJlbD1zWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3M9TWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmKHRoaXMuaW5pdGlhbExpbmUsXCI7XCIpO1xyXG4gICAgICAgIGxldCBzMTpzdHJpbmcgPSB0aGlzLmluaXRpYWxMaW5lLnJlcGxhY2Uoc1swXSsnOicsJycpLnJlcGxhY2UoJzsnK3NzWzFdLCcnKTtcclxuICAgICAgICBpZihzc1sxXSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5jb21tZW50YXJ5PXNzWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gczEudHJpbSgpO1xyXG4gICAgfVxyXG4gICAgZ2V0TGFiZWxPZk9mZnNldCgpOnN0cmluZ3tcclxuICAgICAgICBpZih0aGlzLm9mZnNldExhYmVsKXtcclxuICAgICAgICAgICAgaWYodGhpcy5zZWNvbmRQYXJ0LnRvVXBwZXJDYXNlKCkuc3RhcnRzV2l0aChcIk9GRlNFVFwiKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmKHRoaXMuc2Vjb25kUGFydCxcIiBcIilbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy50aGlyZFBhcnQudG9VcHBlckNhc2UoKS5zdGFydHNXaXRoKFwiT0ZGU0VUXCIpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYW5pcHVsYXRvci5zcGxpdFN0cmluZ0hhbGYodGhpcy50aGlyZFBhcnQsXCIgXCIpWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZm9ybWF0SW5wdXRUb0Rpc3BsYXkoKXtcclxuICAgICAgICBsZXQgdGVtcDpzdHJpbmdbXTtcclxuICAgICAgICBpZih0aGlzLnZhbGlkKXtcclxuICAgICAgICAgICAgdGVtcCA9IHRoaXMuZm9ybWF0cGFydHNUb0Rpc3BsYXkodGhpcy5maXJzdFBhcnQsdGhpcy5zZWNvbmRQYXJ0LHRoaXMudGhpcmRQYXJ0KVxyXG4gICAgICAgICAgICB0aGlzLmZpcnN0UGFydD10ZW1wWzBdO1xyXG4gICAgICAgICAgICB0aGlzLnNlY29uZFBhcnQ9dGVtcFsxXTtcclxuICAgICAgICAgICAgdGhpcy50aGlyZFBhcnQ9dGVtcFsyXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb21tYW5kTGluZVRvQ3VycmVudExpbmUoKXtcclxuICAgIFxyXG4gICAgICAgIGxldCBkc3JsPXRoaXMuaW5pdGlhbExpbmUuc3BsaXQoXCI7XCIpWzBdO1xyXG4gICAgICAgIGxldCBzcyA9IFtdO1xyXG4gICAgICAgIGxldCB0ZW1wOnN0cmluZ1tdPVtdO1xyXG4gICAgICAgIGlmKHRoaXMubGFiZWwhPVwiXCIpe1xyXG4gICAgICAgICAgICAvLyB0ZW1wID1kc3JsLnNwbGl0KHRoaXMubGFiZWwpO1xyXG4gICAgICAgICAgICB0ZW1wID1NYW5pcHVsYXRvci5zbGljZVN0cmluZyhkc3JsLHRoaXMubGFiZWwpO1xyXG4gICAgICAgICAgICBzcy5wdXNoKHRlbXBbMF0pO1xyXG4gICAgICAgICAgICBzcy5wdXNoKGA8c3BhbiBpZD1cImNyTGFiZWxcIj4ke3RoaXMubGFiZWx9PC9zcGFuPmApO1xyXG4gICAgICAgICAgICBkc3JsID10ZW1wWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLmZpcnN0UGFydCE9XCJcIil7XHJcbiAgICAgICAgICAgIC8vIHRlbXAgPWRzcmwuc3BsaXQodGhpcy5maXJzdFBhcnQpXHJcbiAgICAgICAgICAgIHRlbXAgPU1hbmlwdWxhdG9yLnNsaWNlU3RyaW5nKGRzcmwsdGhpcy5maXJzdFBhcnQpXHJcbiAgICAgICAgICAgIHNzLnB1c2godGVtcFswXSk7XHJcbiAgICAgICAgICAgIHNzLnB1c2goYDxzcGFuIGlkPVwiY3JGaXJzdFwiPiR7dGhpcy5maXJzdFBhcnR9PC9zcGFuPmApO1xyXG4gICAgICAgICAgICBkc3JsID10ZW1wWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLnNlY29uZFBhcnQhPVwiXCIpe1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRzcmwgOiBcIitkc3JsKTtcclxuICAgICAgICAgICAgLy8gdGVtcCA9ZHNybC5zcGxpdCh0aGlzLnNlY29uZFBhcnQsMilcclxuICAgICAgICAgICAgdGVtcCA9TWFuaXB1bGF0b3Iuc2xpY2VTdHJpbmcoZHNybCx0aGlzLnNlY29uZFBhcnQpXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU0VDT05EOlwiKVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhNYW5pcHVsYXRvci5zbGljZVN0cmluZyhkc3JsLHRoaXMuc2Vjb25kUGFydCkpO1xyXG4gICAgICAgICAgICBzcy5wdXNoKHRlbXBbMF0pO1xyXG4gICAgICAgICAgICBzcy5wdXNoKGA8c3BhbiBpZD1cImNyU2Vjb25kXCI+JHt0aGlzLnNlY29uZFBhcnR9PC9zcGFuPmApO1xyXG4gICAgICAgICAgICBkc3JsID10ZW1wWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLnRoaXJkUGFydCE9XCJcIil7XHJcbiAgICAgICAgICAgIC8vIHRlbXAgPWRzcmwuc3BsaXQodGhpcy50aGlyZFBhcnQpXHJcbiAgICAgICAgICAgIHRlbXAgPU1hbmlwdWxhdG9yLnNsaWNlU3RyaW5nKGRzcmwsdGhpcy50aGlyZFBhcnQpXHJcbiAgICAgICAgICAgIHNzLnB1c2goZHNybC5zcGxpdCh0aGlzLnRoaXJkUGFydClbMF0pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlRISVJEOlwiKVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhNYW5pcHVsYXRvci5zbGljZVN0cmluZyhkc3JsLHRoaXMudGhpcmRQYXJ0KSk7XHJcblxyXG4gICAgICAgICAgICBzcy5wdXNoKGA8c3BhbiBpZD1cImNyVGhpcmRcIj4ke3RoaXMudGhpcmRQYXJ0fTwvc3Bhbj5gKTtcclxuICAgICAgICAgICAgZHNybCA9dGVtcFsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5lcnJvciE9XCJcIil7XHJcbiAgICAgICAgICAgIC8vIHRlbXAgPWRzcmwuc3BsaXQodGhpcy5lcnJvcilcclxuICAgICAgICAgICAgdGVtcCA9TWFuaXB1bGF0b3Iuc2xpY2VTdHJpbmcoZHNybCx0aGlzLmVycm9yKVxyXG4gICAgICAgICAgICBzcy5wdXNoKGRzcmwuc3BsaXQodGhpcy5lcnJvcilbMF0pO1xyXG4gICAgICAgICAgICBzcy5wdXNoKGA8c3BhbiBpZD1cImNyRXJyb3JcIj4ke3RoaXMuZXJyb3J9PC9zcGFuPmApO1xyXG4gICAgICAgICAgICBkc3JsID10ZW1wWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcy5wdXNoKGRzcmwpO1xyXG4gICAgICAgIC8qIGlmKHRoaXMucmVzdCE9XCJcIil7XHJcbiAgICAgICAgICAgIGRzcmwrPWA8c3BhbiBpZD1cImNyUmVzdFwiPiR7dGhpcy5yZXN0fTwvc3Bhbj5gO1xyXG4gICAgICAgIH0gKi9cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzcyk7XHJcbiAgICAgICAgcmV0dXJuIHNzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxsVigpOm51bWJlcltde1xyXG4gICAgICAgIHJldHVybiBbdGhpcy5sYWJlbCE9XCJcIj8xOjAsIHRoaXMuZmlyc3RQYXJ0IT1cIlwiPzE6MCwgdGhpcy5zZWNvbmRQYXJ0IT1cIlwiPzE6MCwgdGhpcy50aGlyZFBhcnQhPVwiXCI/MTowLCAodGhpcy5lcnJvciE9XCJcInx8dGhpcy5lcnJvckJvb2wpPzE6MCwgdGhpcy5yZXN0IT1cIlwiPzE6MF07XHJcbiAgICB9XHJcblxyXG4gICAgY29tbWFuZExpbmV0b1N0cmluZz0oYjpib29sZWFuKTpzdHJpbmc9PntcclxuICAgICAgICBsZXQgZmlyc3Q6c3RyaW5nPXRoaXMuZmlyc3RQYXJ0LHNlY29uZDpzdHJpbmc9dGhpcy5zZWNvbmRQYXJ0LHRoaXJkOnN0cmluZz10aGlzLnRoaXJkUGFydDtcclxuICAgICAgICBsZXQgdGVtcDpzdHJpbmdbXTtcclxuXHJcbiAgICAgICAgaWYodGhpcy52YWxpZD09dHJ1ZSl7XHJcbiAgICAgICAgICAgIGlmKGIpe1xyXG4gICAgICAgICAgICAgICAgdGVtcCA9IHRoaXMuZm9ybWF0cGFydHNUb0Rpc3BsYXkoZmlyc3Qsc2Vjb25kLHRoaXJkKTtcclxuICAgICAgICAgICAgICAgIGZpcnN0ID0gdGVtcFswXTtcclxuICAgICAgICAgICAgICAgIHNlY29uZCA9IHRlbXBbMV07XHJcbiAgICAgICAgICAgICAgICB0aGlyZCA9IHRlbXBbMl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoc2Vjb25kLnRvVXBwZXJDYXNlKCk9PVwiRVFVXCIpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zZWNvbmRQYXJ0ID0gXCJFUVVcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybihgJHtmaXJzdH0gJHtzZWNvbmR9ICR7dGhpcmR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYCR7Zmlyc3R9ICR7c2Vjb25kfSR7KHRoaXJkPT1cIlwiP1wiXCI6JywnK3RoaXJkKX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kTGluZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYXNMYWJlbD0oKTpib29sZWFuPT57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWwgIT1cIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdHBhcnRzVG9EaXNwbGF5KGZpcnN0OnN0cmluZyxzZWNvbmQ6c3RyaW5nLHRoaXJkOnN0cmluZyk6c3RyaW5nW117XHJcbiAgICAgICAgbGV0IHRlbXA6c3RyaW5nW107XHJcbiAgICAgICAgaWYoc2Vjb25kLnRvVXBwZXJDYXNlKCk9PVwiRVFVXCIpe1xyXG4gICAgICAgICAgICBzZWNvbmQ9c2Vjb25kLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIGVsc2UgaWYoW1wiRFdcIixcIk9SR1wiXS5pbmNsdWRlcyhmaXJzdC50b1VwcGVyQ2FzZSgpKSl7XHJcbiAgICAgICAgICAgIGlmKFN5bWJvbExcclxuICAgICAgICAgICAgc2Vjb25kID0gTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihzZWNvbmQpO1xyXG4gICAgICAgIH0gKi9cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBmaXJzdD1maXJzdC50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICB0ZW1wID0gTWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmKHNlY29uZCxcIiBcIik7XHJcbiAgICAgICAgICAgIGlmKCFTeW1ib2xMLmlzTGFiZWwoc2Vjb25kKSAmJiAhU3ltYm9sTC5pc0NvbnN0KHNlY29uZCkgJiYgIU1hbmlwdWxhdG9yLmlzRGF0XzE2KHNlY29uZCkgJiYhKHRlbXBbMF0udG9VcHBlckNhc2UoKT09XCJPRkZTRVRcIiApKXtcclxuICAgICAgICAgICAgICAgIHNlY29uZD1zZWNvbmQudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0aGlzLmhhc09mZnNldExhYmVsKCkpe1xyXG4gICAgICAgICAgICAgICAgc2Vjb25kPVwiT0ZGU0VUIFwiK3RoaXMuZ2V0TGFiZWxPZk9mZnNldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoc2Vjb25kICE9XCJcIil7XHJcbiAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KHNlY29uZCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZD1zZWNvbmQ7IC8vIERlY09ySGV4XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2Vjb25kPU1hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChzZWNvbmQpOyBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoTWFuaXB1bGF0b3IuaXNEYXRfMTYoc2Vjb25kKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kPXNlY29uZDsvLyBEZWNPckhleFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlY29uZD1NYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KHNlY29uZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGVtcCA9IE1hbmlwdWxhdG9yLnNwbGl0U3RyaW5nSGFsZih0aGlyZCxcIiBcIik7XHJcbiAgICAgICAgICAgIGlmKCFTeW1ib2xMLmlzTGFiZWwodGhpcmQpICYmICFTeW1ib2xMLmlzQ29uc3QodGhpcmQpICYmICFNYW5pcHVsYXRvci5pc0RhdF8xNih0aGlyZCkgJiYhKHRlbXBbMF0udG9VcHBlckNhc2UoKT09XCJPRkZTRVRcIikpe1xyXG4gICAgICAgICAgICAgICAgdGhpcmQ9dGhpcmQudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMuaGFzT2Zmc2V0TGFiZWwoKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlyZD1cIk9GRlNFVCBcIit0aGlzLmdldExhYmVsT2ZPZmZzZXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHRoaXJkICE9XCJcIil7XHJcbiAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KHRoaXJkKSYmdGhpcy5sZW5ndGg8Myl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcmQ9TWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQ4KHRoaXJkKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcmQ9dGhpcmQ7IC8vIERlY09ySGV4XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKE1hbmlwdWxhdG9yLmlzRGF0XzE2KHRoaXJkKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcmQ9TWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNih0aGlyZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcmQ9dGhpcmQ7IC8vIERlY09ySGV4XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBbZmlyc3Qsc2Vjb25kLHRoaXJkXTtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgTWFuaXB1bGF0b3IgfSBmcm9tIFwiLi9NYW5pcHVsYXRvclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1uZW1vQ29tbWFuZCB7XHJcbiAgICBwcml2YXRlIG1Db2RlOnN0cmluZyA9XCJcIjtcclxuICAgIHByaXZhdGUgZGVzdGluYXRpb246c3RyaW5nID1cIlwiO1xyXG4gICAgcHJpdmF0ZSBzb3VyY2U6c3RyaW5nID1cIlwiO1xyXG4gICAgcHJpdmF0ZSBiaW5hcnlDb2RlOnN0cmluZyA9XCJcIjtcclxuICAgIHByaXZhdGUgaGV4Q29kZTpzdHJpbmc9XCJcIjtcclxuICAgIHByaXZhdGUgc2l6ZTpudW1iZXIgPSAwO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihjOnN0cmluZyxkOnN0cmluZyxhZGRyOnN0cmluZyxiQzpzdHJpbmcsbDpudW1iZXIpe1xyXG4gICAgICAgIHRoaXMubUNvZGU9Yy50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb249ZDtcclxuICAgICAgICB0aGlzLnNvdXJjZT1hZGRyO1xyXG4gICAgICAgIHRoaXMuYmluYXJ5Q29kZT1iQy5yZXBsYWNlKC9cXHMvZyxcIlwiKTtcclxuICAgICAgICB0aGlzLmhleENvZGU9TWFuaXB1bGF0b3IuYmluVG9IZXgoYkMucmVwbGFjZSgvXFxzL2csXCJcIikpO1xyXG4gICAgICAgIHRoaXMuc2l6ZT1sO1xyXG4gICAgfVxyXG4gICAgZ2V0TUNvZGUoKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubUNvZGU7XHJcbiAgICB9XHJcbiAgICBnZXREZXN0aW5hdGlvbigpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvbjtcclxuICAgIH1cclxuICAgIGdldFNvdXJjZSgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2U7XHJcbiAgICB9XHJcbiAgICBnZXRIZXhDb2RlKCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhleENvZGU7XHJcbiAgICB9XHJcbiAgICBnZXRMZW5ndGgoKTpudW1iZXJ7XHJcbiAgICAgICAgbGV0IGk6bnVtYmVyPTE7XHJcbiAgICAgICAgaWYodGhpcy5kZXN0aW5hdGlvbiAhPVwiXCIpe1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuc291cmNlICE9XCJcIil7XHJcbiAgICAgICAgICAgIGkrK1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaTtcclxuICAgIH1cclxuICAgIGdldFNpemUoKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGVybGF1YnRlTMOkbmdlTF9DIH0gZnJvbSBcIi4vTWFuaXB1bGF0b3JcIjtcclxuXHJcbmNvbnN0IHdhcm5pbmdDbGFzcyA9IFwid2FybmluZ1wiO1xyXG5jb25zdCBlcnJDbGFzcyA9IFwiZXJyb3JSZWRcIjtcclxuY29uc3QgbGFiZWxDbGFzcyA9IFwibGFiZWxCbHVlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RyaW5nQ29uc3RydWN0b3J7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuXHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW5mbyhzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJlaW5nZXJ1Y2t0XCI+JHtzfTxzcGFuPmA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYWNodHVuZyhzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCIke3dhcm5pbmdDbGFzc30gZWluZ2VydWNrdFwiPkFjaHR1bmcgOiAke3N9PHNwYW4+YDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBlcnJvcihzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJlcnJvclJlZCBcIj5lcnJvcjogJHtzfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHBsdXNFcnJvcihzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJwbHVzZXJyUmVkIGVpbmdlcnVja3RcIj4ke3N9PC9zcGFuPmA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgd2FyTGFiZWxadUxhbmcoczpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5hY2h0dW5nKGBMYWJlbCAnPHNwYW4gY2xhc3M9XCIke2xhYmVsQ2xhc3N9XCI+JHtzfTwvc3Bhbj4nID4ke2VybGF1YnRlTMOkbmdlTF9DfSBaZWljaGVuYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgd2FyQ29uc3RadUxhbmcoczpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5hY2h0dW5nKGBLb25zdGFudGUgJHtzfSA+JHtlcmxhdWJ0ZUzDpG5nZUxfQ30gWmVpY2hlbmApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBlcnJMYWJlbERlZihzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBMYWJlbCAnPHNwYW4gY2xhc3M9XCIke2xhYmVsQ2xhc3N9XCI+JHtzfTwvc3Bhbj4nIGlzdCBiZXJlaXRzIGRlZmluaWVydGApOyBcclxuICAgIH1cclxuICAgIHN0YXRpYyBlcnJDb25zdERlZihzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBLb25zdGFudGUgJHtzfSBpc3QgYmVyZWl0cyBkZWZpbmllcnRgKTsgXHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW52YWxpZExhYmVsKHM6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoYCR7c30ga2VpbiBnw7xsaXRnZXIgTGFiZWxgKTsgLy8gdW5nw7xsdGlnZXIgTGFiZWxcclxuICAgIH1cclxuICAgIHN0YXRpYyBpbnZhbGlkQ21kKHM6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoYCR7c30gdW5nw7xsdGlnZXIgT3BlcmFuZGApOyAvL3VuZ8O8bHRpZ2VyIEJlZmVobFxyXG4gICAgfVxyXG4gICAgc3RhdGljIHRvb2Zld0NtZCgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgZmVobGVuZGVyIE9wZXJhbmRgKTsgLy96dSB3ZW5pZ2UgT3BlcmFuZGVuXHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdG9vTWFueUNtZCgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgenUgdmllbGUgT3BlcmFuZGVuYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgbm9WYWxpZExhYmVsQWZ0ZXJPZmZzZXQoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgZ2VmdW5kZW4gd3VyZGUgT0ZGU0VUIGFiZXIga2VpbiBnw7xsdGlnZXIgbGFiZWwhYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYnVnTm9Db21tYW5kKCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKFwia2VpbmUgcGFzc2VuZGUgQmVmZWhsIGdlZnVuZGVuIVwiKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBidWdTd2l0Y2hEZWZhdWx0KCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKFwidW5iZWthbm50ZXIgRmVobGVyIGlzdCBhdWZnZXRyZXRlblwiKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBidWdOb1ZhbHVlRm9yQ29uc3QoczpzdHJpbmcpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBXZXJ0IGbDvHIgS29uc3RhbnRlICR7c30gbmljaHQgZ2VmdW5kZW4hYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZXhwZWN0ZWREYXQ4KCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKFwiZXJ3YXJ0ZXQgd2FyIDgtYml0IFdlcnRcIik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZXhwZWN0ZWREYXQ4Q29uc3RUb0JpZyhzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBlcndhcnRldCB3YXIgOC1iaXQgV2VydCwgS29uc3RhbnRlICR7c30gaXN0IHp1IGdyb8OfYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZXhwZWN0ZWREYXQ4UGx1cyhzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBlcndhcnRldCB3YXIgOC1iaXQgV2VydCwgJHtzfSBpc3Qga2VpbiBnw7xsdGlnZXIgT3BlcmFuZGApO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGV4cGVjdGVkRGF0MTYoKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoXCJlcndhcnRldCB3YXIgMTYtYml0IFdlcnRcIik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZXhwZWN0ZWREYXQxNlBsdXMoczpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgZXJ3YXJ0ZXQgd2FyIDE2LWJpdCBXZXJ0LCAke3N9IGlzdCBrZWluIGfDvGx0aWdlciBPcGVyYW5kYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgbmFtZVRha2VuRm9yTGFiZWwoczpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgU3ltYm9sYmV6ZWljaG51bmcgJHtzfSBiZXJlaXRzIGFscyBMYWJlbCBkZWZpbmllcnRgKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBuYW1lVGFrZW5Gb3JDb25zdChzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBTeW1ib2xiZXplaWNobnVuZyAke3N9IGJlcmVpdHMgYWxzIEtvbnN0YW50ZSBkZWZpbmllcnRgKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBub0NvbnN0YWZ0ZXJMYWJlbERlZigpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihga2VpbmUgS29uc3RhbnRlbmRlZmluaXRpb24gbmFjaCBlaW5lciBMYWJlbGRlZmluaXRpb24gZXJsYXVidGApO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIG5vVmFsaWRDb25zdE9yT3BlcmFuZChzOnN0cmluZyl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoYCR7c30gdW5nw7xsdGlnZXIgQmVmZWhsIG9kZXIgS29uc3RhbnRlbmRlZmluaXRpb25gKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBub3RWYWxpZExhYmVsU2luY2VJdHNDb25zdChzOnN0cmluZyl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1c0Vycm9yKGA8c3BhbiBjbGFzcz1cIiR7bGFiZWxDbGFzc31cIj4ke3N9PC9zcGFuPiBpc3Qga2VpbiBnw7xsdGlnZXMgTGFiZWwsIGJlcmVpdHMgYWxzIEtvbnN0YW50ZSBkZWZpbmllcnRgKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBub0NvbnN0RGVmQWxsb3dlZCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKGBLb25zdGFudGVuZGVmaW5pdGlvbiBudXIgYW0gQW5mYW5nIGVybGF1YnRgKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgaW5mb0lzRGF0OCgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmZvKFwiw7xiZXJwcsO8ZmUgYXVmIDgtQml0IFdlcnQgLi4uIGdlZnVuZGVuXCIpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGluZm9Ob3REYXQ4KCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZm8oXCLDvGJlcnByw7xmZSBhdWYgOC1CaXQgV2VydCAuLi4gbmljaHQgZ2VmdW5kZW5cIik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW5mb0lzRGF0MTYoKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mbyhcIsO8YmVycHLDvGZlIGF1ZiAxNi1CaXQgV2VydCAuLi4gZ2VmdW5kZW5cIik7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW5mb05vdERhdDE2KCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZm8oXCLDvGJlcnByw7xmZSBhdWYgMTYtQml0IFdlcnQgLi4uIG5pY2h0IGdlZnVuZGVuXCIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgaW5mb0ludmFsaWRDb25zdChzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZm8oYCcke3N9JyBpc3Qga2VpbiBnw7xsdGlnZXIgS29uc3RhbnRlbm5hbWVgKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpbmZvTm90RGF0OENvbnN0KHM6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mbyhgc3VjaGUgOC1CaXQgS29uc3RhbnRlIDxzcGFuIGNsYXNzPVwiJHtsYWJlbENsYXNzfVwiPiR7c308c3Bhbj4gLi4uIG5pY2h0IGdlZnVuZGVuYCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW5mb05vdERhdDE2Q29uc3QoczpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmZvKGBzdWNoZSAxNi1CaXQgS29uc3RhbnRlIDxzcGFuIGNsYXNzPVwiJHtsYWJlbENsYXNzfVwiPiR7c308c3Bhbj4gLi4uICBuaWNodCBnZWZ1bmRlbmApO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGluZm9Jc0RhdDhDb25zdChzOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZm8oYHN1Y2hlIDgtQml0IEtvbnN0YW50ZSA8c3BhbiBjbGFzcz1cIiR7bGFiZWxDbGFzc31cIj4ke3N9PHNwYW4+IC4uLiBnZWZ1bmRlbmApO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGluZm9Jc0RhdDE2Q29uc3QoczpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmZvKGBzdWNoZSAxNi1CaXQgS29uc3RhbnRlIDxzcGFuIGNsYXNzPVwiJHtsYWJlbENsYXNzfVwiPiR7c308c3Bhbj4gLi4uIGdlZnVuZGVuYCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBpbmZvSW52YWxpZExhYmVsKHM6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mbyhgJyR7c30nIGlzdCBrZWluIGfDvGx0aWdlcyBMYWJlbGApO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGluZm9Jc0xhYmVsKHM6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mbyhgc3VjaGUgTGFiZWwgPHNwYW4gY2xhc3M9XCIke2xhYmVsQ2xhc3N9XCI+JHtzfTxzcGFuPiAuLi4gZ2VmdW5kZW5gKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE1uZW1vQ29tbWFuZCB9IGZyb20gXCIuL01uZW1vQ29tbWFuZFwiO1xyXG5pbXBvcnQgeyBlcmxhdWJ0ZUzDpG5nZUxfQywgTWFuaXB1bGF0b3IgfSBmcm9tIFwiLi9NYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyBTeW1ib2xMaXN0IH0gZnJvbSBcIi4vU3ltYm9sTGlzdFwiO1xyXG5pbXBvcnQgeyBJbnB1dExpbmUgfSBmcm9tIFwiLi9JbnB1dExpbmVcIjtcclxuaW1wb3J0IHsgSW5wdXRMaW5lVHlwZSwgRGF0YVR5cGUgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBTdHJpbmdDb25zdHJ1Y3RvciB9IGZyb20gXCIuL1N0cmluZ0NvbnN0cnVjdG9yXCI7XHJcblxyXG5cclxuY29uc3QgcGFyc2UxOnN0cmluZyA9IGA8c3BhbiBjbGFzcz1cImdyYXlcIj5wYXJzZSBMYWJlbGZlbGQvQmVmZWhsc2ZlbGQ6PC9zcGFuPmA7XHJcbmNvbnN0IHBhcnNlMjpzdHJpbmcgPSBgPHNwYW4gY2xhc3M9XCJncmF5XCI+cGFyc2UgQmVmZWhsc2ZlbGQ6PC9zcGFuPmA7XHJcbmNvbnN0IHBhcnNlMzpzdHJpbmcgPSBgPHNwYW4gY2xhc3M9XCJncmF5XCI+cGFyc2UgT3BlcmFuZGVuZmVsZCAoMSk6PC9zcGFuPmA7XHJcbmNvbnN0IHBhcnNlNDpzdHJpbmcgPSBgPHNwYW4gY2xhc3M9XCJncmF5XCI+cGFyc2UgT3BlcmFuZGVuZmVsZCAoMik6PC9zcGFuPmA7XHJcbmNvbnN0IHBhcnNlNTpzdHJpbmcgPSBgPHNwYW4gY2xhc3M9XCJncmF5XCI+Z2VzYW10ZXIgQmVmZWhsOjwvc3Bhbj5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNhdmVJbnB1dD0oSTpJbnB1dExpbmUsbjpudW1iZXIpPT57XHJcbiAgICBzd2l0Y2gobil7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBJLnNhdmVEZXNjcmlwdGlvbkxpbmUocGFyc2UxKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBJLnNhdmVEZXNjcmlwdGlvbkxpbmUocGFyc2UyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICBJLnNhdmVEZXNjcmlwdGlvbkxpbmUocGFyc2UzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICBJLnNhdmVEZXNjcmlwdGlvbkxpbmUocGFyc2U0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICBJLnNhdmVEZXNjcmlwdGlvbkxpbmUocGFyc2U1KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHNhdmUyID0oaTpJbnB1dExpbmUpID0+e1xyXG4gICAgc2F2ZUlucHV0KGksMik7XHJcbn1cclxuY29uc3Qgc2F2ZTMgPShpOklucHV0TGluZSkgPT57XHJcbiAgICBzYXZlSW5wdXQoaSwzKTtcclxufVxyXG5jb25zdCBzYXZlNCA9KGk6SW5wdXRMaW5lKSA9PntcclxuICAgIHNhdmVJbnB1dChpLDQpO1xyXG59XHJcbmNvbnN0IHJlZ2lzdGVyQWRyZXNzaWVydW5nOnN0cmluZyA9IFwiUmVnaXN0ZXJhZHJlc3NpZXJ1bmdcIlxyXG5jb25zdCBpbmRpcmVrdGVSZWdBZHJlc3NpZXJ1bmc6c3RyaW5nID0gXCJpbmRpcmVrdGUgUmVnaXN0ZXJhZHJlc3NpZXJ1bmdcIlxyXG5jb25zdCBpbW1lZGlhdGVBZHJlc3NpZXJ1bmc6c3RyaW5nID0gXCJJbW1lZGlhdGVhZHJlc3NpZXJ1bmdcIlxyXG5jb25zdCBhYnNvbHV0ZUFkcmVzc2llcnVuZzpzdHJpbmcgPSBcIkFic29sdXRhZHJlc3NpZXJ1bmdcIlxyXG5jb25zdCBzdGFja0JlZmVobDpzdHJpbmcgPSBcIlN0YWNrYmVmZWhsXCJcclxuY29uc3QgaW9BZHJlc3NpZXJ1bmc6c3RyaW5nID0gXCJJTyBBZHJlc3NpZXJ1bmdcIlxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDb21tYW5kTWFwe1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOkNvbW1hbmRNYXA7XHJcbiAgICBcclxuICAgIHB1YmxpYyBtbmVtb0NvbW1hbmRzOk1uZW1vQ29tbWFuZFtdPVtcclxuICAgICAgICAgICAgLy9UUkFOU1BPUlRCRUZFSExFXHJcbiAgICAgICAgLy9JbW1lZGlhdGUgbGFkZW5cclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJBXCIsXCJkYXRfOFwiLFwiMDAgMTExIDExMFwiLDIpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIkJcIixcImRhdF84XCIsXCIwMCAwMDAgMTEwXCIsMiksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIk1PVlwiLFwiQ1wiLFwiZGF0XzhcIixcIjAwIDAwMSAxMTBcIiwyKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJJWFwiLFwiZGF0XzE2XCIsXCIxMSAwMTEgMTAxMDAgMTAwIDAwMVwiLDQpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIkhMXCIsXCJkYXRfMTZcIixcIjAwIDEwMCAwMDFcIiwzKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJTUFwiLFwiZGF0XzE2XCIsXCIwMCAxMTAgMDAxXCIsMyksXHJcblxyXG4gICAgICAgIC8vRGlyZWt0ZSBBZHJlc3NpZXJ1bmcgUmVnaXN0ZXI8PlJlZ2lzdGVyXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIk1PVlwiLFwiQVwiLFwiQlwiLFwiMDEgMTExIDAwMFwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIkFcIixcIkNcIixcIjAxIDExMSAwMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJCXCIsXCJBXCIsXCIwMSAwMDAgMTExXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIk1PVlwiLFwiQlwiLFwiQ1wiLFwiMDEgMDAwIDAwMVwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIkNcIixcIkFcIixcIjAxIDAwMSAxMTFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJDXCIsXCJCXCIsXCIwMSAwMDEgMDAwXCIsMSksXHJcblxyXG4gICAgICAgIC8vRGlyZWt0ZSBBZHJlc3NpZXJ1bmcgUmVnaXN0ZXI8PlNwZWljaGVyXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIk1PVlwiLFwiQVwiLFwibGFiZWxcIixcIjAwIDExMSAwMTBcIiwzKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJsYWJlbFwiLFwiQVwiLFwiMDAgMTEwIDAxMFwiLDMpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIkhMXCIsXCJsYWJlbFwiLFwiMDAgMTAxIDAxMFwiLDMpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcImxhYmVsXCIsXCJITFwiLFwiMDAgMTAwIDAxMFwiLDMpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIklYXCIsXCJsYWJlbFwiLFwiMTEgMDExIDEwMTAwIDEwMSAwMTBcIiw0KSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTU9WXCIsXCJsYWJlbFwiLFwiSVhcIixcIjExIDAxMSAxMDEwMCAxMDAgMDEwXCIsNCksXHJcblxyXG4gICAgICAgIC8vUmVnaXN0ZXJpbmRpcmVrdGUgQWRyZXNzaWVydW5nXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIk1PVlwiLFwiQVwiLFwiW0hMXVwiLFwiMDEgMTExIDExMFwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJNT1ZcIixcIltITF1cIixcIkFcIixcIjAxIDExMCAxMTFcIiwxKSxcclxuXHJcbiAgICAgICAgLy9TdGFja2JlZmVobGVcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiUFVTSFwiLFwiXCIsXCJcIixcIjExIDExMCAxMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiUE9QXCIsXCJcIixcIlwiLFwiMTEgMTEwIDAwMVwiLDEpLFxyXG5cclxuICAgICAgICAvL0Vpbi1BdXNnYWJlYmVmZWhsZVxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJJTlwiLFwiQVwiLFwicG9ydFwiLFwiMTEgMDExIDAxMVwiLDIpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJPVVRcIixcInBvcnRcIixcIkFcIixcIjExIDAxMCAwMTFcIiwyKSxcclxuXHJcbiAgICAgICAgICAgIC8vQkVGRUhMRSBaVVIgREFURU5CRUFSQkVJVFVOR1xyXG4gICAgICAgIC8vSW5rcmVtZW50LSB1bmQgRGVrcmVtZW50YmVmZWhsZVxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJJTkNcIixcIkFcIixcIlwiLFwiMDAgMTExIDEwMFwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJJTkNcIixcIkJcIixcIlwiLFwiMDAgMDAwIDEwMFwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJJTkNcIixcIkNcIixcIlwiLFwiMDAgMDAxIDEwMFwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJJTkNcIixcIkhMXCIsXCJcIixcIjAwIDEwMCAwMTFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiSU5DXCIsXCJJWFwiLFwiXCIsXCIxMSAwMTEgMTAxMDAgMTAwIDAxMVwiLDIpLFxyXG5cclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiREVDXCIsXCJBXCIsXCJcIixcIjAwIDExMSAxMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiREVDXCIsXCJCXCIsXCJcIixcIjAwIDAwMCAxMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiREVDXCIsXCJDXCIsXCJcIixcIjAwIDAwMSAxMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiREVDXCIsXCJITFwiLFwiXCIsXCIwMCAxMDEgMDExXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkRFQ1wiLFwiSVhcIixcIlwiLFwiMTEgMDExIDEwMTAwIDEwMSAwMTFcIiwyKSxcclxuXHJcbiAgICAgICAgLy9Bcml0aG1ldGlzY2hlIE9wZXJhdGlvbmVuXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkFERFwiLFwiQVwiLFwiXCIsXCIxMCAwMDAgMTExXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkFERFwiLFwiQlwiLFwiXCIsXCIxMCAwMDAgMDAwXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkFERFwiLFwiQ1wiLFwiXCIsXCIxMCAwMDAgMDAxXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkFERFwiLFwiZGF0XzhcIixcIlwiLFwiMTEgMDAwIDExMFwiLDIpLFxyXG5cclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiU1VCXCIsXCJBXCIsXCJcIixcIjEwIDAxMCAxMTFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiU1VCXCIsXCJCXCIsXCJcIixcIjEwIDAxMCAwMDBcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiU1VCXCIsXCJDXCIsXCJcIixcIjEwIDAxMCAwMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiU1VCXCIsXCJkYXRfOFwiLFwiXCIsXCIxMSAwMTAgMTEwXCIsMiksXHJcblxyXG4gICAgICAgIC8vTG9naXNjaGUgT3BlcmF0aW9uZW5cclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiQU5EXCIsXCJBXCIsXCJcIixcIjEwIDEwMCAxMTFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiQU5EXCIsXCJCXCIsXCJcIixcIjEwIDEwMCAwMDBcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiQU5EXCIsXCJDXCIsXCJcIixcIjEwIDEwMCAwMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiQU5EXCIsXCJkYXRfOFwiLFwiXCIsXCIxMSAxMDAgMTEwXCIsMiksXHJcblxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJPUlwiLFwiQVwiLFwiXCIsXCIxMCAxMTAgMTExXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIk9SXCIsXCJCXCIsXCJcIixcIjEwIDExMCAwMDBcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiT1JcIixcIkNcIixcIlwiLFwiMTAgMTEwIDAwMVwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJPUlwiLFwiZGF0XzhcIixcIlwiLFwiMTEgMTEwIDExMFwiLDIpLFxyXG5cclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiWE9SXCIsXCJBXCIsXCJcIixcIjEwIDEwMSAxMTFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiWE9SXCIsXCJCXCIsXCJcIixcIjEwIDEwMSAwMDBcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiWE9SXCIsXCJDXCIsXCJcIixcIjEwIDEwMSAwMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiWE9SXCIsXCJkYXRfOFwiLFwiXCIsXCIxMSAxMDEgMTEwXCIsMiksXHJcblxyXG4gICAgICAgIC8vU2NoaWViZWJlZmVobGVcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiU0hMXCIsXCJcIixcIlwiLFwiMTEgMDAxIDAxMTAwIDEwMCAxMTFcIiwyKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiU0hSXCIsXCJcIixcIlwiLFwiMTEgMDAxIDAxMTAwIDExMSAxMTFcIiwyKSxcclxuXHJcbiAgICAgICAgLy9Sb3RpZXJiZWZlaGxlXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIlJDTFwiLFwiXCIsXCJcIixcIjAwIDAxMCAxMTFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiUk9MXCIsXCJcIixcIlwiLFwiMDAgMDAwIDExMVwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJSQ1JcIixcIlwiLFwiXCIsXCIwMCAwMTEgMTExXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIlJPUlwiLFwiXCIsXCJcIixcIjAwIDAwMSAxMTFcIiwxKSxcclxuXHJcbiAgICAgICAgLy9WZXJnbGVpY2hzb3BlcmF0aW9uZW5cclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiQ1BcIixcIkFcIixcIlwiLFwiMTAgMTExIDExMVwiLDEpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJDUFwiLFwiQlwiLFwiXCIsXCIxMCAxMTEgMDAwXCIsMSksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkNQXCIsXCJDXCIsXCJcIixcIjEwIDExMSAwMDFcIiwxKSxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiQ1BcIixcImRhdF84XCIsXCJcIixcIjExIDExMSAxMTBcIiwyKSxcclxuXHJcblxyXG4gICAgICAgICAgICAvL0JFRkVITEUgRsOcUiBWRVJaV0VJR1VOR0VOXHJcbiAgICAgICAgLy9CZWRpbmd0ZSBTcHLDvG5nZVxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJKUE5aXCIsXCJsYWJlbFwiLFwiXCIsXCIxMSAwMDAgMDEwXCIsMyksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkpQWlwiLFwibGFiZWxcIixcIlwiLFwiMTEgMDAxIDAxMFwiLDMpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJKUE5DXCIsXCJsYWJlbFwiLFwiXCIsXCIxMSAwMTAgMDEwXCIsMyksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkpQQ1wiLFwibGFiZWxcIixcIlwiLFwiMTEgMDExIDAxMFwiLDMpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJKUE5PXCIsXCJsYWJlbFwiLFwiXCIsXCIxMSAxMDAgMDEwXCIsMyksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkpQT1wiLFwibGFiZWxcIixcIlwiLFwiMTEgMTAxIDAxMFwiLDMpLFxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJKUE5TXCIsXCJsYWJlbFwiLFwiXCIsXCIxMSAxMTAgMDEwXCIsMyksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIkpQU1wiLFwibGFiZWxcIixcIlwiLFwiMTEgMTExIDAxMFwiLDMpLFxyXG5cclxuICAgICAgICAvL1VuYmVkaW5ndGVyIFNwcnVuZ1xyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJKUFwiLFwibGFiZWxcIixcIlwiLFwiMTEgMDAwIDAxMVwiLDMpLFxyXG5cclxuICAgICAgICAvL1JlZ2lzdGVyaW5kZXJrdGVyIFNwcnVuZ1xyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJKUFwiLFwiW0lYXVwiLFwiXCIsXCIxMSAwMTEgMTAxMTEgMTAxIDAwMVwiLDIpLFxyXG5cclxuXHJcbiAgICAgICAgLy9VbnRlcnByb2dyYW1tYmVmZWhsZVxyXG4gICAgICAgIG5ldyBNbmVtb0NvbW1hbmQoXCJDQUxMXCIsXCJsYWJlbFwiLFwiXCIsXCIxMSAwMDEgMTAxXCIsMyksXHJcbiAgICAgICAgbmV3IE1uZW1vQ29tbWFuZChcIlJFVFwiLFwiXCIsXCJcIixcIjExIDAwMSAwMDFcIiwxKSxcclxuXHJcbiAgICAgICAgICAgIC8vQ1BVLVNURVVFUkJFRkVITEVcclxuICAgICAgICAvL0xlZXJiZWZlaGxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiTk9QXCIsXCJcIixcIlwiLFwiMDAgMDAwIDAwMFwiLDEpLFxyXG5cclxuICAgICAgICAvL0hhbHRiZWZlaGxcclxuICAgICAgICBuZXcgTW5lbW9Db21tYW5kKFwiSEFMVFwiLFwiXCIsXCJcIixcIjAxIDExMCAxMTBcIiwxKSxcclxuICAgIF07XHJcbiAgICBwcml2YXRlIHN5bWJvbGxpc3Q6U3ltYm9sTGlzdD1TeW1ib2xMaXN0LmdldEluc3RhbmNlKCk7XHJcbiAgICBcclxuICAgIHB1YmxpYyBtQ29kZXM6c3RyaW5nW109W1wiTU9WXCIsIFwiUFVTSFwiLCBcIlBPUFwiLCBcIklOXCIsIFwiT1VUXCIsIFwiSU5DXCIsIFwiREVDXCIsIFwiQUREXCIsIFwiU1VCXCIsIFwiQU5EXCIsIFwiT1JcIiwgXCJYT1JcIiwgXCJTSExcIiwgXCJTSFJcIiwgXCJSQ0xcIiwgXCJST0xcIiwgXCJSQ1JcIiwgXCJST1JcIiwgXCJDUFwiLCBcIkpQTlpcIiwgXCJKUFpcIiwgXCJKUE5DXCIsIFwiSlBDXCIsIFwiSlBOT1wiLCBcIkpQT1wiLCBcIkpQTlNcIiwgXCJKUFNcIiwgXCJKUFwiLCBcIkNBTExcIiwgXCJSRVRcIiwgXCJOT1BcIiwgXCJIQUxUXCJdO1xyXG5cclxuICAgIHB1YmxpYyBwc2V1ZG9NQ29kZXM6c3RyaW5nW109W1wiREJcIixcIkRXXCIsXCJSU1wiLFwiT1JHXCIsXCJFWFRcIixcIkVOVFwiXTtcclxuXHJcbiAgICBwdWJsaWMgUmVnczpzdHJpbmdbXSA9IFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIklYXCIsIFwiSExcIiwgXCJTUFwiLCBcIltITF1cIiwgXCJbSVhdXCJdO1xyXG5cclxuICAgIHByaXZhdGUgY29uc3REZWZGbGFnOmJvb2xlYW49dHJ1ZTtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCl7XHJcbiAgICAgICAgaWYoIUNvbW1hbmRNYXAuaW5zdGFuY2Upe1xyXG4gICAgICAgICAgICBDb21tYW5kTWFwLmluc3RhbmNlPSBuZXcgQ29tbWFuZE1hcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQ29tbWFuZE1hcC5pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXRHZWZ1bmRlbihzMTpzdHJpbmcsczI6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImVpbmdlcnVja3RcIj5nZWZ1bmRlbjogJHtzMSE9XCJcIj9zMSsnICc6XCJcIn0gLT4gPHNwYW4gY2xhc3M9XCJib2xkXCI+JHtzMn08L3NwYW4+PC9zcGFuPmA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvcm1hdEVyd2FydGV0KHMxOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIC8vIHJldHVybiAnZXJ3YXJ0ZTogJytzMTtcclxuICAgICAgICBzMSA9IHMxLnJlcGxhY2UoXCJkYXRfOFwiLFwiOC1iaXQgV2VydFwiKS5yZXBsYWNlKFwiZGF0XzE2XCIsXCIxNi1iaXQgV2VydFwiKS5yZXBsYWNlKFwibGFiZWxcIixcIkxhYmVsXCIpO1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJlaW5nZXJ1Y2t0XCI+ZXJ3YXJ0ZSZuYnNwOzogJHtzMX08L3NwYW4+YDtcclxuICAgIH1cclxuICAgIGZvcm1hdEVya2FubnQoczE6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImVpbmdlcnVja3RcIj4gKCR7czF9KTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgZm9ybWF0RXJyb3JNYXNzYWdlKHMxOnN0cmluZyk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJlcnJvclJlZFwiPmVycm9yOiAke3MxfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgZmlsdGVyRm9yRW10cHlTdHJpbmdzKHM6c3RyaW5nW10pOnN0cmluZ1tde1xyXG4gICAgICAgIHJldHVybiBzLmZpbHRlcihlPT57IGlmKCEvXltcXHMrXS9nLnRlc3QoZSkgJiYgZSE9XCJcIil7cmV0dXJuIGU7fX0pO1xyXG4gICAgfVxyXG4gICAgcmVzZXRDb25zdERlZkZsYWcoKXtcclxuICAgICAgICB0aGlzLmNvbnN0RGVmRmxhZz10cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIG1hcElucHV0TGluZUJ5Q2FzZShpOklucHV0TGluZSk6Ym9vbGVhbntcclxuICAgICAgICBsZXQgc3RyaW5nczpzdHJpbmdbXSA9IE1hbmlwdWxhdG9yLnNwbGl0U3RyaW5nSGFsZihpLmdldEluaXRpYWxMaW5lKCksJzsnKTtcclxuICAgICAgICBsZXQgY29tbWFuZExpbmUgPSBzdHJpbmdzWzBdO1xyXG4gICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPjEpe1xyXG4gICAgICAgIGkuc2V0Q29tbWVudChzdHJpbmdzWzFdLnRyaW0oKSk7fVxyXG4gICAgICAgIHNhdmVJbnB1dChpLDEpO1xyXG4gICAgICAgIHRoaXMuY29uc3REZWZGbGFnXHJcbiAgICAgICAgICAgID9pLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChgTGFiZWxkZWYuLCBNbmVtb2NvZGUgb2RlciBLb25zdGFudGUgKCtFUVUpYCkpXHJcbiAgICAgICAgICAgIDppLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChgTGFiZWxkZWYuIG9kZXIgTW5lbW9jb2RlYCkpO1xyXG5cclxuICAgICAgICAvL0F1ZmzDtnN1bmcgdm9uIGxlYmVsIHdlbm4gOiBnZWZ1bmRlblxyXG4gICAgICAgIGlmKGNvbW1hbmRMaW5lLmluY2x1ZGVzKFwiOlwiKSl7XHJcbiAgICAgICAgICAgIHN0cmluZ3M9TWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmKGNvbW1hbmRMaW5lLFwiOlwiKTtcclxuICAgICAgICAgICAgaS5zZXRMYWJlbFRvKFwiXCIpO1xyXG4gICAgICAgICAgICAvL0RhcmYgbmljaHQgYmVyZWl0cyBkZWZpbmllcnQgbGFiZWwgc2VpbiBkaWUgaW4gU3ltYm9sdGFiZWxsZSBpc3RcclxuICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xsaXN0LmlzQ29uc3Qoc3RyaW5nc1swXSkpe1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLm5hbWVUYWtlbkZvckNvbnN0KHN0cmluZ3NbMF0pKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFJlc3QoXCI6IFwiK3N0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdC5pc0xhYmVsKHN0cmluZ3NbMF0pKXtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sbGlzdC5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChzdHJpbmdzWzBdKSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcnJvck1hc3NhZ2UoYExhYmVsICR7c3RyaW5nc1swXX0gaXN0IHNjaG9uIGJlcmVpdHMgYmVzZXR6dGApKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmVyckxhYmVsRGVmKHN0cmluZ3NbMF0pKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFJlc3QoXCI6IFwiK3N0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZighdGhpcy5zeW1ib2xsaXN0LmlzRWxpZ2libGUoc3RyaW5nc1swXSkpe1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRMYWJlbChzdHJpbmdzWzBdKSk7ICBcclxuICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1swXSk7XHJcbiAgICAgICAgICAgICAgICBpLnNldFJlc3QoXCI6IFwiK3N0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIkRvcHBlbHB1bmt0IFwiLGBMYWJlbCAnJHtzdHJpbmdzWzBdfSdgKSk7IC8vID8/XHJcbiAgICAgICAgICAgICAgICBpLnNldExhYmVsVG8oc3RyaW5nc1swXSk7XHJcbiAgICAgICAgICAgICAgICAvL1dlbm4genUgbGFuZywgV2FybnVuZyBnZXNldHp0XHJcbiAgICAgICAgICAgICAgICBpZihzdHJpbmdzWzBdLmxlbmd0aD5lcmxhdWJ0ZUzDpG5nZUxfQyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLndhckxhYmVsWnVMYW5nKHN0cmluZ3NbMF0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdC5zZXRMYWJlbFdpdGhvdXRQb3NpdGlvbihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgIHNhdmVJbnB1dChpLDIpO1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJ3YXJ0ZXQoXCIoUHNldWRvLSlNbmVtb2NvZGVcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYoc3RyaW5nc1sxXT09XCJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKGA8c3BhbiBjbGFzcz1cImVpbmdlcnVja3RcIj5nZWZ1bmRlbjogRW5kZSBkZXIgQ29kZXplaWxlPC9zcGFuPmApOyAvLyA/P1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlBTRVVET1RSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kTGluZT1zdHJpbmdzWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0cmluZ3MgPSBNYW5pcHVsYXRvci5zcGxpdFN0cmluZ0hhbGZVbmZpbHRlcmVkKGNvbW1hbmRMaW5lLFwiIFwiKTtcclxuICAgICAgICBzdHJpbmdzID0gdGhpcy5maWx0ZXJGb3JFbXRweVN0cmluZ3Moc3RyaW5ncyk7XHJcbiAgICAgICAgLy9lcnN0ZXIgVGVybSBNbmVtb0NvZGVcclxuICAgICAgICBpZih0aGlzLm1Db2Rlcy5pbmNsdWRlcyhzdHJpbmdzWzBdLnRvVXBwZXJDYXNlKCkpKXtcclxuICAgICAgICAgICAgaS5zZXRGaXJzdFBhcnQoc3RyaW5nc1swXSk7XHJcbiAgICAgICAgICAgIHN0cmluZ3NbMF0gPSBzdHJpbmdzWzBdLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRvTW5lbW9Db2RlKGksc3RyaW5ncyk7XHJcbiAgICAgICAgfS8vZXJzdGVyIFRlcm0gUHNldWRvTW5lbW9Db2RlIC0gbcO2Z2xpY2hlIENvbnN0YW50ZW5OYW1lXHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnBzZXVkb01Db2Rlcy5pbmNsdWRlcyhzdHJpbmdzWzBdLnRvVXBwZXJDYXNlKCkpIHx8IHRoaXMuc3ltYm9sbGlzdC5pc0VsaWdpYmxlKHN0cmluZ3NbMF0pKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2V0b1BzZXVkb01uZW1vQ29kZShpLHN0cmluZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy93ZW5uIG5pY2h0IGfDvGx0aWdcclxuICAgICAgICAgICAgLy8gPz9cclxuICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJyb3JNYXNzYWdlKGAke3N0cmluZ3NbMF19IGlzdCBrZWluIGfDvGx0aWdlciAoUHNldWRvLSlNbmVtb2NvZGUgb2RlciBMYWJlbC9Lb25zdGFudGVgKSk7XHJcbiAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMF0pKTtcclxuICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nc1sxXSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGkuc2V0UmVzdChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlVG9NbmVtb0NvZGUoaTpJbnB1dExpbmUsc3RyaW5nczpzdHJpbmdbXSk6Ym9vbGVhbntcclxuICAgICAgICBsZXQgY29uc29sZXRvc3RyaW5nPVwiXCI7XHJcbiAgICAgICAgbGV0IG1hdGNoZXM6TW5lbW9Db21tYW5kW109W107XHJcbiAgICAgICAgbGV0IHRvU2F2ZTpzdHJpbmc9XCJcIjtcclxuICAgICAgICB0aGlzLmNvbnN0RGVmRmxhZz1mYWxzZTtcclxuXHJcbiAgICAgICAgLy9CZWhhbmRsdW5nIGFsbGVyIEbDpGxsZSB3byBkZXIgMS4gVGVybSBtaXQgZWluZW0gTW5lbW9Db2RlIGFuZmFuZ3RcclxuICAgICAgICBzd2l0Y2goc3RyaW5nc1swXSl7XHJcbiAgICAgICAgICAgIGNhc2UgJ01PVic6XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIk1uZW1vY29kZSBcIitzdHJpbmdzWzBdLHN0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG5cclxuICAgICAgICAgICAgICAgIHNhdmUzKGkpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcz10aGlzLm1uZW1vQ29tbWFuZHMuZmlsdGVyKGU9PntyZXR1cm4gZS5nZXRNQ29kZSgpPT0nTU9WJ30pOyAvL0FsbGUgdHJlZmZlciBhdWYgTU9WIENvZGVzIGZpbHRyaWVydFxyXG4gICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nPXRoaXMuZ2V0RGVzdHMobWF0Y2hlcykuam9pbihcIiwgXCIpO1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJ3YXJ0ZXQoY29uc29sZXRvc3RyaW5nKSk7ICAgICAgICAvL0F1c2dhYmUgdm9uIGVyd2FydGV0dGVuIEJlZmVobGVuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7IC8vRVJST1JcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0cmluZ3M9TWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmVW5maWx0ZXJlZChzdHJpbmdzWzFdLFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIC8vIHN0cmluZ3MgPSB0aGlzLmZpbHRlckZvckVtdHB5U3RyaW5ncyhzdHJpbmdzKTtcclxuICAgICAgICAgICAgICAgIC8vIDIuIFRlcm0gUmVnaXN0ZXJcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuZ2V0RGVzdHMobWF0Y2hlcykuaW5jbHVkZXMoc3RyaW5nc1swXS50b1VwcGVyQ2FzZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICYmdGhpcy5SZWdzLmluY2x1ZGVzKHN0cmluZ3NbMF0udG9VcHBlckNhc2UoKSkpeyAvLyBBIHx8IEIgfHwgQyB8fCBJWCB8fCBITCB8fCBTUFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0b1NhdmU9c3RyaW5nc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQodG9TYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdzWzBdID0gc3RyaW5nc1swXS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiUmVnaXN0ZXIgXCIrc3RyaW5nc1swXSxpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkrXCIgXCIrc3RyaW5nc1swXStcIiAuLi5cIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PXN0cmluZ3NbMF0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xldG9zdHJpbmc9dGhpcy5nZXRTY291cmNlcyhtYXRjaGVzKS5qb2luKFwiLCBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZTQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJ3YXJ0ZXQoY29uc29sZXRvc3RyaW5nKSk7ICAgIC8vQXVzZ2FiZSB2b24gZXJ3YXJ0ZXR0ZW4gQmVmZWhsZW5cclxuICAgICAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLnRvb2Zld0NtZCgpKTsgLy9FUlJPUlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIFRlcm0gUmVnaXN0ZXJcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmdldFNjb3VyY2VzKG1hdGNoZXMpLmluY2x1ZGVzKHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKSkmJnRoaXMuUmVncy5pbmNsdWRlcyhzdHJpbmdzWzFdLnRvVXBwZXJDYXNlKCkpKXsgLy8gQSB8fCBCIHx8IEMgfHwgW0hMXVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TYXZlPXN0cmluZ3NbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3NbMV0gPSBzdHJpbmdzWzFdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiUmVnaXN0ZXIgXCIrc3RyaW5nc1sxXSxpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkrXCIgXCIraS5nZXRTZWNvbmRQYXJ0KCkudG9VcHBlckNhc2UoKStcIiwgXCIrc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1tYXRjaGVzLmZpbHRlcihlPT57ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWxsZSB0cmVmZmVyIGF1ZiB6dXRyZWZmZW5kZSBSZWdpc3RlciBmaWx0cmllcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0U291cmNlKCkgPT1zdHJpbmdzWzFdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KHRvU2F2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzdHJpbmdzWzBdID09IFwiW0hMXVwiIHx8IHN0cmluZ3NbMV09PVwiW0hMXVwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGluZGlyZWt0ZVJlZ0FkcmVzc2llcnVuZykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KHJlZ2lzdGVyQWRyZXNzaWVydW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0SENvZGUobWF0Y2hlc1swXS5nZXRIZXhDb2RlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0J1ZyBhdWZnZXRyZW50ZW4gb2RlciB1bmJlYWNodGV0dGVyIGZhbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMy4gVGVybSBuaWNodCBSZWdpc3RlciAtPiBPRkZTRVQgTGFiZWwgfHwgZGF0IHx8IGNvbnN0IHx8IGxhYmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cmluZ3NbMV0rXCIgXCIrdGhpcy5nZXREYXRhVHlwZShzdHJpbmdzWzFdKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5nZXREYXRhVHlwZShzdHJpbmdzWzFdKSAhPSBEYXRhVHlwZS5OT05FKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlOkRhdGFUeXBlPXRoaXMuZ2V0RGF0YVR5cGUoc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2godHlwZSl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuZGF0Xzg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnNvbGV0b3N0cmluZy5pbmNsdWRlcyhcImRhdF84XCIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaS5zYXZlRGVzY3JpcHRpb25MaW5lKGBHZWZ1bmRlbiAtPiAnZGF0XzgnYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0lzRGF0OCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiOC1iaXQgV2VydCBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgoc3RyaW5nc1sxXSksXCJNT1YgXCIrc3RyaW5nc1swXStcIiwgXCIrTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQ4KHN0cmluZ3NbMV0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIjgtYml0IFdlcnQgXCIrc3RyaW5nc1sxXSxcIk1PViBcIitzdHJpbmdzWzBdK1wiLCBcIitzdHJpbmdzWzFdKSk7IC8vIERlY09ySGV4XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0U291cmNlKCk9PVwiZGF0XzhcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gw4RuZGVydW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNldFRoaXJkUGFydChNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChpbW1lZGlhdGVBZHJlc3NpZXJ1bmcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwiZGF0XzE2XCIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaS5zYXZlRGVzY3JpcHRpb25MaW5lKGBHZWZ1bmRlbiAtPiAnZGF0XzE2J2ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Jc0RhdDE2KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCIxNi1iaXQgV2VydCBcIitzdHJpbmdzWzFdLFwiTU9WIFwiK3N0cmluZ3NbMF0rXCIsIFwiK3N0cmluZ3NbMV0pKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiMTYtYml0IFdlcnQgXCIrTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihzdHJpbmdzWzFdKSxcIk1PViBcIitzdHJpbmdzWzBdK1wiLCBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KHN0cmluZ3NbMV0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPW1hdGNoZXMuZmlsdGVyKGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlLmdldFNvdXJjZSgpPT1cImRhdF8xNlwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDDhG5kZXJ1bmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGltbWVkaWF0ZUFkcmVzc2llcnVuZykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpOyAvL2NhbiBvbmx5IGJlIFtITF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuZGF0XzE2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb25zb2xldG9zdHJpbmcuaW5jbHVkZXMoXCJkYXRfMTZcIikgJiYgWydITCcsJ1NQJywnSVgnXS5pbmNsdWRlcyhzdHJpbmdzWzBdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIjE2LWJpdCBXZXJ0IFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0MTYoc3RyaW5nc1sxXSksXCJNT1YgXCIrc3RyaW5nc1swXStcIiwgXCIrTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihzdHJpbmdzWzFdKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCIxNi1iaXQgV2VydCBcIitzdHJpbmdzWzFdLFwiTU9WIFwiK3N0cmluZ3NbMF0rXCIsIFwiK3N0cmluZ3NbMV0pKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0U291cmNlKCk9PVwiZGF0XzE2XCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGltbWVkaWF0ZUFkcmVzc2llcnVuZykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwiZGF0XzhcIikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQ4KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob0NvbnN0KHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbmZvTm9MYWJlbChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQ4UGx1cyhzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpOyAvL2NhbiBvbmx5IGJlIFtITF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkNPTlNUQU5UOlxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc3ltYm9sbGlzdC5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKHN0cmluZ3NbMV0pPy5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZT09dW5kZWZpbmVkKXsgLy9idWcgQXVmZ2V0cmV0ZW4gb2RlciBLb25zdGFudGUgbmljaHQgYW5nZWxlZ3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb1ZhbHVlRm9yQ29uc3Qoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gdGhpcy5nZXREYXRhVHlwZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbnNvbGV0b3N0cmluZy5pbmNsdWRlcyhcImRhdF84XCIpICYmIHR5cGU9PURhdGFUeXBlLmRhdF84KXsgLy9Lb25zdGFudGUgaGF0IERhdGVudHlwICdkYXRfOCcgdW5kIGlzdCBlcndhcnRldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1tYXRjaGVzLmZpbHRlcihlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5nZXRTb3VyY2UoKT09XCJkYXRfOFwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb05vdERhdDgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0lzRGF0OENvbnN0KHN0cmluZ3NbMV0pKTsgLy9DT05TVCBBTklNQVRJT04/Pz8/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJLb25zdGFudGUgXCIrYDxzcGFuIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtzdHJpbmdzWzFdfTwvc3Bhbj5gK1wiIG1pdCBkZW0gV2VydCBcIit2YWx1ZSxpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkrXCIgXCIrc3RyaW5nc1swXStcIiwgXCIrc3RyaW5nc1sxXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoaW1tZWRpYXRlQWRyZXNzaWVydW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGNvbnNvbGV0b3N0cmluZy5pbmNsdWRlcyhcImRhdF8xNlwiKSl7IC8vS29uc3RhbnRlIGhhdCBEYXRlbnR5cCAnZGF0XzE2JyB1bmQgaXN0IGVyd2FydGV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPW1hdGNoZXMuZmlsdGVyKGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0U291cmNlKCk9PVwiZGF0XzE2XCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb05vdERhdDE2KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Jc0RhdDE2Q29uc3Qoc3RyaW5nc1sxXSkpOyAvL0NPTlNUIEFOSU1BVElPTj8/Pz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIktvbnN0YW50ZSBcIitgPHNwYW4gY2xhc3M9XCJsYWJlbEJsdWVcIj4ke3N0cmluZ3NbMV19PC9zcGFuPmArXCIgbWl0IGRlbSBXZXJ0IFwiK3ZhbHVlLGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKStcIiBcIitzdHJpbmdzWzBdK1wiLCBcIitzdHJpbmdzWzFdKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChpbW1lZGlhdGVBZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGNvbnNvbGV0b3N0cmluZy5pbmNsdWRlcyhcImRhdF84XCIpKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb05vdERhdDgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb05vdERhdDhDb25zdChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZihjb25zb2xldG9zdHJpbmcuaW5jbHVkZXMoXCJsYWJlbFwiKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLm5vdFZhbGlkTGFiZWxTaW5jZUl0c0NvbnN0KHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQ4UGx1cyhzdHJpbmdzWzFdKSk7IC8vS09OU1RBTlRFIFpVIEdST8OfP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYoY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwibGFiZWxcIikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5ub3RWYWxpZExhYmVsU2luY2VJdHNDb25zdChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkxBQkVMOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwibGFiZWxcIikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUxID0gdGhpcy5zeW1ib2xsaXN0LmdldFNwZWNpZmljTGFiZWxCeU5hbWUoc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGBMYWJlbCAnPHNwYW4gY2xhc3M9XCJsYWJlbEJsdWVcIj4ke3ZhbHVlMT8uZ2V0TmFtZSgpfTwvc3Bhbj4nYCxpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkrXCIgXCIraS5nZXRTZWNvbmRQYXJ0KCkudG9VcHBlckNhc2UoKStcIiwgXCIrdmFsdWUxPy5nZXROYW1lKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV0FSTklORyBFSU5TRVRaRU4/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPW1hdGNoZXMuZmlsdGVyKGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0U291cmNlKCk9PVwibGFiZWxcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoYWJzb2x1dGVBZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRUxMSUdJQkxFOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwibGFiZWxcIikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xsaXN0LnNldExhYmVsV2l0aG91dFBvc2l0aW9uKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgTGFiZWwgJzxzcGFuIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtzdHJpbmdzWzFdfTwvc3Bhbj4nYCxpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkrXCIgXCIraS5nZXRTZWNvbmRQYXJ0KCkudG9VcHBlckNhc2UoKStcIiwgXCIrc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRoaXJkUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1tYXRjaGVzLmZpbHRlcihlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlLmdldFNvdXJjZSgpPT1cImxhYmVsXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGFic29sdXRlQWRyZXNzaWVydW5nKSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdTd2l0Y2hEZWZhdWx0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtYXRjaGVzLmxlbmd0aD09MSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUaGlyZFBhcnQoc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgobWF0Y2hlc1swXS5nZXRTaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0SENvZGUobWF0Y2hlc1swXS5nZXRIZXhDb2RlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vbcO2Z2xpY2hlciB3ZWlzZSBPRkZTRVQgTGFiZWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihzdHJpbmdzWzFdLnRvVXBwZXJDYXNlKCkuc3RhcnRzV2l0aChcIk9GRlNFVFwiKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcDpzdHJpbmdbXT1NYW5pcHVsYXRvci5zcGxpdFN0cmluZ0hhbGYoc3RyaW5nc1sxXSxcIiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0ZW1wLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmdldERhdGFUeXBlKHRlbXBbMV0pID09IERhdGFUeXBlLkxBQkVMKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwiZGF0XzE2XCIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgT0ZGU0VUYCxpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkrXCIgXCIraS5nZXRTZWNvbmRQYXJ0KCkudG9VcHBlckNhc2UoKStcIiwgT0ZGU0VUIFwiK3RlbXBbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPW1hdGNoZXMuZmlsdGVyKGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5nZXRTb3VyY2UoKT09XCJkYXRfMTZcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuZ2V0RGF0YVR5cGUodGVtcFsxXSkgPT0gRGF0YVR5cGUuRUxMSUdJQkxFKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighY29uc29sZXRvc3RyaW5nLmluY2x1ZGVzKFwiZGF0XzE2XCIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbGxpc3Quc2V0TGFiZWxXaXRob3V0UG9zaXRpb24odGVtcFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYE9GRlNFVGAsaS5nZXRGaXJzdFBhcnQoKS50b1VwcGVyQ2FzZSgpK1wiIFwiK2kuZ2V0U2Vjb25kUGFydCgpLnRvVXBwZXJDYXNlKCkrXCIsIE9GRlNFVCBcIit0ZW1wWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGVtcFsxXS5sZW5ndGg+ZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3Iud2FyTGFiZWxadUxhbmcodGVtcFsxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPW1hdGNoZXMuZmlsdGVyKGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5nZXRTb3VyY2UoKT09XCJkYXRfMTZcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5ub1ZhbGlkTGFiZWxBZnRlck9mZnNldCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGltbWVkaWF0ZUFkcmVzc2llcnVuZykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRoaXJkUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldExlbmd0aChtYXRjaGVzWzBdLmdldFNpemUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRPZmZzZXRMYWJlbCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0cmluZ3NbMV0udHJpbSgpPT1cIlwiIHx8IHN0cmluZ3NbMV0udHJpbSgpPT1cIiBcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLnRvb2Zld0NtZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzBdKSB8fCB0aGlzLnN5bWJvbGxpc3QuaXNFbGlnaWJsZShzdHJpbmdzWzBdKSl7IC8vIE1VU1MgbGFiZWwgc2VpblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzBdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYExhYmVsICc8c3BhbiBjbGFzcz1cImxhYmVsQmx1ZVwiPiR7c3RyaW5nc1swXX08L3NwYW4+J2AsaS5nZXRGaXJzdFBhcnQoKS50b1VwcGVyQ2FzZSgpK1wiIFwiK3N0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcgRUlOU0VUWkVOP1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PVwibGFiZWxcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydChzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5zeW1ib2xsaXN0LmlzTGFiZWwoc3RyaW5nc1swXSkpeyAvL1dlbm4gbGFiZWwgdW5iZWthbm50IGRhbm4gbmV1ZSBBbnNldHplblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bWJvbGxpc3Quc2V0TGFiZWxXaXRob3V0UG9zaXRpb24oc3RyaW5nc1swXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzYXZlNChpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xldG9zdHJpbmc9dGhpcy5nZXRTY291cmNlcyhtYXRjaGVzKS5qb2luKFwiLCBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJ3YXJ0ZXQoY29uc29sZXRvc3RyaW5nKSk7ICAgIC8vQXVzZ2FiZSB2b24gZXJ3YXJ0ZXR0ZW4gQmVmZWhsZW5cclxuICAgICAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLnRvb2Zld0NtZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmdldFNjb3VyY2VzKG1hdGNoZXMpLmluY2x1ZGVzKHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1NhdmU9c3RyaW5nc1sxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nc1sxXSA9IHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJSZWdpc3RlciBcIitzdHJpbmdzWzFdLGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKStcIiBcIitpLmdldFNlY29uZFBhcnQoKStcIixcIitzdHJpbmdzWzFdKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcz1tYXRjaGVzLmZpbHRlcihlPT57ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWxsZSB0cmVmZmVyIGF1ZiB6dXRyZWZmZW5kZSBSZWdpc3RlciBmaWx0cmllcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0U291cmNlKCkgPT1zdHJpbmdzWzFdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KHRvU2F2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGFic29sdXRlQWRyZXNzaWVydW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0SENvZGUobWF0Y2hlc1swXS5nZXRIZXhDb2RlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnTm9Db21tYW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzBdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihzdHJpbmdzWzFdIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFJlc3QoXCIsXCIrc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdQT1AnOmNhc2UgJ1BVU0gnOlxyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJNbmVtb2NvZGUgXCIrc3RyaW5nc1swXSxzdHJpbmdzWzBdKSlcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtYXRjaGVzPXRoaXMubW5lbW9Db21tYW5kcy5maWx0ZXIoZT0+e3JldHVybiBlLmdldE1Db2RlKCk9PSdQVVNIJ30pO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcz10aGlzLm1uZW1vQ29tbWFuZHMuZmlsdGVyKGU9PntyZXR1cm4gZS5nZXRNQ29kZSgpPT1zdHJpbmdzWzBdfSk7XHJcbiAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aD4xKXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IudG9vTWFueUNtZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChzdGFja0JlZmVobCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldExlbmd0aChtYXRjaGVzWzBdLmdldFNpemUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNhc2UgJ0lOJzpcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiTW5lbW9jb2RlIFwiK3N0cmluZ3NbMF0sc3RyaW5nc1swXStcIiAuLi5cIikpXHJcblxyXG4gICAgICAgICAgICAgICAgc2F2ZTMoaSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzPXRoaXMubW5lbW9Db21tYW5kcy5maWx0ZXIoZT0+e3JldHVybiBlLmdldE1Db2RlKCk9PSdJTid9KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGV0b3N0cmluZz10aGlzLmdldERlc3RzKG1hdGNoZXMpLmpvaW4oXCIsIFwiKTtcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVyd2FydGV0KFwiQVwiKSk7XHJcbiAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IudG9vZmV3Q21kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3IoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3RyaW5ncyA9IE1hbmlwdWxhdG9yLnNwbGl0U3RyaW5nSGFsZihzdHJpbmdzWzFdLFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZ3MgPSB0aGlzLmZpbHRlckZvckVtdHB5U3RyaW5ncyhzdHJpbmdzKTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3NbMF0udG9VcHBlckNhc2UoKSA9PVwiQVwiKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJSZWdpc3RlciBBXCIsXCJJTiBBIC4uLlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNhdmU0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVyd2FydGV0KFwiZGF0XzhcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGV0b3N0cmluZz1cImRhdF84XCJcclxuICAgICAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLnRvb2Zld0NtZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbGxpc3QuaXNDb25zdChzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFNYW5pcHVsYXRvci5pc0RhdF84KHRoaXMuc3ltYm9sbGlzdC5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKHN0cmluZ3NbMV0pIS5nZXRWYWx1ZSgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA/P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmV4cGVjdGVkRGF0OENvbnN0VG9CaWcoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiS29uc3RhbnRlIFwiK3N0cmluZ3NbMV0sXCJJTiBBLCBcIitzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoaW9BZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcgRUlOU0VUWkVOP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRoaXJkUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKE1hbmlwdWxhdG9yLmlzRGF0Xzgoc3RyaW5nc1sxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIjgtYml0IFdlcnQgXCIrc3RyaW5nc1sxXSxcIklOIEEsIFwiK3N0cmluZ3NbMV0pKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCI4LWJpdCBXZXJ0IFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChzdHJpbmdzWzFdKSxcIklOIEEsIFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChzdHJpbmdzWzFdKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGlvQWRyZXNzaWVydW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRoaXJkUGFydCgoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgobWF0Y2hlc1swXS5nZXRTaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKG1hdGNoZXNbMF0uZ2V0SGV4Q29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzBdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihzdHJpbmdzWzFdIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFJlc3QoXCIsIFwiK3N0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnT1VUJzpcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiTW5lbW9jb2RlIFwiK3N0cmluZ3NbMF0sc3RyaW5nc1swXStcIiAuLi5cIikpXHJcblxyXG4gICAgICAgICAgICAgICAgc2F2ZTMoaSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzPXRoaXMubW5lbW9Db21tYW5kcy5maWx0ZXIoZT0+e3JldHVybiBlLmdldE1Db2RlKCk9PSdPVVQnfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xldG9zdHJpbmc9XCJkYXRfOFwiXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVyd2FydGV0KFwiZGF0XzhcIikpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IudG9vZmV3Q21kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3IoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3RyaW5ncyA9IE1hbmlwdWxhdG9yLnNwbGl0U3RyaW5nSGFsZihzdHJpbmdzWzFdLFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZ3MgPSB0aGlzLmZpbHRlckZvckVtdHB5U3RyaW5ncyhzdHJpbmdzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMF0pKXtcclxuICAgICAgICAgICAgICAgICAgICBpZighTWFuaXB1bGF0b3IuaXNEYXRfOCh0aGlzLnN5bWJvbGxpc3QuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShzdHJpbmdzWzBdKSEuZ2V0VmFsdWUoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA/P1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmV4cGVjdGVkRGF0OENvbnN0VG9CaWcoc3RyaW5nc1swXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiS29uc3RhbnRlIFwiK3N0cmluZ3NbMF0saS5nZXRGaXJzdFBhcnQoKS50b1VwcGVyQ2FzZSgpK1wiIFwiK3N0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcgRUlOU0VUWkVOP1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydChzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBzYXZlNChpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChcIkFcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IudG9vZmV3Q21kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKSA9PVwiQVwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJSZWdpc3RlciBBXCIsaS5nZXRGaXJzdFBhcnQoKS50b1VwcGVyQ2FzZSgpK1wiIFwiK3N0cmluZ3NbMF0rXCIsIEFcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KGlvQWRyZXNzaWVydW5nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL8OETkRFUlVOR1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRoaXJkUGFydChzdHJpbmdzWzFdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgobWF0Y2hlc1swXS5nZXRTaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKG1hdGNoZXNbMF0uZ2V0SGV4Q29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZWQ/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihNYW5pcHVsYXRvci5pc0RhdF84KHN0cmluZ3NbMF0pKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCI4LWJpdCBXZXJ0IFwiK3N0cmluZ3NbMF0saS5nZXRGaXJzdFBhcnQoKS50b1VwcGVyQ2FzZSgpK1wiIFwiK3N0cmluZ3NbMF0rXCIgLi4uXCIpKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIjgtYml0IFdlcnQgXCIrTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQ4KHN0cmluZ3NbMF0pLGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKStcIiBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgoc3RyaW5nc1swXSkrXCIgLi4uXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQoKHN0cmluZ3NbMF0pKTtcclxuICAgICAgICAgICAgICAgICAgICBzYXZlNChpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChcIkFcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IudG9vZmV3Q21kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKSA9PVwiQVwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJSZWdpc3RlciBBXCIsaS5nZXRGaXJzdFBhcnQoKS50b1VwcGVyQ2FzZSgpK1wiIFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChzdHJpbmdzWzBdKStcIiwgQVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiUmVnaXN0ZXIgQVwiLGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKStcIiBcIitzdHJpbmdzWzBdK1wiLCBBXCIpKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChpb0FkcmVzc2llcnVuZykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUaGlyZFBhcnQoc3RyaW5nc1sxXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzBdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnSU5DJzpjYXNlJ0RFQyc6XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIk1uZW1vY29kZSBcIitzdHJpbmdzWzBdLHN0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG5cclxuICAgICAgICAgICAgICAgIHNhdmUzKGkpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcz10aGlzLm1uZW1vQ29tbWFuZHMuZmlsdGVyKGU9PntyZXR1cm4gZS5nZXRNQ29kZSgpPT1zdHJpbmdzWzBdfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nID0gdGhpcy5nZXREZXN0cyhtYXRjaGVzKS5qb2luKFwiLCBcIik7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChjb25zb2xldG9zdHJpbmcpKTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b1NhdmU9c3RyaW5nc1sxXTtcclxuICAgICAgICAgICAgICAgIHN0cmluZ3NbMV0gPSBzdHJpbmdzWzFdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmdldERlc3RzKG1hdGNoZXMpLmluY2x1ZGVzKHN0cmluZ3NbMV0pKXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIlJlZ2lzdGVyIFwiK3N0cmluZ3NbMV0sc3RyaW5nc1swXStcIiBcIitzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9bWF0Y2hlcz1tYXRjaGVzLmZpbHRlcihlPT57ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWxsZSB0cmVmZmVyIGF1ZiB6dXRyZWZmZW5kZSBSZWdpc3RlciBmaWx0cmllcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5nZXREZXN0aW5hdGlvbigpID09c3RyaW5nc1sxXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChyZWdpc3RlckFkcmVzc2llcnVuZykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/DhE5ERVJVTkdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KHRvU2F2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldExlbmd0aChtYXRjaGVzWzBdLmdldFNpemUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0SENvZGUobWF0Y2hlc1swXS5nZXRIZXhDb2RlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKG1hdGNoZXNbMF0udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnTm9Db21tYW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnQUREJzpjYXNlJ1NVQic6Y2FzZSdBTkQnOmNhc2UgJ09SJzpjYXNlJ1hPUic6Y2FzZSdDUCc6XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIk1uZW1vY29kZSBcIitzdHJpbmdzWzBdLHN0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG5cclxuICAgICAgICAgICAgICAgIHNhdmUzKGkpO1xyXG4gICAgICAgICAgICAgICAgLy/DhE5ERVJVTkdcclxuICAgICAgICAgICAgICAgIG1hdGNoZXM9dGhpcy5tbmVtb0NvbW1hbmRzLmZpbHRlcihlPT57cmV0dXJuIGUuZ2V0TUNvZGUoKT09c3RyaW5nc1swXX0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nID0gdGhpcy5nZXREZXN0cyhtYXRjaGVzKS5qb2luKFwiLCBcIik7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChjb25zb2xldG9zdHJpbmcpKTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmdldERlc3RzKG1hdGNoZXMpLmluY2x1ZGVzKHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vw4ROREVSVU5HXHJcbiAgICAgICAgICAgICAgICAgICAgdG9TYXZlPXN0cmluZ3NbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nc1sxXT1zdHJpbmdzWzFdLnRvVXBwZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIlJlZ2lzdGVyIFwiK3N0cmluZ3NbMV0sc3RyaW5nc1swXStcIiBcIitzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9bWF0Y2hlcz1tYXRjaGVzLmZpbHRlcihlPT57ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWxsZSB0cmVmZmVyIGF1ZiB6dXRyZWZmZW5kZSBSZWdpc3RlciBmaWx0cmllcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5nZXREZXN0aW5hdGlvbigpID09c3RyaW5nc1sxXS50b1VwcGVyQ2FzZSgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobWF0Y2hlcy5sZW5ndGg9PTEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KHJlZ2lzdGVyQWRyZXNzaWVydW5nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL8OETkRFUlVOR1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQodG9TYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobWF0Y2hlc1swXS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMV0pKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIU1hbmlwdWxhdG9yLmlzRGF0XzgodGhpcy5zeW1ib2xsaXN0LmdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUoc3RyaW5nc1sxXSkhLmdldFZhbHVlKCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gPz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5leHBlY3RlZERhdDhDb25zdFRvQmlnKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIktvbnN0YW50ZSBcIitzdHJpbmdzWzFdLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPW1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PVwiZGF0XzhcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChpbW1lZGlhdGVBZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobWF0Y2hlc1swXS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKE1hbmlwdWxhdG9yLmlzRGF0Xzgoc3RyaW5nc1sxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCI4LWJpdCBXZXJ0IFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChzdHJpbmdzWzFdKSxzdHJpbmdzWzBdK1wiIFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChzdHJpbmdzWzFdKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiOC1iaXQgV2VydCBcIitzdHJpbmdzWzFdLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpOyAvLyBEZWNPckhleFxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPW1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PVwiZGF0XzhcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0RXJrYW5udChpbW1lZGlhdGVBZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydCgoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgobWF0Y2hlc1swXS5nZXRTaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKG1hdGNoZXNbMF0uZ2V0SGV4Q29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUV4dHJhSW5mbyhpLGNvbnNvbGV0b3N0cmluZyxzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnU0hMJzpjYXNlJ1NIUic6Y2FzZSAnUkNMJzpjYXNlJ1JPTCc6Y2FzZSdSQ1InOmNhc2UnUk9SJzpcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiTW5lbW9jb2RlIFwiK3N0cmluZ3NbMF0sc3RyaW5nc1swXSkpXHJcblxyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcz10aGlzLm1uZW1vQ29tbWFuZHMuZmlsdGVyKGU9PntyZXR1cm4gZS5nZXRNQ29kZSgpPT1zdHJpbmdzWzBdfSk7XHJcbiAgICAgICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aD4xKXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IudG9vTWFueUNtZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcmthbm50KHJlZ2lzdGVyQWRyZXNzaWVydW5nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKG1hdGNoZXNbMF0uZ2V0SGV4Q29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnTm9Db21tYW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdKUE5aJzpjYXNlJ0pQWic6Y2FzZSdKUE5DJzpjYXNlJ0pQQyc6Y2FzZSdKUE5PJzpjYXNlJ0pQTyc6Y2FzZSdKUE5TJzpjYXNlJ0pQUyc6XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIk1uZW1vY29kZSBcIitzdHJpbmdzWzBdLHN0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG5cclxuICAgICAgICAgICAgICAgIHNhdmUzKGkpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcz10aGlzLm1uZW1vQ29tbWFuZHMuZmlsdGVyKGU9PntyZXR1cm4gZS5nZXRNQ29kZSgpPT1zdHJpbmdzWzBdfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xldG9zdHJpbmcgPSBcImxhYmVsXCI7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChjb25zb2xldG9zdHJpbmcpKTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzFdKSB8fCAodGhpcy5zeW1ib2xsaXN0LmlzRWxpZ2libGUoc3RyaW5nc1sxXSkgJiYgIXRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMV0pKSl7IC8vIE1VU1MgbGFiZWwgc2VpblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcgRUlOU0VUWkVOP1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGBMYWJlbCAnPHNwYW4gY2xhc3M9XCJsYWJlbEJsdWVcIj4ke3N0cmluZ3NbMF19PC9zcGFuPidgLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PVwibGFiZWxcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdC5zZXRMYWJlbFdpdGhvdXRQb3NpdGlvbihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYoc3RyaW5nc1sxXS5sZW5ndGg+ZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLndhckxhYmVsWnVMYW5nKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihtYXRjaGVzLmxlbmd0aD09MSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoYWJzb2x1dGVBZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmJ1Z05vQ29tbWFuZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ0pQJzpcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiTW5lbW9jb2RlIFwiK3N0cmluZ3NbMF0sc3RyaW5nc1swXStcIiAuLi5cIikpXHJcblxyXG4gICAgICAgICAgICAgICAgc2F2ZTMoaSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzPXRoaXMubW5lbW9Db21tYW5kcy5maWx0ZXIoZT0+e3JldHVybiBlLmdldE1Db2RlKCk9PVwiSlBcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nID0gdGhpcy5nZXREZXN0cyhtYXRjaGVzKS5qb2luKFwiLCBcIik7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChjb25zb2xldG9zdHJpbmcpKTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzFdKSB8fCAodGhpcy5zeW1ib2xsaXN0LmlzRWxpZ2libGUoc3RyaW5nc1sxXSkgJiYgIXRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMV0pKSl7IC8vIE1VU1MgbGFiZWwgc2VpblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcgRUlOU0VUWkVOP1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGBMYWJlbCAnPHNwYW4gY2xhc3M9XCJsYWJlbEJsdWVcIj4ke3N0cmluZ3NbMV19PC9zcGFuPidgLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PVwibGFiZWxcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdC5zZXRMYWJlbFdpdGhvdXRQb3NpdGlvbihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYoc3RyaW5nc1sxXS5sZW5ndGg+ZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLndhckxhYmVsWnVMYW5nKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihtYXRjaGVzLmxlbmd0aD09MSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoYWJzb2x1dGVBZHJlc3NpZXJ1bmcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnTm9Db21tYW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihzdHJpbmdzWzFdLnRvVXBwZXJDYXNlKCk9PVwiW0lYXVwiKXtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzPW1hdGNoZXMuZmlsdGVyKGU9PnsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9BbGxlIHRyZWZmZXIgYXVmIHp1dHJlZmZlbmRlIFJlZ2lzdGVyIGZpbHRyaWVydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlLmdldERlc3RpbmF0aW9uKCkgPT1cIltJWF1cIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoPT0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYFJlZ2lzdGVyIFtJWF1gLFwiSlAgW0lYXVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoaW5kaXJla3RlUmVnQWRyZXNzaWVydW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydChzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRIQ29kZShtYXRjaGVzWzBdLmdldEhleENvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnTm9Db21tYW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnQ0FMTCc6XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIk1uZW1vY29kZSBcIitzdHJpbmdzWzBdLHN0cmluZ3NbMF0rXCIgLi4uXCIpKVxyXG5cclxuICAgICAgICAgICAgICAgIHNhdmUzKGkpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcz10aGlzLm1uZW1vQ29tbWFuZHMuZmlsdGVyKGU9PntyZXR1cm4gZS5nZXRNQ29kZSgpPT1cIkNBTExcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nID0gXCJsYWJlbFwiXHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChjb25zb2xldG9zdHJpbmcpKTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzFdKSB8fCAodGhpcy5zeW1ib2xsaXN0LmlzRWxpZ2libGUoc3RyaW5nc1sxXSkgJiYgIXRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMV0pKSl7IC8vIE1VU1MgbGFiZWwgc2VpblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkcgRUlOU0VUWkVOP1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGBMYWJlbCAnPHNwYW4gY2xhc3M9XCJsYWJlbEJsdWVcIj4ke3N0cmluZ3NbMV19PC9zcGFuPidgLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXM9bWF0Y2hlcy5maWx0ZXIoZT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FsbGUgdHJlZmZlciBhdWYgenV0cmVmZmVuZGUgUmVnaXN0ZXIgZmlsdHJpZXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUuZ2V0RGVzdGluYXRpb24oKSA9PVwibGFiZWxcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdC5zZXRMYWJlbFdpdGhvdXRQb3NpdGlvbihzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYoc3RyaW5nc1sxXS5sZW5ndGg+ZXJsYXVidGVMw6RuZ2VMX0Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLndhckxhYmVsWnVMYW5nKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihtYXRjaGVzLmxlbmd0aD09MSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoYWJzb2x1dGVBZHJlc3NpZXJ1bmcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFR5cGUoSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgobWF0Y2hlc1swXS5nZXRTaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKG1hdGNoZXNbMF0uZ2V0SGV4Q29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdIQUxUJzpjYXNlICdOT1AnOlxyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJNbmVtb2NvZGUgXCIrc3RyaW5nc1swXSxzdHJpbmdzWzBdKSlcclxuXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzPXRoaXMubW5lbW9Db21tYW5kcy5maWx0ZXIoZT0+e3JldHVybiBlLmdldE1Db2RlKCk9PXN0cmluZ3NbMF19KTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPjEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29NYW55Q21kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYobWF0Y2hlcy5sZW5ndGg9PTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKG1hdGNoZXNbMF0uZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKG1hdGNoZXNbMF0uZ2V0SGV4Q29kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnTm9Db21tYW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdSRVQnOlxyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJNbmVtb2NvZGUgXCIrc3RyaW5nc1swXSxzdHJpbmdzWzBdKSlcclxuXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzPXRoaXMubW5lbW9Db21tYW5kcy5maWx0ZXIoZT0+e3JldHVybiBlLmdldE1Db2RlKCk9PVwiUkVUXCJ9KTtcclxuICAgICAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPjEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29NYW55Q21kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYobWF0Y2hlcy5sZW5ndGg9PTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVya2FubnQoc3RhY2tCZWZlaGwpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgobWF0Y2hlc1swXS5nZXRTaXplKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0SENvZGUobWF0Y2hlc1swXS5nZXRIZXhDb2RlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdOb0NvbW1hbmQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgZGVmYXVsdDogLy9CVUdcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5idWdTd2l0Y2hEZWZhdWx0KCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJzZXRvUHNldWRvTW5lbW9Db2RlKGk6SW5wdXRMaW5lLHN0cmluZ3M6c3RyaW5nW10pOmJvb2xlYW57XHJcbiAgICAgICAgbGV0IHRlbXA6IHN0cmluZ1tdO1xyXG4gICAgICAgIGxldCBjb25zb2xldG9zdHJpbmc7XHJcblxyXG4gICAgICAgIGlmKHRoaXMucHNldWRvTUNvZGVzLmluY2x1ZGVzKHN0cmluZ3NbMF0udG9VcHBlckNhc2UoKSkpeyAvL2dlZnVuZGVuIFBzZXVkby1NbmVtb0NvZGVcclxuICAgICAgICAgICAgdGhpcy5jb25zdERlZkZsYWc9ZmFsc2U7XHJcbiAgICAgICAgICAgIGkuc2V0Rmlyc3RQYXJ0KHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICBzdHJpbmdzWzBdPXN0cmluZ3NbMF0udG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYFBzZXVkby1NbmVtb2NvZGUgJHtzdHJpbmdzWzBdfWAsc3RyaW5nc1swXStcIiAuLi5cIikpO1xyXG4gICAgICAgICAgICBpZihzdHJpbmdzLmxlbmd0aDwyKXtcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci50b29mZXdDbWQoKSk7XHJcbiAgICAgICAgICAgICAgICBpLnNldEVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaChzdHJpbmdzWzBdKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1JTJzpcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChcImRhdF84XCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBzYXZlMyhpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xldG9zdHJpbmc9XCJkYXRfOFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE1hbmlwdWxhdG9yLmlzRGF0Xzgoc3RyaW5nc1sxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgOC1iaXQgV2VydGAsc3RyaW5nc1swXStcIiBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgoc3RyaW5nc1sxXSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYDgtYml0IFdlcnQgYCtzdHJpbmdzWzFdLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpOyAvLyBEZWNPckhleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQoKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgoc3RyaW5nc1sxXSk7IC8vIERlY09ySGV4ID8/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgSGNvZGU9XCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxNYW5pcHVsYXRvci5oZXhUb0RlYyhNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgoc3RyaW5nc1sxXSkpO2krKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIY29kZSs9JzAwJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEhDb2RlKEhjb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0LmlzQ29uc3Qoc3RyaW5nc1sxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighTWFuaXB1bGF0b3IuaXNEYXRfOCh0aGlzLnN5bWJvbGxpc3QuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShzdHJpbmdzWzFdKSEuZ2V0VmFsdWUoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbnZhbGlkQ21kKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5leHBlY3RlZERhdDhDb25zdFRvQmlnKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJLb25zdGFudGUgXCIrc3RyaW5nc1sxXSxzdHJpbmdzWzBdK1wiIFwiK3N0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KChzdHJpbmdzWzFdKSk7IC8vS09OU1QgPz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgoTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQ4KHRoaXMuc3ltYm9sbGlzdC5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKHN0cmluZ3NbMV0pIS5nZXRWYWx1ZSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgSGNvZGU9XCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxNYW5pcHVsYXRvci5oZXhUb0RlYyh0aGlzLnN5bWJvbGxpc3QuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShzdHJpbmdzWzFdKSEuZ2V0VmFsdWUoKSk7aSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhjb2RlKz0nMDAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0SENvZGUoSGNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQ4KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0RXJzpcclxuICAgICAgICAgICAgICAgICAgICBzYXZlMyhpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChcImRhdF8xNlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nPVwiZGF0XzE2XCJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoTWFuaXB1bGF0b3IuaXNEYXRfMTYoc3RyaW5nc1sxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgMTYtYml0IFdlcnQgYCtzdHJpbmdzWzFdLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpOyAvLyBEZWNPckhleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgMTYtYml0IFdlcnRgLHN0cmluZ3NbMF0rXCIgXCIrTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihzdHJpbmdzWzFdKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldExlbmd0aCgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNDb25zdChzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiS29uc3RhbnRlIFwiK3N0cmluZ3NbMV0sc3RyaW5nc1swXStcIiBcIitzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQoKHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHN0cmluZ3NbMV0udG9VcHBlckNhc2UoKS5zdGFydHNXaXRoKFwiT0ZGU0VUXCIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXA9TWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmKHN0cmluZ3NbMV0sXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGVtcC5sZW5ndGg8Mil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xsaXN0LmlzTGFiZWwodGVtcFsxXSkpeyB0aGlzLnN5bWJvbGxpc3QuaXNFbGlnaWJsZSh0ZW1wWzFdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGBPRkZTRVRgLFwiRFcgT0ZGU0VUIFwiK3RlbXBbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0LmlzRWxpZ2libGUodGVtcFsxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdC5zZXRMYWJlbFdpdGhvdXRQb3NpdGlvbih0ZW1wWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZihzdHJpbmdzWzFdLmxlbmd0aD5lcmxhdWJ0ZUzDpG5nZUxfQyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci53YXJMYWJlbFp1TGFuZyh0ZW1wWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGBPRkZTRVRgLFwiRFcgT0ZGU0VUIFwiK3RlbXBbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLm5vVmFsaWRMYWJlbEFmdGVyT2Zmc2V0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRUeXBlKElucHV0TGluZVR5cGUuVFJBTlNMQVRFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldExlbmd0aCgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2Vjb25kUGFydCgoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRPZmZzZXRMYWJlbCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQxNlBsdXMoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0RCJzpcclxuICAgICAgICAgICAgICAgICAgICBzYXZlMyhpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChcImRhdF84XCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xldG9zdHJpbmc9XCJkYXRfOFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlRXh0cmFJbmZvKGksY29uc29sZXRvc3RyaW5nLHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKE1hbmlwdWxhdG9yLmlzRGF0Xzgoc3RyaW5nc1sxXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgOC1iaXQgV2VydGAsc3RyaW5nc1swXStcIiBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgoc3RyaW5nc1sxXSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYDgtYml0IFdlcnQgYCtzdHJpbmdzWzFdLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpOyAvLyBEZWNPckhleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldExlbmd0aCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNDb25zdChzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFNYW5pcHVsYXRvci5pc0RhdF84KHRoaXMuc3ltYm9sbGlzdC5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKHN0cmluZ3NbMV0pIS5nZXRWYWx1ZSgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW52YWxpZENtZChzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQ4Q29uc3RUb0JpZyhzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKFwiS29uc3RhbnRlIFwiK3N0cmluZ3NbMV0sc3RyaW5nc1swXStcIiBcIitzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0TGVuZ3RoKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQoc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VHlwZShJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQ4UGx1cyhzdHJpbmdzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnT1JHJzpcclxuICAgICAgICAgICAgICAgICAgICBzYXZlMyhpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChcImRhdF8xNlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZXRvc3RyaW5nPVwiZGF0XzE2XCJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFeHRyYUluZm8oaSxjb25zb2xldG9zdHJpbmcsc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coTWFuaXB1bGF0b3IuaXNEYXRfMTYoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF8xNihzdHJpbmdzWzFdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEdlZnVuZGVuKGAxNi1iaXQgV2VydGAsc3RyaW5nc1swXStcIiBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KHN0cmluZ3NbMV0pKSk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgMTYtYml0IFdlcnQgYCtzdHJpbmdzWzFdLHN0cmluZ3NbMF0rXCIgXCIrc3RyaW5nc1sxXSkpOyAgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgoTWFuaXB1bGF0b3IuaGV4VG9EZWMoTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihzdHJpbmdzWzFdKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFNlY29uZFBhcnQoc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMV0pKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oXCJLb25zdGFudGUgXCIrc3RyaW5nc1sxXSxzdHJpbmdzWzBdK1wiIFwiK3N0cmluZ3NbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRMZW5ndGgoTWFuaXB1bGF0b3IuaGV4VG9EZWModGhpcy5zeW1ib2xsaXN0LmdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUoc3RyaW5nc1sxXSkhLmdldFZhbHVlKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFZhbGlkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuZXhwZWN0ZWREYXQxNlBsdXMoc3RyaW5nc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0VYVCc6Y2FzZSAnRU5UJzpcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcnJvck1hc3NhZ2UoYFBzZXVkby1NbmVtb2NvZGUgJyR7c3RyaW5nc1swXS50b1VwcGVyQ2FzZSgpfScgaXN0IG5pY2h0IHVudGVyc3TDvHR6dCFgKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRGaXJzdFBhcnQoc3RyaW5nc1swXS50b1VwcGVyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuYnVnU3dpdGNoRGVmYXVsdCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZighdGhpcy5jb25zdERlZkZsYWcpe1xyXG4gICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3Iubm9Db25zdERlZkFsbG93ZWQoKSk7XHJcbiAgICAgICAgICAgIGkuc2V0RXJyb3Ioc3RyaW5nc1swXSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNFbGlnaWJsZShzdHJpbmdzWzBdKSYmIXRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMF0pJiYhdGhpcy5zeW1ib2xsaXN0LmlzTGFiZWwoc3RyaW5nc1swXSkgJiYgaS5nZXRMYWJlbCgpID09XCJcIiApe1xyXG4gICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgS29uc3RhbnRlICR7c3RyaW5nc1swXX1gLHN0cmluZ3NbMF0rXCIgLi4uXCIpKTtcclxuICAgICAgICAgICAgc2F2ZTIoaSk7XHJcbiAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVyd2FydGV0KGBFUVVgKSk7XHJcbiAgICAgICAgICAgIGlmKHN0cmluZ3MubGVuZ3RoPDIpe1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLnRvb2Zld0NtZCgpKTtcclxuICAgICAgICAgICAgICAgIGkuc2V0RXJyb3IoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAvLyBpLnNldEVycm9yKHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBuZXdfY29tbWFuZHM9TWFuaXB1bGF0b3Iuc3BsaXRTdHJpbmdIYWxmKHN0cmluZ3NbMV0sXCIgXCIpO1xyXG4gICAgICAgICAgICBuZXdfY29tbWFuZHM9dGhpcy5maWx0ZXJGb3JFbXRweVN0cmluZ3MobmV3X2NvbW1hbmRzKTtcclxuXHJcbiAgICAgICAgICAgIGkuc2V0Rmlyc3RQYXJ0KHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICBpZihuZXdfY29tbWFuZHNbMF0udG9VcHBlckNhc2UoKT09XCJFUVVcIil7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihcIkVRVVwiLGkuZ2V0Rmlyc3RQYXJ0KCkrXCIgRVFVXCIrXCIgLi4uXCIpKTtcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShgPHNwYW4gY2xhc3M9XCJncmF5XCI+cGFyc2UgT3BlcmFuZGVuZmVsZDo8L3NwYW4+YCk7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRFcndhcnRldChgZGF0XzE2YCkpO1xyXG4gICAgICAgICAgICAgICAgaS5zZXRTZWNvbmRQYXJ0KG5ld19jb21tYW5kc1swXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobmV3X2NvbW1hbmRzLmxlbmd0aD4xKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZT10aGlzLmdldERhdGFUeXBlKG5ld19jb21tYW5kc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZSA9PURhdGFUeXBlLmRhdF84KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYDgtYml0IFdlcnQgJHtuZXdfY29tbWFuZHNbMV19YCxpLmdldEZpcnN0UGFydCgpK1wiIFwiK25ld19jb21tYW5kc1swXStcIiBcIituZXdfY29tbWFuZHNbMV0pKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYDgtYml0IFdlcnQgJHtNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDgobmV3X2NvbW1hbmRzWzFdKX1gLGkuZ2V0Rmlyc3RQYXJ0KCkrXCIgXCIrbmV3X2NvbW1hbmRzWzBdK1wiIFwiK01hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OChuZXdfY29tbWFuZHNbMV0pKSk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRoaXJkUGFydCgobmV3X2NvbW1hbmRzWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VmFsaWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdC5zZXRDb25zdChzdHJpbmdzWzBdLG5ld19jb21tYW5kc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHR5cGUgPT1EYXRhVHlwZS5kYXRfMTYpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpLnNhdmVEZXNjcmlwdGlvbkxpbmUodGhpcy5mb3JtYXRHZWZ1bmRlbihgMTYtYml0IFdlcnQgJHtNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KG5ld19jb21tYW5kc1sxXSl9YCxpLmdldEZpcnN0UGFydCgpK1wiIFwiK25ld19jb21tYW5kc1swXStcIiBcIitNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KG5ld19jb21tYW5kc1sxXSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKHRoaXMuZm9ybWF0R2VmdW5kZW4oYDE2LWJpdCBXZXJ0ICR7bmV3X2NvbW1hbmRzWzFdfWAsaS5nZXRGaXJzdFBhcnQoKStcIiBcIituZXdfY29tbWFuZHNbMF0rXCIgXCIrbmV3X2NvbW1hbmRzWzFdKSk7IC8vIERlY09ySGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0VGhpcmRQYXJ0KChuZXdfY29tbWFuZHNbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRWYWxpZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xsaXN0LnNldENvbnN0KHN0cmluZ3NbMF0sbmV3X2NvbW1hbmRzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5leHBlY3RlZERhdDE2UGx1cyhuZXdfY29tbWFuZHNbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRFcnJvcihuZXdfY29tbWFuZHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLnRvb2Zld0NtZCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmludmFsaWRDbWQobmV3X2NvbW1hbmRzWzBdKSk7XHJcbiAgICAgICAgICAgICAgICBpLnNldEVycm9yKG5ld19jb21tYW5kc1swXSk7XHJcbiAgICAgICAgICAgICAgICBpLnNldFJlc3QobmV3X2NvbW1hbmRzWzFdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdC5pc0NvbnN0KHN0cmluZ3NbMF0pKXtcclxuICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmVyckNvbnN0RGVmKHN0cmluZ3NbMF0pKTtcclxuICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nc1sxXSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGkuc2V0UmVzdChcIiBcIitzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0LmlzTGFiZWwoc3RyaW5nc1swXSkpe1xyXG4gICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IubmFtZVRha2VuRm9yTGFiZWwoc3RyaW5nc1swXSkpO1xyXG4gICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICBpZihzdHJpbmdzWzFdIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgaS5zZXRSZXN0KFwiIFwiK3N0cmluZ3NbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZighdGhpcy5zeW1ib2xsaXN0LmlzRWxpZ2libGUoc3RyaW5nc1swXSkpe1xyXG4gICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3Iubm9WYWxpZENvbnN0T3JPcGVyYW5kKHN0cmluZ3NbMF0pKTtcclxuICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nc1sxXSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGkuc2V0UmVzdChcIiBcIitzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaS5nZXRMYWJlbCgpICE9XCJcIil7XHJcbiAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5ub0NvbnN0YWZ0ZXJMYWJlbERlZigpKTtcclxuICAgICAgICAgICAgaS5zZXRFcnJvcihzdHJpbmdzWzBdKTtcclxuICAgICAgICAgICAgaWYoc3RyaW5nc1sxXSE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGkuc2V0UmVzdChcIiBcIitzdHJpbmdzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZSh0aGlzLmZvcm1hdEVycm9yTWFzc2FnZShgdW5rb3duIGVycm9yYCkpO1xyXG4gICAgICAgICAgICBpLnNldEVycm9yKHN0cmluZ3NbMF0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGFUeXBlKGFkZHI6c3RyaW5nKTpEYXRhVHlwZXtcclxuICAgICAgICBpZih0aGlzLlJlZ3MuaW5jbHVkZXMoYWRkcil8fHRoaXMucHNldWRvTUNvZGVzLmluY2x1ZGVzKGFkZHIpfHx0aGlzLm1Db2Rlcy5pbmNsdWRlcyhhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5OT05FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihhZGRyLnRyaW0oKT09XCIgXCIgfHxhZGRyLnRyaW0oKT09XCJcIil7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5OT05FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KGFkZHIpKXtcclxuICAgICAgICAgICAgcmV0dXJuIERhdGFUeXBlLmRhdF84O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKE1hbmlwdWxhdG9yLmlzRGF0XzE2KGFkZHIpKXtcclxuICAgICAgICAgICAgcmV0dXJuIERhdGFUeXBlLmRhdF8xNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNDb25zdChhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5DT05TVEFOVDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNMYWJlbChhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5MQUJFTDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3QuaXNFbGlnaWJsZShhZGRyKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBEYXRhVHlwZS5FTExJR0lCTEU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuIERhdGFUeXBlLk5PTkU7XHJcbiAgICB9XHJcbiAgICBzYXZlRXh0cmFJbmZvKGk6SW5wdXRMaW5lLGNvbnNvbGVTdHJpbmc6c3RyaW5nLHM6c3RyaW5nKXtcclxuICAgICAgICBsZXQgdHlwZURhdGE9IHRoaXMuZ2V0RGF0YVR5cGUocyk7XHJcbiAgICAgICAgaWYodGhpcy5SZWdzLmluY2x1ZGVzKHMpIHx8IHRoaXMubUNvZGVzLmluY2x1ZGVzKHMpIHx8IHRoaXMucHNldWRvTUNvZGVzLmluY2x1ZGVzKHMpKXtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjb25zb2xlU3RyaW5nLmluY2x1ZGVzKFwiZGF0XzhcIikpe1xyXG4gICAgICAgICAgICBzd2l0Y2godHlwZURhdGEpe1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5kYXRfODpcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0lzRGF0OCgpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkNPTlNUQU5UOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKE1hbmlwdWxhdG9yLmlzRGF0XzgodGhpcy5zeW1ib2xsaXN0LmdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUocykhLmdldFZhbHVlKCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQ4KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0lzRGF0OENvbnN0KHMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb05vdERhdDgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQ4Q29uc3QocykpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5ub3RWYWxpZExhYmVsU2luY2VJdHNDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5MQUJFTDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRUxMSUdJQkxFOlxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbmZvTm90RGF0OCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb05vdERhdDhDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbmZvTm90RGF0OCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0ludmFsaWRDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQ4KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoY29uc29sZVN0cmluZy5pbmNsdWRlcyhcImRhdF8xNlwiKSl7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0eXBlRGF0YSl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLmRhdF84OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5kYXRfMTY6XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Jc0RhdDE2KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuQ09OU1RBTlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQxNigpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0lzRGF0MTZDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5ub3RWYWxpZExhYmVsU2luY2VJdHNDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5MQUJFTDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuRUxMSUdJQkxFOlxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbmZvTm90RGF0MTYoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQxNkNvbnN0KHMpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQxNigpKTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoU3RyaW5nQ29uc3RydWN0b3IuaW5mb0ludmFsaWRDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Ob3REYXQ4KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNvbnNvbGVTdHJpbmcuaW5jbHVkZXMoXCJsYWJlbFwiKSl7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0eXBlRGF0YSl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkNPTlNUQU5UOlxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5ub3RWYWxpZExhYmVsU2luY2VJdHNDb25zdChzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkVMTElHSUJMRTpcclxuICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuTEFCRUw6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaS5zYXZlRGVzY3JpcHRpb25MaW5lKFN0cmluZ0NvbnN0cnVjdG9yLmluZm9Jc0xhYmVsKHMpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShTdHJpbmdDb25zdHJ1Y3Rvci5pbmZvSW52YWxpZExhYmVsKHMpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWF4TGVuKG06TW5lbW9Db21tYW5kW10pOm51bWJlcntcclxuICAgICAgICBsZXQgbjpudW1iZXJbXT1bXTtcclxuICAgICAgICBtLmZvckVhY2goZT0+e1xyXG4gICAgICAgICAgICBpZighbi5pbmNsdWRlcyhlLmdldExlbmd0aCgpKSl7XHJcbiAgICAgICAgICAgICAgICBuLnB1c2goZS5nZXRMZW5ndGgoKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heCguLi5uKTsgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29tbWFuZHM9KCk6TW5lbW9Db21tYW5kW109PntcclxuICAgICAgICByZXR1cm4gdGhpcy5tbmVtb0NvbW1hbmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1Db2RlcygpOnN0cmluZ1tde1xyXG4gICAgICAgIGxldCBhZGRyOnN0cmluZ1tdPVtdO1xyXG4gICAgICAgIHRoaXMubW5lbW9Db21tYW5kcy5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgaWYoIWFkZHIuaW5jbHVkZXMoZWxlbWVudC5nZXRNQ29kZSgpKSl7XHJcbiAgICAgICAgICAgICAgICBhZGRyLnB1c2goZWxlbWVudC5nZXRNQ29kZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIGFkZHI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGVzdHMoY29tbWFuZHM6TW5lbW9Db21tYW5kW10pOnN0cmluZ1tde1xyXG4gICAgICAgIGxldCBhZGRyOnN0cmluZ1tdPVtdO1xyXG4gICAgICAgIGNvbW1hbmRzLmZvckVhY2goZWxlbWVudD0+e1xyXG4gICAgICAgICAgICBpZighYWRkci5pbmNsdWRlcyhlbGVtZW50LmdldERlc3RpbmF0aW9uKCkpJiZlbGVtZW50LmdldERlc3RpbmF0aW9uKCkhPVwiXCIpe1xyXG4gICAgICAgICAgICAgICAgYWRkci5wdXNoKGVsZW1lbnQuZ2V0RGVzdGluYXRpb24oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiBhZGRyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNjb3VyY2VzKGNvbW1hbmRzOk1uZW1vQ29tbWFuZFtdKTpzdHJpbmdbXXtcclxuICAgICAgICBsZXQgYWRkcjpzdHJpbmdbXT1bXTtcclxuICAgICAgICBjb21tYW5kcy5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgaWYoIWFkZHIuaW5jbHVkZXMoZWxlbWVudC5nZXRTb3VyY2UoKSkmJmVsZW1lbnQuZ2V0U291cmNlKCkhPVwiXCIpe1xyXG4gICAgICAgICAgICAgICAgYWRkci5wdXNoKGVsZW1lbnQuZ2V0U291cmNlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gYWRkcjtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgSW5wdXRMaW5lIH0gZnJvbSBcIi4vSW5wdXRMaW5lXCI7XHJcbmltcG9ydCB7IFN5bWJvbExpc3QgfSBmcm9tIFwiLi9TeW1ib2xMaXN0XCI7XHJcbmltcG9ydCB7IENvbW1hbmRNYXAsIHNhdmVJbnB1dCB9IGZyb20gXCIuL0NvbW1hbmRNYXBcIjtcclxuaW1wb3J0IHsgSW5wdXRMaW5lVHlwZSwgRGF0YVR5cGUgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBNYW5pcHVsYXRvciB9IGZyb20gXCIuL01hbmlwdWxhdG9yXCI7XHJcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgTGFiZWwgfSBmcm9tIFwiLi9MYWJlbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0TGluZUNvbnRyb2x7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTpJbnB1dExpbmVDb250cm9sO1xyXG4gICAgcHJpdmF0ZSBpbnB1dHN0cmluZ3M6c3RyaW5nW10gPVtdO1xyXG4gICAgcHJpdmF0ZSBpbnB1dGxpbmVzOklucHV0TGluZVtdPVtdO1xyXG4gICAgcHJpdmF0ZSBzeW1ib2xsaXN0ZTpTeW1ib2xMaXN0PVN5bWJvbExpc3QuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHByaXZhdGUgbWFwOkNvbW1hbmRNYXA9IENvbW1hbmRNYXAuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHByaXZhdGUgSURjb3VudGVyOm51bWJlciA9MDtcclxuICAgIHByaXZhdGUgdHJhbnNsYXRlZElEczpudW1iZXJbXT1bXTtcclxuICAgIHByaXZhdGUgaW52YWxpZElEczpudW1iZXJbXT1bXTtcclxuICAgIHByaXZhdGUgc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkOm51bWJlcj0wO1xyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcigpe31cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCl7XHJcbiAgICAgICAgaWYoIUlucHV0TGluZUNvbnRyb2wuaW5zdGFuY2Upe1xyXG4gICAgICAgICAgICBJbnB1dExpbmVDb250cm9sLmluc3RhbmNlID0gbmV3IElucHV0TGluZUNvbnRyb2woKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIElucHV0TGluZUNvbnRyb2wuaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBoYXNJbnZhbGlkPSgpOmJvb2xlYW49PntcclxuICAgICAgICBpZih0aGlzLmludmFsaWRJRHMubGVuZ3RoPT0wKXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEludmFsaWRJRHM9KCk6bnVtYmVyW109PntcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnZhbGlkSURzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEludmFsaWRJbnB1dExpbmVzPSgpOklucHV0TGluZVtdPT57XHJcbiAgICAgICAgbGV0IGludmFsaWRJbnB1dGxsaW5lczpJbnB1dExpbmVbXT1bXTtcclxuICAgICAgICB0aGlzLmlucHV0bGluZXMuZm9yRWFjaChlPT57XHJcbiAgICAgICAgICAgIGlmKHRoaXMuaW52YWxpZElEcy5pbmNsdWRlcyhlLmdldElkKCkpKXtcclxuICAgICAgICAgICAgICAgIGludmFsaWRJbnB1dGxsaW5lcy5wdXNoKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gaW52YWxpZElucHV0bGxpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0PSgpOnZvaWQ9PntcclxuICAgICAgICB0aGlzLklEY291bnRlcj0wO1xyXG4gICAgICAgIHRoaXMuc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkPTA7XHJcbiAgICAgICAgdGhpcy5pbnB1dGxpbmVzPVtdO1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlZElEcz1bXTtcclxuICAgICAgICB0aGlzLmludmFsaWRJRHM9W107XHJcbiAgICAgICAgdGhpcy5zeW1ib2xsaXN0ZS5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMubWFwLnJlc2V0Q29uc3REZWZGbGFnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SW5wdXRTdHJpbmdzKHM6c3RyaW5nW10pe1xyXG4gICAgICAgIHRoaXMuaW5wdXRzdHJpbmdzPXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5wdXRTdHJpbmdzKCk6c3RyaW5nW117XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzdHJpbmdzO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZElucHV0TGluZXM9KGlucHV0U3RyaW5nczpzdHJpbmdbXSk6dm9pZD0+e1xyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgICAgICBpbnB1dFN0cmluZ3MuZm9yRWFjaChlPT57XHJcbiAgICAgICAgICAgIHRoaXMuYWRkSW5wdXRMaW5lKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZElucHV0TGluZT0oaW5wdXRTdHJpbmc6c3RyaW5nKTp2b2lkPT57XHJcbiAgICAgICAgbGV0IGk6SW5wdXRMaW5lPSBuZXcgSW5wdXRMaW5lKGlucHV0U3RyaW5nLHRoaXMuSURjb3VudGVyKTtcclxuICAgICAgICBpZihpLmdldFR5cGUoKT09SW5wdXRMaW5lVHlwZS5FTVBUWSl7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRsaW5lcy5wdXNoKGkpO1xyXG4gICAgICAgICAgICB0aGlzLklEY291bnRlcj10aGlzLklEY291bnRlciArMTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGkuZ2V0VHlwZSgpPT1JbnB1dExpbmVUeXBlLlBTRVVET1RSQU5TTEFURUQpe1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5tYXBJbnB1dExpbmVCeUNhc2UoaSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRsaW5lcy5wdXNoKGkpO1xyXG4gICAgICAgICAgICBpZihpLmdldFZhbGlkKCkpeyAvLyBVUERBVEUgRk9SIE9SRz8/Pz8/XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmZIRDE2KFN0cmluZyh0aGlzLnN0YXJ0aW5nQWRkck9mVHJhbnNsYXRlZCkpKTtcclxuICAgICAgICAgICAgICAgIGkuc2V0U3RhcnRpbmdBZGRyKHRoaXMuZkhEMTYoU3RyaW5nKHRoaXMuc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkKSkpO1xyXG4gICAgICAgICAgICAgICAgLyogaWYodGhpcy5zdGFydGluZ0FkZHJPZlRyYW5zbGF0ZWQ9PTApe1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0U3RhcnRpbmdBZGRyKCcwMDAwaCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIH0gKi9cclxuICAgICAgICAgICAgICAgIC8vIGkuc2V0U3RhcnRpbmdBZGRyKHRoaXMuZkhEMTYoU3RyaW5nKHRoaXMuc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkKSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xsaXN0ZS51cGRhdGVMYWJlbChpLmdldExhYmVsKCksaS5nZXRTdGFydGluZ0FkZHIoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGlmKGkuZ2V0TGFiZWwoKSE9XCJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xsaXN0ZS5yZW1vdmVMYWJlbChpLmdldExhYmVsKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkSURzLnB1c2godGhpcy5JRGNvdW50ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuSURjb3VudGVyPXRoaXMuSURjb3VudGVyICsxO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWFwLm1hcElucHV0TGluZUJ5Q2FzZShpKTtcclxuICAgICAgICB0aGlzLmlucHV0bGluZXMucHVzaChpKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhpKTtcclxuICAgICAgICBpZihpLmdldFZhbGlkKCkpe1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVN1bW1hcnkoaSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlU3RhcnRpbmdBZGRyKGkpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVRyYW5zbGF0aW9uKGksZmFsc2UpO1xyXG4gICAgICAgICAgICBpZihpLmhhc0xhYmVsKCkpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xsaXN0ZS51cGRhdGVMYWJlbChpLmdldExhYmVsKCksaS5nZXRTdGFydGluZ0FkZHIoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgLyogaWYoaS5nZXRMYWJlbCgpIT1cIlwiKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdGUucmVtb3ZlTGFiZWwoaS5nZXRMYWJlbCgpKTtcclxuICAgICAgICAgICAgfSAqL1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVN0YXJ0aW5nQWRkcihpKTtcclxuICAgICAgICAgICAgaWYoaS5oYXNMYWJlbCgpKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ltYm9sbGlzdGUudXBkYXRlTGFiZWwoaS5nZXRMYWJlbCgpLGkuZ2V0U3RhcnRpbmdBZGRyKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZElEcy5wdXNoKHRoaXMuSURjb3VudGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5JRGNvdW50ZXI9dGhpcy5JRGNvdW50ZXIgKzE7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGl0dGxlRW5kaWFuT2YoaDpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gTWFuaXB1bGF0b3Iuc3BsaXREYXQxNkluRGF0OChoKS5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrVHJhbnNsYXRpb25Gb3JVbmtub3duTGFiZWwoaTpJbnB1dExpbmUpe1xyXG4gICAgICAgIGlmKGkuZ2V0VHlwZSgpPT1JbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpe1xyXG4gICAgICAgICAgICBpZihpLmdldFRyYW5zbGF0aW9uKCkuaW5jbHVkZXMoXCI/Pz8/XCIpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmSEQxNihoOnN0cmluZyl7XHJcbiAgICAgICAgcmV0dXJuIE1hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0MTYoaCk7XHJcbiAgICB9XHJcblxyXG4gICAgZkhEMTZXSChoOnN0cmluZyl7XHJcbiAgICAgICAgcmV0dXJuIE1hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0MTZXaXRob3V0SChoKTtcclxuICAgIH1cclxuXHJcbiAgICBmSEQ4KGg6c3RyaW5nKXtcclxuICAgICAgICByZXR1cm4gTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQ4KGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZIRDhXSChoOnN0cmluZyl7XHJcbiAgICAgICAgcmV0dXJuIE1hbmlwdWxhdG9yLmZvcm1hdEhleHRvRGF0OFdpdGhvdXRIKGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHJhbnNsYXRlKGk6SW5wdXRMaW5lKXtcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZVRyYW5zbGF0aW9uKGksdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGlzcGxheWFibGVTcGVpY2hlcmFiYmlsZChpOklucHV0TGluZSxmbGFnOmJvb2xlYW4pOnN0cmluZ3tcclxuICAgICAgICBsZXQgczpzdHJpbmcgPXRoaXMuZ2V0U3BlaWNoZXJBYmJpbGQoaSxmbGFnKTtcclxuICAgICAgICBpZihpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCkgPT0gXCJSU1wiKXtcclxuICAgICAgICAgICAgcmV0dXJuIHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0b1JldHVybjpzdHJpbmc9XCJcIjtcclxuICAgICAgICBmb3IobGV0IGogPSAwOyBqPHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICAgIGlmKGohPTAgJiYgKGogJSAyKSA9PSAwKXtcclxuICAgICAgICAgICAgICAgIHRvUmV0dXJuID10b1JldHVybi5jb25jYXQoXCIgXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvUmV0dXJuID0gdG9SZXR1cm4uY29uY2F0KHNbal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG9SZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3BlaWNoZXJBYmJpbGQoaTpJbnB1dExpbmUsZmxhZzpib29sZWFuKTpzdHJpbmd7XHJcbiAgICAgICAgbGV0IHMgPSBpLmNvbW1hbmRMaW5ldG9TdHJpbmcodHJ1ZSk7XHJcbiAgICAgICAgbGV0IGggPSBpLmdldEhDb2RlKCk7XHJcbiAgICAgICAgbGV0IGw6c3RyaW5nfHVuZGVmaW5lZCA9IFwiXCI7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaS5nZXRDb21tYW5kTGluZSgpK1wiIC4uLiBcIitpLmdldExlbmd0aCgpK1wiIC4uLiBcIitpLmdldEhDb2RlKCkpO1xyXG4gICAgICAgIGlmKGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09XCJSU1wiKXtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIFwiMDAgLi4uIChcIitpLmdldExlbmd0aCgpK1wieClcIjtcclxuICAgICAgICAgICAgcmV0dXJuIChoLmxlbmd0aD40P1wiMDAgLi4uIChcIitpLmdldExlbmd0aCgpK1wieClcIjpoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCk9PVwiT1JHXCIpe1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCk9PSdEQicpe1xyXG4gICAgICAgICAgICBpZih0aGlzLnN5bWJvbGxpc3RlLmlzQ29uc3QoaS5nZXRTZWNvbmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgIGggPSB0aGlzLnN5bWJvbGxpc3RlLmdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUoaS5nZXRTZWNvbmRQYXJ0KCkpIS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBoPWkuZ2V0U2Vjb25kUGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmZIRDhXSChoKX1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09J0RXJyl7XHJcbiAgICAgICAgICAgIGlmKGkuaGFzT2Zmc2V0TGFiZWwoKSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnN5bWJvbGxpc3RlLmdldFBvc2l0aW9uT2ZTcGVjaWZpY0xhYmVsKGkuZ2V0TGFiZWxPZk9mZnNldCgpKT09dW5kZWZpbmVkIHx8IWZsYWcpP1wiPz8/P1wiOnRoaXMuZ2V0TGl0dGxlRW5kaWFuT2YodGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChpLmdldExhYmVsT2ZPZmZzZXQoKSkhKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNDb25zdChpLmdldFNlY29uZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgaCA9IHRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShpLmdldFNlY29uZFBhcnQoKSkhLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGg9aS5nZXRTZWNvbmRQYXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGl0dGxlRW5kaWFuT2YoaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHN3aXRjaChpLmdldExlbmd0aCgpKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQ4V0goaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoTWFuaXB1bGF0b3IuaXNEYXRfOChpLmdldFNlY29uZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQ4V0goaCkrdGhpcy5mSEQ4V0goaS5nZXRTZWNvbmRQYXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNDb25zdChpLmdldFNlY29uZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdGhpcy5zeW1ib2xsaXN0ZS5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKGkuZ2V0U2Vjb25kUGFydCgpKSEuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZkhEOFdIKGgpK3RoaXMuZkhEOFdIKGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKE1hbmlwdWxhdG9yLmlzRGF0XzgoaS5nZXRUaGlyZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQ4V0goaCkrdGhpcy5mSEQ4V0goaS5nZXRUaGlyZFBhcnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0NvbnN0KGkuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShpLmdldFRoaXJkUGFydCgpKSEuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZkhEOFdIKGgpK3RoaXMuZkhEOFdIKGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQxNldIKGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbGxpc3RlLmlzTGFiZWwoaS5nZXRTZWNvbmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMuc3ltYm9sbGlzdGUuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoaS5nZXRTZWNvbmRQYXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQ4V0goaCkrKGwhPXVuZGVmaW5lZCYmZmxhZz90aGlzLmdldExpdHRsZUVuZGlhbk9mKGwpOlwiPz8/P1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3RlLmlzTGFiZWwoaS5nZXRUaGlyZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChpLmdldFRoaXJkUGFydCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZkhEOFdIKGgpKyhsIT11bmRlZmluZWQmJmZsYWc/dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihsKTpcIj8/Pz9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0NvbnN0KGkuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbD0gdGhpcy5zeW1ib2xsaXN0ZS5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKGkuZ2V0VGhpcmRQYXJ0KCkpPy5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQ4V0goaCkrKGwhPXVuZGVmaW5lZD90aGlzLmdldExpdHRsZUVuZGlhbk9mKGwpOmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGkuaGFzT2Zmc2V0TGFiZWwoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB0aGlzLnN5bWJvbGxpc3RlLmdldFBvc2l0aW9uT2ZTcGVjaWZpY0xhYmVsKGkuZ2V0TGFiZWxPZk9mZnNldCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZkhEOFdIKGgpKyhsIT11bmRlZmluZWQmJmZsYWc/dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihsKTpcIj8/Pz9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQ4V0goaCkrdGhpcy5nZXRMaXR0bGVFbmRpYW5PZihpLmdldFRoaXJkUGFydCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0NvbnN0KGkuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbD0gdGhpcy5zeW1ib2xsaXN0ZS5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKGkuZ2V0VGhpcmRQYXJ0KCkpPy5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQxNldIKGgpKyhsIT11bmRlZmluZWQ/dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihsKTpsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbGxpc3RlLmlzTGFiZWwoaS5nZXRTZWNvbmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMuc3ltYm9sbGlzdGUuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoaS5nZXRTZWNvbmRQYXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mSEQxNldIKGgpKyhsIT11bmRlZmluZWQmJmZsYWc/dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihsKTpcIj8/Pz9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0xhYmVsKGkuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHRoaXMuc3ltYm9sbGlzdGUuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoaS5nZXRUaGlyZFBhcnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZIRDE2V0goaCkrKGwhPXVuZGVmaW5lZCYmZmxhZz90aGlzLmdldExpdHRsZUVuZGlhbk9mKGwpOlwiPz8/P1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihpLmhhc09mZnNldExhYmVsKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChpLmdldExhYmVsT2ZPZmZzZXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZIRDE2V0goaCkrKGwhPXVuZGVmaW5lZCYmZmxhZz90aGlzLmdldExpdHRsZUVuZGlhbk9mKGwpOlwiPz8/P1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZIRDE2V0goaCkrdGhpcy5nZXRMaXR0bGVFbmRpYW5PZihpLmdldFRoaXJkUGFydCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTdW1tYXJ5KGk6SW5wdXRMaW5lKXtcclxuICAgICAgICBsZXQgcyA9IGkuY29tbWFuZExpbmV0b1N0cmluZyh0cnVlKTtcclxuICAgICAgICBsZXQgaCA9IGkuZ2V0SENvZGUoKVxyXG4gICAgICAgIGxldCBsOnN0cmluZ3x1bmRlZmluZWQgPSBcIlwiO1xyXG4gICAgICAgIGxldCBjOkNvbnN0YW50O1xyXG4gICAgICAgIGlmKGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09XCJPUkdcIiAmJiBpLmdldFZhbGlkKCkpe1xyXG4gICAgICAgICAgICBzYXZlSW5wdXQoaSw1KTtcclxuICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0NvbnN0KGkuZ2V0U2Vjb25kUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoYDxzcGFuIGNsYXNzPVwiZWluZ2VydWNrdFwiPkFkZHJlc3N6w6RobGVyID0gPHNwYW4gaWQ9XCJhZGRyZXNzYnl0ZSR7aS5nZXRJZCgpfVwiPmArdGhpcy5mSEQxNldIKHRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShpLmdldFNlY29uZFBhcnQoKSkhLmdldFZhbHVlKCkpK2A8L3NwYW4+PC9zcGFuPmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoYDxzcGFuIGNsYXNzPVwiZWluZ2VydWNrdFwiPkFkZHJlc3N6w6RobGVyID0gPHNwYW4gaWQ9XCJhZGRyZXNzYnl0ZSR7aS5nZXRJZCgpfVwiPmAraS5nZXRTZWNvbmRQYXJ0KCkrYDwvc3Bhbj48L3NwYW4+YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpLmdldFR5cGUoKT09SW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKXtcclxuICAgICAgICAgICAgc2F2ZUlucHV0KGksNSk7XHJcbiAgICAgICAgICAgIGlmKGkuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09XCJSU1wiKXtcclxuICAgICAgICAgICAgICAgIGkuc2F2ZURlc2NyaXB0aW9uTGluZShgPHNwYW4gY2xhc3M9XCJlaW5nZXJ1Y2t0XCI+YCtzK1wiIC0+IFwiKyhoLmxlbmd0aD40P1wiMDAgKFwiK2kuZ2V0TGVuZ3RoKCkrXCJ4KVwiOmgpK2A8L3NwYW4+YCk7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoYDxzcGFuIGNsYXNzPVwiZWluZ2VydWNrdFwiPkFuemFobCBkZXIgQnl0ZXM6IDxzcGFuIGlkPVwiYWRkcmVzc2J5dGUke2kuZ2V0SWQoKX1cIj5gK2kuZ2V0TGVuZ3RoKCkrYDwvc3Bhbj48L3NwYW4+YCk7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoYDxzcGFuIGNsYXNzPVwiZWluZ2VydWNrdFwiPkVyaMO2aGUgQWRyZXNzesOkaGxlcjwvc3Bhbj5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlRGVzY3JpcHRpb25MaW5lKGA8c3BhbiBjbGFzcz1cImVpbmdlcnVja3RcIj5gK3MrXCIgLT4gXCIrdGhpcy5nZXREaXNwbGF5YWJsZVNwZWljaGVyYWJiaWxkKGksZmFsc2UpK2A8L3NwYW4+YCk7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoYDxzcGFuIGNsYXNzPVwiZWluZ2VydWNrdFwiPkFuemFobCBkZXIgQnl0ZXM6IDxzcGFuIGlkPVwiYWRkcmVzc2J5dGUke2kuZ2V0SWQoKX1cIj5gK2kuZ2V0TGVuZ3RoKCkrYDwvc3Bhbj48L3NwYW4+YCk7XHJcbiAgICAgICAgICAgICAgICBpLnNhdmVEZXNjcmlwdGlvbkxpbmUoYDxzcGFuIGNsYXNzPVwiZWluZ2VydWNrdFwiPkVyaMO2aGUgQWRyZXNzesOkaGxlcjwvc3Bhbj5gKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY3VsYXRlU3RhcnRpbmdBZGRyPShpOklucHV0TGluZSk6dm9pZD0+e1xyXG4gICAgICAgIGxldCBlPSAoaSE9bnVsbD9pOnRoaXMuaW5wdXRsaW5lc1t0aGlzLklEY291bnRlcl0pO1xyXG4gICAgICAgIGlmKGUuZ2V0VmFsaWQoKSE9dHJ1ZSl7XHJcbiAgICAgICAgICAgIGUuc2V0U3RhcnRpbmdBZGRyKHRoaXMuZkhEMTYoU3RyaW5nKHRoaXMuc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkKSkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGUuZ2V0VHlwZSgpPT1JbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpeyAgXHJcbiAgICAgICAgICAgIGUuc2V0U3RhcnRpbmdBZGRyKHRoaXMuZkhEMTYoU3RyaW5nKHRoaXMuc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkKSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVkSURzLnB1c2godGhpcy5JRGNvdW50ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0aW5nQWRkck9mVHJhbnNsYXRlZD0gdGhpcy5zdGFydGluZ0FkZHJPZlRyYW5zbGF0ZWQrZS5nZXRMZW5ndGgoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihlLmdldEZpcnN0UGFydCgpLnRvVXBwZXJDYXNlKCk9PSdPUkcnKXtcclxuICAgICAgICAgICAgZS5zZXRTdGFydGluZ0FkZHIodGhpcy5mSEQxNihTdHJpbmcodGhpcy5zdGFydGluZ0FkZHJPZlRyYW5zbGF0ZWQpKSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRpbmdBZGRyT2ZUcmFuc2xhdGVkPWUuZ2V0TGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBjYWxjdWxhdGVSZXN0PSguLi5hZGRyOnN0cmluZ1tdKTpzdHJpbmc9PntcclxuICAgICAgICBsZXQgbj0wO1xyXG4gICAgICAgIGxldCByZXN0OnN0cmluZ1tdO1xyXG4gICAgICAgIGxldCBuZXdTPWFkZHI7XHJcbiAgICAgICAgYWRkci5mb3JFYWNoKGU9PntcclxuICAgICAgICAgICAgaWYoZT09XCI/Pz8/XCJ8fHVuZGVmaW5lZHx8XCJcIil7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihNYW5pcHVsYXRvci5pc0hleChlKSl7XHJcbiAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KGUpKXtcclxuICAgICAgICAgICAgICAgICAgICBuPW4tTWFuaXB1bGF0b3IuaGV4VG9EZWMoZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3Q9TWFuaXB1bGF0b3Iuc3BsaXREYXQxNkluRGF0OChlKTtcclxuICAgICAgICAgICAgICAgICAgICBuPW4tTWFuaXB1bGF0b3IuaGV4VG9EZWMocmVzdFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbj1uLU1hbmlwdWxhdG9yLmhleFRvRGVjKHJlc3RbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBuPW4tTnVtYmVyKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgd2hpbGUobjwwKXtcclxuICAgICAgICAgICAgbj1uKzI1NjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICBTdHJpbmcobik7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY3VsYXRlVHJhbnNsYXRpb249KGk6SW5wdXRMaW5lLGZsYWc6Ym9vbGVhbik6dm9pZD0+e1xyXG4gICAgICAgIGxldCBlPSAoaSE9bnVsbD9pOnRoaXMuaW5wdXRsaW5lc1t0aGlzLklEY291bnRlcl0pO1xyXG4gICAgICAgIGlmKGUuZ2V0VHlwZSgpIT1JbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN0OnN0cmluZz1cIlwiO1xyXG4gICAgICAgIGxldCBhZGRyOnN0cmluZz10aGlzLmZIRDE2KGUuZ2V0U3RhcnRpbmdBZGRyKCkpO1xyXG4gICAgICAgIGxldCBoOnN0cmluZ3x1bmRlZmluZWQ9XCJcIjtcclxuICAgICAgICBsZXQgaGV4OnN0cmluZz1lLmdldEhDb2RlKCk7XHJcbi8qICAgICAgICAgaWYoZS5nZXRTdGFydGluZ0FkZHIoKT09JzAwMDBoJyl7XHJcbiAgICAgICAgICAgIGFkZHI9JzAwMDBoJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBhZGRyPXRoaXMuZkhEMTYoZS5nZXRTdGFydGluZ0FkZHIoKSk7XHJcbiAgICAgICAgfSAqL1xyXG4gICAgICAgIGlmKGUuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09J1JTJyl7XHJcbiAgICAgICAgICAgIHJlc3Q9dGhpcy5mSEQ4KHRoaXMuY2FsY3VsYXRlUmVzdChTdHJpbmcoZS5nZXRMZW5ndGgoKSksKGhleCksYWRkcikpO1xyXG4gICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke2hleH0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGUuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09J0RCJyl7XHJcbiAgICAgICAgICAgIGg9ZS5nZXRTZWNvbmRQYXJ0KCk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNDb25zdChpLmdldFNlY29uZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgaCA9IHRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShpLmdldFNlY29uZFBhcnQoKSkhLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGg9aS5nZXRTZWNvbmRQYXJ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSwoaGV4KSxhZGRyLGgpKTtcclxuICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDhXSChoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGUuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09J0RXJyl7XHJcbiAgICAgICAgICAgIGlmKGUuaGFzT2Zmc2V0TGFiZWwoKSl7XHJcbiAgICAgICAgICAgICAgICBoPSAodGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChpLmdldExhYmVsT2ZPZmZzZXQoKSk9PXVuZGVmaW5lZD9cIj8/Pz9cIjp0aGlzLnN5bWJvbGxpc3RlLmdldFBvc2l0aW9uT2ZTcGVjaWZpY0xhYmVsKGkuZ2V0TGFiZWxPZk9mZnNldCgpKSk7XHJcbiAgICAgICAgICAgICAgICBoPSBmbGFnP1wiPz8/P1wiOmg7XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNDb25zdChpLmdldFNlY29uZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLnN5bWJvbGxpc3RlLmdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUoaS5nZXRTZWNvbmRQYXJ0KCkpIS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBoPWkuZ2V0U2Vjb25kUGFydCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3Q9dGhpcy5mSEQ4KHRoaXMuY2FsY3VsYXRlUmVzdChTdHJpbmcoZS5nZXRMZW5ndGgoKSksKGhleCksYWRkcixoISkpO1xyXG4gICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZ2V0U3BlaWNoZXJBYmJpbGQoZSxmbGFnKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBzd2l0Y2goZS5nZXRMZW5ndGgoKSl7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoTWFuaXB1bGF0b3IuaXNEYXRfOChoZXgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSwoaGV4KSxhZGRyKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDhXSChoZXgpfSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2UuZ2V0SWQoKX0gY2Fubm90IGJlIHRyYW5zbGF0ZWQhICR7aGV4fSBpcyBubyBkYXRfOGApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KGhleCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBsZXQgdHlwZT0gdGhpcy5tYXAuZ2V0RGF0YVR5cGUoZS5nZXRTZWNvbmRQYXJ0KCkpOyAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF84KGUuZ2V0U2Vjb25kUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPWUuZ2V0U2Vjb25kUGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSwoaGV4KSxhZGRyLGgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0VHJhbnNsYXRpb24oYCR7dGhpcy5mSEQ4V0goU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpKX0ke3RoaXMuZkhEMTZXSChhZGRyKX0wMCR7dGhpcy5mSEQ4V0goaGV4KX0ke3RoaXMuZkhEOFdIKGgpfSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihNYW5pcHVsYXRvci5pc0RhdF84KGUuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg9ZS5nZXRUaGlyZFBhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Q9dGhpcy5mSEQ4KHRoaXMuY2FsY3VsYXRlUmVzdChTdHJpbmcoZS5nZXRMZW5ndGgoKSksKGhleCksYWRkcixlLmdldFRoaXJkUGFydCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZkhEOFdIKGhleCl9JHt0aGlzLmZIRDhXSChoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0NvbnN0KGUuZ2V0U2Vjb25kUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPXRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShlLmdldFNlY29uZFBhcnQoKSkhLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDhXSChoZXgpfSR7dGhpcy5mSEQ4V0goaCl9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNDb25zdChlLmdldFRoaXJkUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPXRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShlLmdldFRoaXJkUGFydCgpKSEuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Q9dGhpcy5mSEQ4KHRoaXMuY2FsY3VsYXRlUmVzdChTdHJpbmcoZS5nZXRMZW5ndGgoKSksKGhleCksYWRkcixoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZkhEOFdIKGhleCl9JHt0aGlzLmZIRDhXSChoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtlLmdldElkKCl9IGNhbm5vdCBiZSB0cmFuc2xhdGVkISBDYXNlMiBmYWlsZWQhYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihNYW5pcHVsYXRvci5pc0RhdF8xNihoZXgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSxoZXgsYWRkcikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZkhEMTZXSChoZXgpfSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2UuZ2V0SWQoKX0gY2Fubm90IGJlIHRyYW5zbGF0ZWQhICR7aGV4fSBpcyBubyBkYXRfOCBvciBkYXRfMTZgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoTWFuaXB1bGF0b3IuaXNEYXRfOChoZXgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0xhYmVsKGUuZ2V0U2Vjb25kUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPXRoaXMuc3ltYm9sbGlzdGUuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoZS5nZXRTZWNvbmRQYXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaD0oaD09dW5kZWZpbmVkP1wiPz8/P1wiOmgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSwoaGV4KSxhZGRyLGgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuc2V0VHJhbnNsYXRpb24oYCR7dGhpcy5mSEQ4V0goU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpKX0ke3RoaXMuZkhEMTZXSChhZGRyKX0wMCR7dGhpcy5mSEQ4V0goaGV4KX0ke2ZsYWc/dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihoLnJlcGxhY2UoL2gkLyxcIlwiKSk6XCI/Pz8/XCJ9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0VHJhbnNsYXRpb24oYCR7dGhpcy5mSEQ4V0goU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpKX0ke3RoaXMuZkhEMTZXSChhZGRyKX0wMCR7dGhpcy5nZXRTcGVpY2hlckFiYmlsZChlLGZsYWcpfSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0xhYmVsKGUuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg9dGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChlLmdldFRoaXJkUGFydCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg9KGg9PXVuZGVmaW5lZD9cIj8/Pz9cIjpoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Q9dGhpcy5mSEQ4KHRoaXMuY2FsY3VsYXRlUmVzdChTdHJpbmcoZS5nZXRMZW5ndGgoKSksKGhleCksYWRkcixoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZkhEOFdIKGhleCl9JHtmbGFnP3RoaXMuZ2V0TGl0dGxlRW5kaWFuT2YoaC5yZXBsYWNlKC9oJC8sXCJcIikpOlwiPz8/P1wifSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZ2V0U3BlaWNoZXJBYmJpbGQoZSxmbGFnKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoTWFuaXB1bGF0b3IuaXNEYXRfMTYoZS5nZXRUaGlyZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaD1lLmdldFRoaXJkUGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDhXSChoZXgpfSR7dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0NvbnN0KGUuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg9dGhpcy5zeW1ib2xsaXN0ZS5nZXRTcGVjaWZpY0NvbnN0YW50QnlOYW1lKGUuZ2V0VGhpcmRQYXJ0KCkpIS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDhXSChoZXgpfSR7dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZS5oYXNPZmZzZXRMYWJlbCgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg9dGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChlLmdldExhYmVsT2ZPZmZzZXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPShoPT11bmRlZmluZWQ/XCI/Pz8/XCI6aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmdldFNwZWljaGVyQWJiaWxkKGUsZmxhZyl9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7ZS5nZXRJZCgpfSBjYW5ub3QgYmUgdHJhbnNsYXRlZCEgQ2FzZTMgZmFpbGVkIWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2UuZ2V0SWQoKX0gY2Fubm90IGJlIHRyYW5zbGF0ZWQhICR7aGV4fSBpcyBubyBkYXRfOGApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBpZihNYW5pcHVsYXRvci5pc0RhdF8xNihoZXgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xsaXN0ZS5pc0xhYmVsKGUuZ2V0U2Vjb25kUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPXRoaXMuc3ltYm9sbGlzdGUuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoZS5nZXRTZWNvbmRQYXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaD0oaD09dW5kZWZpbmVkP1wiPz8/P1wiOmgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSwoaGV4KSxhZGRyLGgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuc2V0VHJhbnNsYXRpb24oYCR7dGhpcy5mSEQ4V0goU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpKX0ke3RoaXMuZkhEMTZXSChhZGRyKX0wMCR7dGhpcy5mSEQxNldIKGhleCl9JHtmbGFnP2gucmVwbGFjZSgvaCQvLFwiXCIpOlwiPz8/P1wifSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZ2V0U3BlaWNoZXJBYmJpbGQoZSxmbGFnKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNMYWJlbChlLmdldFRoaXJkUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPXRoaXMuc3ltYm9sbGlzdGUuZ2V0UG9zaXRpb25PZlNwZWNpZmljTGFiZWwoZS5nZXRUaGlyZFBhcnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPShoPT11bmRlZmluZWQ/XCI/Pz8/XCI6aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDE2V0goaGV4KX0ke2ZsYWc/aC5yZXBsYWNlKC9oJC8sXCJcIik6XCI/Pz8/XCJ9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0VHJhbnNsYXRpb24oYCR7dGhpcy5mSEQ4V0goU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpKX0ke3RoaXMuZkhEMTZXSChhZGRyKX0wMCR7dGhpcy5nZXRTcGVpY2hlckFiYmlsZChlLGZsYWcpfSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihNYW5pcHVsYXRvci5pc0RhdF8xNihlLmdldFRoaXJkUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPWUuZ2V0VGhpcmRQYXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDhXSChoZXgpfSR7dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmZIRDE2V0goaGV4KX0ke3RoaXMuZ2V0TGl0dGxlRW5kaWFuT2YoaCl9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sbGlzdGUuaXNDb25zdChlLmdldFRoaXJkUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPXRoaXMuc3ltYm9sbGlzdGUuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShlLmdldFRoaXJkUGFydCgpKSEuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Q9dGhpcy5mSEQ4KHRoaXMuY2FsY3VsYXRlUmVzdChTdHJpbmcoZS5nZXRMZW5ndGgoKSksKGhleCksYWRkcixoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZkhEOFdIKGhleCl9JHt0aGlzLmdldExpdHRsZUVuZGlhbk9mKGgpfSR7dGhpcy5mSEQ4V0gocmVzdCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRyYW5zbGF0aW9uKGAke3RoaXMuZkhEOFdIKFN0cmluZyhlLmdldExlbmd0aCgpKSl9JHt0aGlzLmZIRDE2V0goYWRkcil9MDAke3RoaXMuZkhEMTZXSChoZXgpfSR7dGhpcy5nZXRMaXR0bGVFbmRpYW5PZihoKX0ke3RoaXMuZkhEOFdIKHJlc3QpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoZS5oYXNPZmZzZXRMYWJlbCgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg9dGhpcy5zeW1ib2xsaXN0ZS5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChlLmdldExhYmVsT2ZPZmZzZXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoPShoPT11bmRlZmluZWQ/XCI/Pz8/XCI6aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0PXRoaXMuZkhEOCh0aGlzLmNhbGN1bGF0ZVJlc3QoU3RyaW5nKGUuZ2V0TGVuZ3RoKCkpLChoZXgpLGFkZHIsaCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHt0aGlzLmdldFNwZWljaGVyQWJiaWxkKGUsZmxhZyl9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7ZS5nZXRJZCgpfSBjYW5ub3QgYmUgdHJhbnNsYXRlZCEgQ2FzZTQgZmFpbGVkIWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2UuZ2V0SWQoKX0gY2Fubm90IGJlIHRyYW5zbGF0ZWQhICR7aGV4fSBpcyBub3QgZGF0XzE2YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyAgICBcclxuICAgICAgICAgICAgICAgLyogIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdD10aGlzLmZIRDgodGhpcy5jYWxjdWxhdGVSZXN0KFN0cmluZyhlLmdldExlbmd0aCgpKSwoaGV4KSxhZGRyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zZXRUcmFuc2xhdGlvbihgJHt0aGlzLmZIRDhXSChTdHJpbmcoZS5nZXRMZW5ndGgoKSkpfSR7dGhpcy5mSEQxNldIKGFkZHIpfTAwJHtoZXh9JHt0aGlzLmZIRDhXSChyZXN0KX1gKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldElucHV0TGluZXM9KCk9PntcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dGxpbmVzO1xyXG4gICAgfVxyXG4gICAgZ2V0VHJhbnNsYXRlZElEcz0oKTpudW1iZXJbXT0+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZWRJRHM7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgaW5wdXRUZXh0LCBvdXRwdXRUZXh0LCBzeW1ib2xUYWJsZUxpbmVzIH0gZnJvbSBcIi4vUHJvamVjdFdpbmRvd1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEh0bWxFbGVtZW50ID0gKGlkOnN0cmluZyk9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkhO1xyXG5leHBvcnQgY29uc3QgY3JlYXRlQ2xpY2tMaXN0ZW5lciA9IChpZDpzdHJpbmcsZjogKHRoaXM6IEhUTUxFbGVtZW50LCBldjogTW91c2VFdmVudCkgPT4gYW55KSA9PntcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCBhPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICAgICAgICAgIGlmKGEhPW51bGwpe1xyXG4gICAgICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgXCIraWQrXCIgaXMgbnVsbCFcIik7XHJcblxyXG4gICAgfWNhdGNoKGUpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCB1cGRhdGVTY3JvbGw9KGlkOnN0cmluZyk9PntcclxuICAgIHZhciBlbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnQoaWQpO1xyXG4gICAgZWxlbWVudC5zY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbEhlaWdodDtcclxufVxyXG5leHBvcnQgY29uc3QgdXBkYXRlU2Nyb2xsT2ZTeW1ib2xUYWJsZT0oaWQ6c3RyaW5nKTpudW1iZXI9PntcclxuICAgIGxldCB0YXJnZXRFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG4gICAgbGV0IG49MDtcclxuXHJcbiAgICBpZih0YXJnZXRFbGVtIT1udWxsKXtcclxuICAgICAgICBpZih0YXJnZXRFbGVtLm9mZnNldFRvcCt0YXJnZXRFbGVtLm9mZnNldEhlaWdodD5zeW1ib2xUYWJsZUxpbmVzLnNjcm9sbFRvcCtzeW1ib2xUYWJsZUxpbmVzLmNsaWVudEhlaWdodCtzeW1ib2xUYWJsZUxpbmVzLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgIHN5bWJvbFRhYmxlTGluZXMuc2Nyb2xsVG9wPSh0YXJnZXRFbGVtLm9mZnNldFRvcCsyKnRhcmdldEVsZW0ub2Zmc2V0SGVpZ2h0LXN5bWJvbFRhYmxlTGluZXMub2Zmc2V0VG9wLXN5bWJvbFRhYmxlTGluZXMuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIHRhcmdldEVsZW0ub2Zmc2V0VG9wKzIqdGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQtc3ltYm9sVGFibGVMaW5lcy5vZmZzZXRUb3Atc3ltYm9sVGFibGVMaW5lcy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIG49dGFyZ2V0RWxlbS5vZmZzZXRUb3ArMip0YXJnZXRFbGVtLm9mZnNldEhlaWdodC1zeW1ib2xUYWJsZUxpbmVzLm9mZnNldFRvcC1zeW1ib2xUYWJsZUxpbmVzLmNsaWVudEhlaWdodDtcclxuICAgICAgICAgICAgcmV0dXJuIG4+c3ltYm9sVGFibGVMaW5lcy5zY3JvbGxIZWlnaHQtc3ltYm9sVGFibGVMaW5lcy5vZmZzZXRIZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICA/c3ltYm9sVGFibGVMaW5lcy5zY3JvbGxIZWlnaHQtc3ltYm9sVGFibGVMaW5lcy5vZmZzZXRIZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICA6bjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0YXJnZXRFbGVtLm9mZnNldFRvcDxzeW1ib2xUYWJsZUxpbmVzLm9mZnNldFRvcCtzeW1ib2xUYWJsZUxpbmVzLnNjcm9sbFRvcCl7XHJcbiAgICAgICAgICAgIHN5bWJvbFRhYmxlTGluZXMuc2Nyb2xsVG9wPSh0YXJnZXRFbGVtLm9mZnNldFRvcC1zeW1ib2xUYWJsZUxpbmVzLm9mZnNldFRvcCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRFbGVtLm9mZnNldFRvcC1zeW1ib2xUYWJsZUxpbmVzLm9mZnNldFRvcDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3ltYm9sVGFibGVMaW5lcy5zY3JvbGxUb3A7XHJcbn1cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZVNjcm9sbE9mSW5fT3V0PShpZDpzdHJpbmcsdGFyZ2V0SUQ6c3RyaW5nKTpudW1iZXI9PntcclxuICAgIHZhciBlbGVtID0gaWQ9PWlucHV0VGV4dC5pZD9pbnB1dFRleHQ6b3V0cHV0VGV4dDtcclxuICAgIHZhciB0YXJnZXRFbGVtID0gZ2V0SHRtbEVsZW1lbnQodGFyZ2V0SUQpO1xyXG4gICAgbGV0IG49MDtcclxuICAgIGlmKHRhcmdldEVsZW0ub2Zmc2V0VG9wKzIqdGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQ+ZWxlbS5zY3JvbGxUb3ArZWxlbS5jbGllbnRIZWlnaHQrZWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgIGlucHV0VGV4dC5zY3JvbGxUb3A9KHRhcmdldEVsZW0ub2Zmc2V0VG9wLWVsZW0ub2Zmc2V0VG9wLWVsZW0uY2xpZW50SGVpZ2h0KzIqdGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgIG91dHB1dFRleHQuc2Nyb2xsVG9wPSh0YXJnZXRFbGVtLm9mZnNldFRvcC1lbGVtLm9mZnNldFRvcC1lbGVtLmNsaWVudEhlaWdodCsyKnRhcmdldEVsZW0ub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICBuPXRhcmdldEVsZW0ub2Zmc2V0VG9wLWVsZW0ub2Zmc2V0VG9wLWVsZW0uY2xpZW50SGVpZ2h0KzIqdGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIG4+ZWxlbS5zY3JvbGxIZWlnaHQtZWxlbS5vZmZzZXRIZWlnaHQ/ZWxlbS5zY3JvbGxIZWlnaHQtZWxlbS5vZmZzZXRIZWlnaHQ6bjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGFyZ2V0RWxlbS5vZmZzZXRUb3A8ZWxlbS5vZmZzZXRUb3ArZWxlbS5zY3JvbGxUb3Ape1xyXG4gICAgICAgIGlucHV0VGV4dC5zY3JvbGxUb3A9KHRhcmdldEVsZW0ub2Zmc2V0VG9wLWVsZW0ub2Zmc2V0VG9wKTtcclxuICAgICAgICBvdXRwdXRUZXh0LnNjcm9sbFRvcD0odGFyZ2V0RWxlbS5vZmZzZXRUb3AtZWxlbS5vZmZzZXRUb3ApO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRFbGVtLm9mZnNldFRvcC1lbGVtLm9mZnNldFRvcDtcclxuICAgIH1cclxuICAgIHJldHVybiBlbGVtLnNjcm9sbFRvcDtcclxufVxyXG5leHBvcnQgY29uc3QgcmVtb3ZlQ2xhc3NPZkFsbD0oczpzdHJpbmcpPT57XHJcbiAgICBsZXQgZWxlbWVudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrcytcIlwiKSk7XHJcbiAgICBmb3IobGV0IGVsZW0gb2YgZWxlbWVudHMpe1xyXG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgYWRkQ2xhc3NUbz0oaWQ6c3RyaW5nLGNsczpzdHJpbmcpPT57XHJcbiAgICBsZXQgZWxlbSA9IGdldEh0bWxFbGVtZW50KGlkKTtcclxuICAgIGlmKGVsZW0gIT1udWxsIHx8IGVsZW0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoY2xzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgZ2V0SURPZlNlbGVjdGVkPShzOnN0cmluZyk6c3RyaW5nPT57XHJcbiAgICByZXR1cm4gc1swXStzWzFdO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdXBkYXRlU2Nyb2xsT2ZEZXNjcmlwdGlvbkxpbmVzPShpZDpzdHJpbmcsdGFyZ2V0SUQ6c3RyaW5nKT0+e1xyXG4gICAgdmFyIGVsZW0gPSBnZXRIdG1sRWxlbWVudChpZCk7XHJcbiAgICB2YXIgdGFyZ2V0RWxlbSA9IGdldEh0bWxFbGVtZW50KHRhcmdldElEKTtcclxuICAgIHRhcmdldEVsZW0uc2Nyb2xsVG9wPWVsZW0ub2Zmc2V0VG9wLXRhcmdldEVsZW0ub2Zmc2V0VG9wO1xyXG59IiwiaW1wb3J0IHsgY29udGVudGxvYWRlZCB9IGZyb20gXCIuL2luZGV4XCI7XHJcbmltcG9ydCB7IGN1cnJlbnRMaW5lTGluZSwgZGVzY3JpcHRpb25MaW5lcywgaW5wdXRUZXh0LCBvdXRwdXRUZXh0LCBzZXRUcmFuc2xhdGluZ0RpdkhpZGRlbiwgc2V0VHJhbnNsYXRpbmdEaXZWaXNpYmxlLCBzeW1ib2xUYWJsZUxpbmVzIH0gZnJvbSBcIi4vUHJvamVjdFdpbmRvd1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVDbGlja0xpc3RlbmVyLCBnZXRIdG1sRWxlbWVudCwgcmVtb3ZlQ2xhc3NPZkFsbCB9IGZyb20gXCIuL1Rvb2xzXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2xlZXBGb3IgPSAobXM6bnVtYmVyKTpQcm9taXNlIDxhbnk+ID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLG1zKSk7XHJcblxyXG5leHBvcnQgY29uc3Qgc3BlZWRCVE4gPSBnZXRIdG1sRWxlbWVudChcInNwZWVkXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5leHBvcnQgY29uc3Qgc3BlZWRTbGlkZXIgPSBnZXRIdG1sRWxlbWVudChcInNwZWVkU2xpZGVyXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCBzaW5nbGVTdGVwQlROID0gZ2V0SHRtbEVsZW1lbnQoXCJzaW5nbGVTdGVwXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5leHBvcnQgY29uc3QgYW5pbWF0aW9uVHlwMUJUTj0gZ2V0SHRtbEVsZW1lbnQoXCJhbmltYXRpb25zVHlwMVwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvblR5cDJCVE49IGdldEh0bWxFbGVtZW50KFwiYW5pbWF0aW9uc1R5cDJcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCBhbmltYXRpb25UeXAzQlROPSBnZXRIdG1sRWxlbWVudChcImFuaW1hdGlvbnNUeXAzXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5leHBvcnQgY29uc3QgcGxheUJ1dHRvbiA9IGdldEh0bWxFbGVtZW50KFwicGxheVwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IHJlc2V0QnV0dG9uID0gZ2V0SHRtbEVsZW1lbnQoXCJyZXNldFwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRDdXJyZW50TGluZUhpZGRlbj0oKT0+e1xyXG4gICAgaWYoYW5pQ29udHJvbC5zcGVlZD49MyAmJiBhbmlDb250cm9sLmlzQW5pMygpICYmICBhbmlDb250cm9sLnBsYXkpe1xyXG4gICAgICAgIGN1cnJlbnRMaW5lTGluZS5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCI7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5leHBvcnQgY29uc3Qgc2V0Q3VycmVudExpbmVWaXNpYmxlPSgpPT57XHJcbiAgICBjdXJyZW50TGluZUxpbmUuc3R5bGUudmlzaWJpbGl0eT1cInZpc2libGVcIjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNoZWNrSWZQYXVzZWQ9IGFzeW5jKCk6UHJvbWlzZSA8YW55PiA9PiB7XHJcbiAgICBpZiAoYW5pQ29udHJvbC5wbGF5KXtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgaWYgKGFuaUNvbnRyb2wucGxheSl7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYW5pQ29udHJvbC5yZXNldCl7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdSZXNldCBwcmVzc2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuc3RvcCl7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdTdG9wIHByZXNzZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgc2xlZXBGb3IoMTAwKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3Qgc2xlZXBVbnRpbE5leHRTdGVwPWFzeW5jKCk6UHJvbWlzZSA8YW55Pj0+e1xyXG4gICAgbGV0IGM9YW5pQ29udHJvbC5iYXNlRnJhbWVUaW1lO1xyXG4gICAgaWYoYW5pQ29udHJvbC5pc0FuaTMoKSl7XHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5zcGVlZD09MSl7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwRm9yKDEwKTtcclxuICAgICAgICAgICAgYXdhaXQgY2hlY2tJZlBhdXNlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHNsZWVwRm9yKDMpO1xyXG4gICAgICAgIGF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB3aGlsZSh0cnVlKXtcclxuICAgICAgICBpZihjPDApe1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBGb3IoMTApO1xyXG4gICAgICAgICAgICBjLT0xMDtcclxuICAgICAgICAgICAgYXdhaXQgY2hlY2tJZlBhdXNlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3Qgc2xlZXBTdGF0aWNBbmltYXRpb249IGFzeW5jKCk6UHJvbWlzZSA8YW55PiA9PntcclxuICAgIGxldCBiPTIqYW5pQ29udHJvbC5iYXNlRnJhbWVUaW1lO1xyXG4gICAgbGV0IG49MTAqYW5pQ29udHJvbC5zcGVlZDtcclxuICAgIHdoaWxlKGI+MCl7XHJcbiAgICAgICAgYXdhaXQgc2xlZXBGb3Iobi8oYW5pQ29udHJvbC5zcGVlZCkpO1xyXG4gICAgICAgIGF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgICAgICBiPWItMTA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IHNsZWVwU3RhdGljQW5pbWF0aW9uSGFsZj0gYXN5bmMoKTpQcm9taXNlIDxhbnk+ID0+e1xyXG4gICAgbGV0IGI9YW5pQ29udHJvbC5iYXNlRnJhbWVUaW1lO1xyXG4gICAgbGV0IG49MTAqYW5pQ29udHJvbC5zcGVlZDtcclxuICAgIHdoaWxlKGI+MCl7XHJcbiAgICAgICAgYXdhaXQgc2xlZXBGb3Iobi8oYW5pQ29udHJvbC5zcGVlZCkpO1xyXG4gICAgICAgIGF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgICAgICBiPWItMTA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzbGVlcFN0b3BTdGFydFRpbWU9IGFzeW5jKCk6UHJvbWlzZSA8YW55PiA9PntcclxuICAgIGxldCBiPWFuaUNvbnRyb2wuYmFzZUZyYW1lVGltZS8yO1xyXG4gICAgd2hpbGUoYj4wKXtcclxuICAgICAgICBhd2FpdCBzbGVlcEZvcigxMCk7XHJcbiAgICAgICAgYXdhaXQgY2hlY2tJZlBhdXNlZCgpO1xyXG4gICAgICAgIGI9Yi0xMDtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3Qgc2xlZXBGb3JGcmFtZSA9IGFzeW5jKCk6UHJvbWlzZTxhbnk+PT57XHJcbiAgICAvLyBsZXQgYj1hbmlDb250cm9sLmJhc2VGcmFtZVRpbWUvYW5pQ29udHJvbC5mcmFtZXM7XHJcbiAgICBsZXQgYj1hbmlDb250cm9sLmJhc2VGcmFtZVRpbWUvMTIwLzI7XHJcbiAgICB3aGlsZShiPjApe1xyXG4gICAgICAgIGF3YWl0IHNsZWVwRm9yKDEpO1xyXG4gICAgICAgIGI9Yi0xO1xyXG4gICAgICAgIGF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZW51bSBBbmltYXRpb25zVHlwe1xyXG4gICAgVHlwMT1cIlR5cDFcIixcclxuICAgIFR5cDI9XCJUeXAyXCIsXHJcbiAgICBUeXAzPVwiVHlwM1wiXHJcbn1cclxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkNvbnRyb2x7XHJcbiAgICBwdWJsaWMgc3RhcnQ6Ym9vbGVhbjtcclxuICAgIHB1YmxpYyBwbGF5OmJvb2xlYW47XHJcbiAgICBwdWJsaWMgcGF1c2U6Ym9vbGVhbjtcclxuICAgIHB1YmxpYyBzdG9wOmJvb2xlYW47XHJcbiAgICBwdWJsaWMgZW5kOmJvb2xlYW47XHJcbiAgICBwdWJsaWMgcmVzZXQ6Ym9vbGVhbjtcclxuICAgIHB1YmxpYyBzaW5nbGVTdGVwRmxhZzpib29sZWFuO1xyXG4gICAgcHVibGljIGxvYWRlZDpib29sZWFuO1xyXG5cclxuICAgIHB1YmxpYyBzcGVlZDpudW1iZXI7XHJcbiAgICBwdWJsaWMgYmFzZUZyYW1lVGltZTpudW1iZXI7XHJcbiAgICBwdWJsaWMgYW5pbWF0aW9uVHlwZTpBbmltYXRpb25zVHlwPUFuaW1hdGlvbnNUeXAuVHlwMTtcclxuICAgIHB1YmxpYyBmcmFtZXM6bnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5zdGFydD1mYWxzZTtcclxuICAgICAgICB0aGlzLnBsYXk9ZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYXVzZT1mYWxzZTtcclxuICAgICAgICB0aGlzLnN0b3A9ZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZXNldD1mYWxzZTtcclxuICAgICAgICB0aGlzLnNpbmdsZVN0ZXBGbGFnPWZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5kPWZhbHNlO1xyXG4gICAgICAgIHRoaXMubG9hZGVkPWZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3BlZWQ9MTtcclxuICAgICAgICB0aGlzLmJhc2VGcmFtZVRpbWU9ODAwO1xyXG4gICAgICAgIHRoaXMuc2V0U3BlZWQoc3BlZWRTbGlkZXIudmFsdWVBc051bWJlcik7XHJcbiAgICAgICAgdGhpcy5mcmFtZXM9NjA7XHJcbiAgICB9XHJcbiAgICBzZXRMb2FkZWQoYjpib29sZWFuKXtcclxuICAgICAgICB0aGlzLmxvYWRlZD1iO1xyXG4gICAgfVxyXG4gICAgcmVzZXRGbGFncz0oKT0+e1xyXG4gICAgICAgIHdoaWxlKCFhbmlDb250cm9sLnJlc2V0KXtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnN0YXJ0PWZhbHNlO1xyXG4gICAgICAgIHRoaXMucGxheT1mYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlPWZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RvcD1mYWxzZTtcclxuICAgICAgICB0aGlzLmVuZD1mYWxzZTtcclxuICAgICAgICB0aGlzLmNoYW5nZVBsYXlCdXR0b25CS0coKTtcclxuICAgIH1cclxuICAgIHNldFN0YXJ0PSgpPT57XHJcbiAgICAgICAgdGhpcy5zdGFydD10cnVlO1xyXG4gICAgICAgIHRoaXMuc2V0UGxheWluZygpO1xyXG4gICAgfVxyXG4gICAgc2V0U2luZ2xlc3RlcD0oKT0+e1xyXG4gICAgICAgIGlmKHRoaXMuc2luZ2xlU3RlcEZsYWcpIHRoaXMuc2luZ2xlU3RlcEZsYWc9ZmFsc2U7XHJcbiAgICAgICAgZWxzZSB0aGlzLnNpbmdsZVN0ZXBGbGFnPXRydWU7XHJcbiAgICAgICAgdGhpcy5zaW5nbGVTdGVwRmxhZz9zaW5nbGVTdGVwQlROLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTpzaW5nbGVTdGVwQlROLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuXHJcbiAgICB9XHJcbiAgICBzZXRTcGVlZFRvPShuOm51bWJlcik9PntcclxuICAgICAgICBpZihuPDEpe1xyXG4gICAgICAgICAgICBzcGVlZFNsaWRlci52YWx1ZT1gJHsxfWA7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKG4+NCl7XHJcbiAgICAgICAgICAgIHNwZWVkU2xpZGVyLnZhbHVlPWAkeyg0KX1gO1xyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgc3BlZWRTbGlkZXIudmFsdWU9YCR7KG4pfWA7XHJcbiAgICAgICAgICAgIHJldHVybiBuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluY3JlYXNlU3BlZWQ9KCk9PntcclxuICAgICAgICB0aGlzLnNldFNwZWVkKHRoaXMuc2V0U3BlZWRUbyhzcGVlZFNsaWRlci52YWx1ZUFzTnVtYmVyKzEpKTtcclxuICAgIH1cclxuICAgIGRlY3JlYXNlU3BlZWQ9KCk9PntcclxuICAgICAgICB0aGlzLnNldFNwZWVkKHRoaXMuc2V0U3BlZWRUbyhzcGVlZFNsaWRlci52YWx1ZUFzTnVtYmVyLTEpKTtcclxuICAgIH1cclxuICAgIHNldEFuaW1hdGlvblR5cDE9KCk9PntcclxuICAgICAgICBpZih0aGlzLmlzQW5pMygpICYmIHRoaXMuc3BlZWQ+PTMpe1xyXG4gICAgICAgICAgICByZW1vdmVDbGFzc09mQWxsKFwiaGlkZGVuRGVzY3JpcHRpb25EaXZcIik7XHJcbiAgICAgICAgICAgIHNldFRyYW5zbGF0aW5nRGl2SGlkZGVuKCk7XHJcbiAgICAgICAgICAgIHNldEN1cnJlbnRMaW5lVmlzaWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFuaW1hdGlvblR5cGU9QW5pbWF0aW9uc1R5cC5UeXAxO1xyXG4gICAgICAgIHRoaXMuc2V0U21vb3RoSWZOZWNlc3NlcnkoKTtcclxuICAgICAgICBcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uTGluZXMuY2xhc3NMaXN0LmFkZChcInNjcm9sbFNtb290aFwiKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uVHlwMUJUTi5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblR5cDJCVE4uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBhbmltYXRpb25UeXAzQlROLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldEFuaW1hdGlvblR5cDI9KCk9PntcclxuICAgICAgICBpZih0aGlzLmlzQW5pMygpICYmIHRoaXMuc3BlZWQ+PTMpe1xyXG4gICAgICAgICAgICBzZXRUcmFuc2xhdGluZ0RpdkhpZGRlbigpO1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50TGluZVZpc2libGUoKTtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NPZkFsbChcImhpZGRlbkRlc2NyaXB0aW9uRGl2XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFuaW1hdGlvblR5cGU9QW5pbWF0aW9uc1R5cC5UeXAyO1xyXG4gICAgICAgIHRoaXMuc2V0U21vb3RoSWZOZWNlc3NlcnkoKTtcclxuXHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbkxpbmVzLmNsYXNzTGlzdC5hZGQoXCJzY3JvbGxTbW9vdGhcIik7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblR5cDFCVE4uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBhbmltYXRpb25UeXAyQlROLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uVHlwM0JUTi5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXRBbmltYXRpb25UeXAzPSgpPT57XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25UeXBlPUFuaW1hdGlvbnNUeXAuVHlwMztcclxuICAgICAgICB0aGlzLnJlbW92ZVNtb290aFNjcm9sbCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgYW5pbWF0aW9uVHlwMUJUTi5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblR5cDJCVE4uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBhbmltYXRpb25UeXAzQlROLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRQbGF5aW5nPSgpPT57XHJcbiAgICAgICAgaWYodGhpcy5zdGFydCAmJiAhdGhpcy5zdG9wKXtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ICAgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlICA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmVuZCAgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3AgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVBsYXlCdXR0b25CS0coKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXRTdG9wPSgpPT57XHJcbiAgICAgICAgdGhpcy5wbGF5ICAgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlICA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5kICAgID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdG9wICAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlUGxheUJ1dHRvbkJLRygpO1xyXG4gICAgfVxyXG4gICAgc2V0UGF1c2VkPSgpPT57XHJcbiAgICAgICAgaWYodGhpcy5zdGFydCAmJiF0aGlzLnN0b3AgJiYgIXRoaXMucmVzZXQpe1xyXG4gICAgICAgICAgICB0aGlzLnBsYXkgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlICA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kICAgID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlUGxheUJ1dHRvbkJLRygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgc2V0UmVzZXQ9IGFzeW5jKCk9PntcclxuICAgICAgICBpZih0aGlzLnJlc2V0KSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5yZXNldCAgPSB0cnVlO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgYW5pQ29udHJvbC5yZXNldD1mYWxzZTtcclxuICAgICAgICB9LDIwMCk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VQbGF5QnV0dG9uQktHKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RW5kPSgpPT57XHJcbiAgICAgICAgdGhpcy5zdGFydCAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGxheSAgID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYXVzZSAgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVuZCAgICA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VQbGF5QnV0dG9uQktHKCk7XHJcbiAgICB9XHJcbiAgICBzZXRTbW9vdGhJZk5lY2Vzc2VyeSgpe1xyXG4gICAgICAgIGlmKHRoaXMucGxheSAmJiB0aGlzLmFuaW1hdGlvblR5cGUhPUFuaW1hdGlvbnNUeXAuVHlwMyAmJiB0aGlzLnNwZWVkPDMpe1xyXG4gICAgICAgICAgICBpbnB1dFRleHQuY2xhc3NMaXN0LmFkZChcInNjcm9sbFNtb290aFwiKTtcclxuICAgICAgICAgICAgb3V0cHV0VGV4dC5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsU21vb3RoXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbW92ZVNtb290aFNjcm9sbCgpe1xyXG4gICAgICAgIGlucHV0VGV4dC5jbGFzc0xpc3QucmVtb3ZlKFwic2Nyb2xsU21vb3RoXCIpO1xyXG4gICAgICAgIG91dHB1dFRleHQuY2xhc3NMaXN0LnJlbW92ZShcInNjcm9sbFNtb290aFwiKTtcclxuICAgIH1cclxuICAgIGlzQW5pMT0oKT0+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvblR5cGU9PUFuaW1hdGlvbnNUeXAuVHlwMTtcclxuICAgIH1cclxuICAgIGlzQW5pMj0oKT0+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvblR5cGU9PUFuaW1hdGlvbnNUeXAuVHlwMjtcclxuICAgIH1cclxuICAgIGlzQW5pMz0oKT0+e1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvblR5cGU9PUFuaW1hdGlvbnNUeXAuVHlwMztcclxuICAgIH1cclxuICAgIGNoYW5nZVBsYXlCdXR0b25CS0c9KCk9PntcclxuICAgICAgICBsZXQgZWxlbSA9IGdldEh0bWxFbGVtZW50KFwicGxheVwiKTtcclxuICAgICAgICBpZih0aGlzLmVuZCB8fCB0aGlzLnBhdXNlIHx8IHRoaXMucmVzZXQgfHwgdGhpcy5zdG9wKXtcclxuICAgICAgICAgICAgc2V0VHJhbnNsYXRpbmdEaXZIaWRkZW4oKTtcclxuICAgICAgICAgICAgc2V0Q3VycmVudExpbmVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU21vb3RoU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzT2ZBbGwoXCJoaWRkZW5EZXNjcmlwdGlvbkRpdlwiKTtcclxuXHJcbiAgICAgICAgICAgIGlucHV0VGV4dC5jbGFzc0xpc3QucmVtb3ZlKFwic2Nyb2xsRGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgIG91dHB1dFRleHQuY2xhc3NMaXN0LnJlbW92ZShcInNjcm9sbERpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbkxpbmVzLmNsYXNzTGlzdC5yZW1vdmUoXCJzY3JvbGxEaXNhYmxlZFwiKTtcclxuICAgICAgICAgICAgc3ltYm9sVGFibGVMaW5lcy5jbGFzc0xpc3QucmVtb3ZlKFwic2Nyb2xsRGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uTGluZXMuY2xhc3NMaXN0LmFkZChcInNjcm9sbFNtb290aFwiKTtcclxuXHJcblxyXG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJwYXVzZWRCS0dcIik7XHJcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcInBsYXlpbmdCS0dcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLnBsYXkpe1xyXG4gICAgICAgICAgICBzZXRUcmFuc2xhdGluZ0RpdlZpc2libGUoKTtcclxuICAgICAgICAgICAgc2V0Q3VycmVudExpbmVIaWRkZW4oKTtcclxuXHJcbiAgICAgICAgICAgIGlucHV0VGV4dC5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsRGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgIG91dHB1dFRleHQuY2xhc3NMaXN0LmFkZChcInNjcm9sbERpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZGVzY3JpcHRpb25MaW5lcy5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsRGlzYWJsZWRcIik7XHJcbiAgICAgICAgICAgIHN5bWJvbFRhYmxlTGluZXMuY2xhc3NMaXN0LmFkZChcInNjcm9sbERpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5zcGVlZDwzICYmIHRoaXMuYW5pbWF0aW9uVHlwZSE9QW5pbWF0aW9uc1R5cC5UeXAzKXtcclxuICAgICAgICAgICAgICAgIGlucHV0VGV4dC5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsU21vb3RoXCIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0VGV4dC5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsU21vb3RoXCIpO1xyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb25MaW5lcy5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsU21vb3RoXCIpO1xyXG4gICAgICAgICAgICB9ICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuaXNBbmkzKCkpIGRlc2NyaXB0aW9uTGluZXMuY2xhc3NMaXN0LnJlbW92ZShcInNjcm9sbFNtb290aFwiKTtcclxuXHJcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcInBhdXNlZEJLR1wiKTtcclxuICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwicGxheWluZ0JLR1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldFNwZWVkPShuOm51bWJlcik9PntcclxuICAgICAgICB0aGlzLnNwZWVkPW47XHJcbiAgICAgICAgdGhpcy5iYXNlRnJhbWVUaW1lPTEwMDAtdGhpcy5zcGVlZCoyMjA7XHJcbiAgICAgICAgaWYoIXRoaXMubG9hZGVkKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5zZXRTbW9vdGhJZk5lY2Vzc2VyeSgpO1xyXG4gICAgICAgIGlmKG4+PTMpe1xyXG4gICAgICAgICAgICBzZXRUcmFuc2xhdGluZ0RpdlZpc2libGUoKTtcclxuICAgICAgICAgICAgc2V0Q3VycmVudExpbmVIaWRkZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgc2V0VHJhbnNsYXRpbmdEaXZIaWRkZW4oKTtcclxuICAgICAgICAgICAgc2V0Q3VycmVudExpbmVWaXNpYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKG4hPTQpe1xyXG4gICAgICAgICAgICByZW1vdmVDbGFzc09mQWxsKFwiaGlkZGVuRGVzY3JpcHRpb25EaXZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGNyZWF0ZUV2ZW50TGlzdGVuZXJzPSgpPT57XHJcbiAgICAgICAgdGhpcy5zZXRBbmltYXRpb25UeXAxKCk7XHJcbiAgICAgICAgY3JlYXRlQ2xpY2tMaXN0ZW5lcihcImFuaW1hdGlvbnNUeXAxXCIsdGhpcy5zZXRBbmltYXRpb25UeXAxKTtcclxuICAgICAgICBjcmVhdGVDbGlja0xpc3RlbmVyKFwiYW5pbWF0aW9uc1R5cDJcIix0aGlzLnNldEFuaW1hdGlvblR5cDIpO1xyXG4gICAgICAgIGNyZWF0ZUNsaWNrTGlzdGVuZXIoXCJhbmltYXRpb25zVHlwM1wiLHRoaXMuc2V0QW5pbWF0aW9uVHlwMyk7XHJcbiAgICAgICAgY3JlYXRlQ2xpY2tMaXN0ZW5lcihcInNwZWVkRGVjcmVhc2VcIix0aGlzLmRlY3JlYXNlU3BlZWQpO1xyXG4gICAgICAgIGNyZWF0ZUNsaWNrTGlzdGVuZXIoXCJzcGVlZEluY3JlYXNlXCIsdGhpcy5pbmNyZWFzZVNwZWVkKTtcclxuICAgICAgICBjcmVhdGVDbGlja0xpc3RlbmVyKFwic2luZ2xlU3RlcFwiLCB0aGlzLnNldFNpbmdsZXN0ZXApO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHNwZWVkU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwoKT0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTcGVlZChzcGVlZFNsaWRlci52YWx1ZUFzTnVtYmVyKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgc3BlZWRTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNwZWVkKHNwZWVkU2xpZGVyLnZhbHVlQXNOdW1iZXIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhbmlDb250cm9sPSBuZXcgQW5pbWF0aW9uQ29udHJvbCgpOyIsImltcG9ydCB7IElucHV0TGluZUNvbnRyb2wgfSBmcm9tIFwiLi9CYWNrZW5kL0lucHV0TGluZUNvbnRyb2xcIjtcclxuaW1wb3J0IHsgZXJsYXVidGVMw6RuZ2VMX0MsIE1hbmlwdWxhdG9yIH0gZnJvbSBcIi4vQmFja2VuZC9NYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyBQcm9qZWN0V2luZG93IH0gZnJvbSBcIi4vUHJvamVjdFdpbmRvd1wiO1xyXG5pbXBvcnQgeyBJbnB1dExpbmUgfSBmcm9tIFwiLi9CYWNrZW5kL0lucHV0TGluZVwiO1xyXG5pbXBvcnQgeyBnZXRIdG1sRWxlbWVudCwgY3JlYXRlQ2xpY2tMaXN0ZW5lciwgdXBkYXRlU2Nyb2xsIH0gZnJvbSBcIi4vVG9vbHNcIjtcclxuaW1wb3J0IHsgYW5pQ29udHJvbCwgc2xlZXBGb3IsIHNsZWVwVW50aWxOZXh0U3RlcCB9IGZyb20gXCIuL0FuaW1hdGlvblV0aWxcIjtcclxuXHJcblxyXG5jb25zdCBlcnJvckRlc2NyaXB0aW9uRGl2OkhUTUxFbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnQoJ0Vycm9yRGVzY3JpcHRpb24nKTtcclxuY29uc3QgaW5wdXRXaW5kb3dDb250YWluZXI6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudCgnSW5wdXRXaW5kb3dDb250YWludGVyJyk7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGlucHV0U2VsZWN0OkhUTUxJbnB1dEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudChcImJzcHBTZWxlY3RcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dFdpbmRvd3tcclxuICAgIHByaXZhdGUgcHJldmlvdXNQOnN0cmluZz1cIjBcIjtcclxuICAgIHByaXZhdGUgaW5wdXRjb250cm9sOklucHV0TGluZUNvbnRyb2w9SW5wdXRMaW5lQ29udHJvbC5nZXRJbnN0YW5jZSgpO1xyXG4gICAgcHJpdmF0ZSBJbnB1dFRleHRBcmVhRWxlbWVudDpIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBwV2luZG93OlByb2plY3RXaW5kb3c7XHJcblxyXG4gICAgY29uc3RydWN0b3IocDpQcm9qZWN0V2luZG93KXtcclxuICAgICAgICB0aGlzLklucHV0VGV4dEFyZWFFbGVtZW50PWdldEh0bWxFbGVtZW50KCdJbnB1dFRleHRBcmVhJylhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgICAgIHRoaXMucFdpbmRvdz1wO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHRyYW5zbGF0ZSA9ICgpOnZvaWQ9PntcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGxldCBzOnN0cmluZ1tdPXRoaXMuSW5wdXRUZXh0QXJlYUVsZW1lbnQudmFsdWUuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGlmKCEocy5sZW5ndGg8MSkpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wV2luZG93LnJlZnJlc2hJbnB1dFN0cmluZ3Mocyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Y29udHJvbC5hZGRJbnB1dExpbmVzKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIElucHV0TGluZXMhJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9Y2F0Y2goZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgYWRkTGluZXRvVGV4dEFyZWE9KHM6c3RyaW5nW10pPT57XHJcbiAgICAgICAgdGhpcy5JbnB1dFRleHRBcmVhRWxlbWVudC52YWx1ZT1cIlwiO1xyXG4gICAgICAgIHMuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5JbnB1dFRleHRBcmVhRWxlbWVudC52YWx1ZSs9ZStcIlxcblwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0cmFuc2xhdGVBbmRHbyA9IGFzeW5jKCk9PntcclxuICAgICAgICBhd2FpdCB0aGlzLnRyYW5zbGF0ZSgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHVzaElucHV0TGluZXMoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLm9wZW5FZGl0V2luZG93KCk7ICAgICAgICBcclxuICAgIH1cclxuICAgIHB1YmxpYyBwdXNoSW5wdXRMaW5lcz1hc3luYygpPT57XHJcbiAgICAgICAgaWYodGhpcy5wV2luZG93KXtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wV2luZG93LnJlc2V0KClcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wV2luZG93LnJlZnJlc2hJbnB1dExpbmVzKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucFdpbmRvdy5kaXNwbGF5SW5wdXRMaW5lcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgc3dpdGNoSW5wdXRDb250ZW50PSgpPT57XHJcbiAgICAgICAgbGV0IHM6c3RyaW5nID0gaW5wdXRTZWxlY3QudmFsdWU7XHJcbiAgICAgICAgaWYocz09XCIwXCIpe1xyXG4gICAgICAgICAgICBic3AwID10aGlzLklucHV0VGV4dEFyZWFFbGVtZW50LnZhbHVlLnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhic3AwKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhzKTtcclxuICAgICAgICB0aGlzLnByZXZpb3VzUD1zO1xyXG4gICAgICAgIC8vIHRoaXMuYWRkTGluZXRvVGV4dEFyZWEoKVxyXG4gICAgfVxyXG4gICAgLyogcHJpdmF0ZSBnZXRCc3A9KHM6c3RyaW5nKTpzdHJpbmdbXT0+e1xyXG4gICAgICAgIE9iamVjdC5rZXlzXHJcbiAgICB9ICovXHJcbiAgICBwdWJsaWMgb3BlbkVkaXRXaW5kb3cgPSgpPT57XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBhbmlDb250cm9sLnNldFBhdXNlZCgpO1xyXG4gICAgICAgICAgICBsZXQgYiA9d2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXRXaW5kb3dDb250YWluZXIpO1xyXG4gICAgICAgICAgICBpZihiLmdldFByb3BlcnR5VmFsdWUoJ3Zpc2liaWxpdHknKT09XCJoaWRkZW5cIil7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFdpbmRvd0NvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBpbnB1dFdpbmRvd0NvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9Y2F0Y2goZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGNyZWF0ZUV2ZW50TGlzdGVuZXJzPSgpPT57XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgYT0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0VkaXRXaW5kb3dPcGVuQnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICBpZihhIT1udWxsKXtcclxuICAgICAgICAgICAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5vcGVuRWRpdFdpbmRvdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50ICNFZGl0V2luZG93T3BlbkJ1dHRvbiBpcyBudWxsIVwiKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1N1Ym1pdCcpO1xyXG4gICAgICAgICAgICBpZihjIT1udWxsKXtcclxuICAgICAgICAgICAgICAgIGMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy50cmFuc2xhdGVBbmRHbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50ICNTdWJtaXQgaXMgbnVsbCFcIilcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjcmVhdGVDbGlja0xpc3RlbmVyKCdQcmV2aWV3Jyx0aGlzLnByZXZpZXdUcmFuc2xhdGlvbik7XHJcbiAgICAgICAgY3JlYXRlQ2xpY2tMaXN0ZW5lcignR2VuZXJhdGVEdW1teScsdGhpcy5nZW5lcmF0ZUR1bW15KTtcclxuICAgICAgICBjcmVhdGVDbGlja0xpc3RlbmVyKCdDbG9zZUlucHV0V2luZG93Jyx0aGlzLm9wZW5FZGl0V2luZG93KTtcclxuICAgICAgICBpbnB1dFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsdGhpcy5zd2l0Y2hJbnB1dENvbnRlbnQpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdlbmVyYXRlRHVtbXkgPSAoKTp2b2lkPT57XHJcbiAgICAgICAgdGhpcy5hZGRMaW5ldG9UZXh0QXJlYShic3AxKTtcclxuICAgIH1cclxufSBcclxubGV0IGJzcDA6c3RyaW5nW109W11cclxuY29uc3QgYnNwMTpzdHJpbmdbXT1bXHJcbiAgICBcIkxhYmVsMTpNb3YgQSw5NWhcIixcIk1vdiBCLDk1aFwiLFwiTW92IEMsOTVoXCIsXCJNb3YgSVgsMTI5NWhcIixcIk1vdiBITCwxMDk1aFwiLFwiTW92IFNQLDIzOTVoXCIsXCJNb3YgQSxCXCIsXHJcbiAgICBcIk1vdiBBLENcIixcIk1vdiBCLEFcIixcIk1vdiBCLENcIixcIk1vdiBDLEFcIixcIk1vdiBDLEJcIixcIk1vdiBBLExhYmVsMVwiLFwiTW92IEhMLExhYmVsMVwiLFwiTW92IElYLExhYmVsMVwiLFxyXG4gICAgXCJNb3YgTGFiZWwxLEFcIixcIk1vdiBMYWJlbDEsSExcIixcIk1vdiBMYWJlbDEsSVhcIixcIk1PViBBLFtITF1cIixcIk1PViBbSExdLEFcIixcIlBVU0hcIixcIlBPUFwiLFwiSU4gQSwgNjdoXCIsXHJcbiAgICBcIk9VVCA0NiwgQVwiLFwiSU5DIEFcIixcIkRFQyBBXCIsXCJBREQgQVwiLFwiU1VCIEFcIixcIkFORCBBXCIsXCJPUiBBXCIsXCJYT1IgQVwiLFwiU0hMXCIsXCJTSFJcIixcIlJDTFwiLFwiUk9MXCIsXCJSQ1JcIixcclxuICAgIFwiUk9SXCIsXCJDUCBBXCIsXCJKUCBMYWJlbDFcIixcIkNBTEwgTGFiZWwxXCIsXCJSRVRcIixcIkhBTFRcIixcIk5PUFwiLFwiREIgNDVoXCIsXCJEVyA0NWhcIixcIlJTIDNcIixcIk9SRyAyMzIzaFwiLFxyXG4gICAgXCJjb25zdDEgRVFVIDM0MzRoXCIsXHJcbl1cclxuY29uc3QgYnNwMjpzdHJpbmdbXT1bXHJcbiAgICBcIkxhYmVsMTpNb3YgQSw5NWhcIixcIk1vdiBCLDk1aFwiLFwiTW92IEMsOTVoXCIsXCJNb3YgSVgsMTI5NWhcIixcIk1vdiBITCwxMDk1aFwiLFwiTW92IFNQLDIzOTVoXCIsXCJNb3YgQSxCXCIsXHJcbiAgICBcIk1vdiBBLENcIixcIk1vdiBCLEFcIixcIk1vdiBCLENcIixcIk1vdiBDLEFcIixcIk1vdiBDLEJcIixcIk1vdiBBLExhYmVsMVwiLFwiTW92IEhMLExhYmVsMVwiLFwiTW92IElYLExhYmVsMVwiLFxyXG4gICAgXCJNb3YgTGFiZWwxLEFcIixcIk1vdiBMYWJlbDEsSExcIixcIk1vdiBMYWJlbDEsSVhcIixcIk1PViBBLFtITF1cIixcIk1PViBbSExdLEFcIixcIlBVU0hcIixcIlBPUFwiLFwiSU4gQSwgNjdoXCIsXHJcbiAgICBcIk9VVCA0NiwgQVwiLFwiSU5DIEFcIixcIkRFQyBBXCIsXCJBREQgQVwiLFwiU1VCIEFcIixcIkFORCBBXCIsXCJPUiBBXCIsXCJYT1IgQVwiLFwiU0hMXCIsXCJTSFJcIixcIlJDTFwiLFwiUk9MXCIsXCJSQ1JcIixcclxuICAgIFwiUk9SXCIsXCJDUCBBXCIsXCJKUCBMYWJlbDFcIixcIkNBTEwgTGFiZWwxXCIsXCJSRVRcIixcIkhBTFRcIixcIk5PUFwiLFwiREIgNDVoXCIsXCJEVyA0NWhcIixcIlJTIDNcIixcIk9SRyAyMzIzaFwiLFxyXG4gICAgXCJjb25zdDEgRVFVIDM0MzRoXCIsXHJcbl0iLCJpbXBvcnQgeyBhbmlDb250cm9sLCBBbmltYXRpb25zVHlwLCBjaGVja0lmUGF1c2VkLCBzbGVlcEZvciwgc2xlZXBGb3JGcmFtZSwgc2xlZXBTdGF0aWNBbmltYXRpb24sIHNsZWVwU3RhdGljQW5pbWF0aW9uSGFsZiwgc2xlZXBTdG9wU3RhcnRUaW1lLCBzbGVlcFVudGlsTmV4dFN0ZXAgfSBmcm9tIFwiLi9BbmltYXRpb25VdGlsXCI7XHJcbmltcG9ydCB7IE1hbmlwdWxhdG9yIH0gZnJvbSBcIi4vQmFja2VuZC9NYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyByb290LCByb290VmFyaWFibGVzIH0gZnJvbSBcIi4vaW5kZXhcIjtcclxuaW1wb3J0IHsgcDJMYWJlbFZhbHVlUGxhY2Vob2xkZXIsIHN5bWJvbGFkZHJlc3MsIHRhcmdldGxhYmVsVmFsdWVQbGFjZWhvbGRlciwgdGFyZ2V0U3ltYm9sVGFibGVMaW5lIH0gZnJvbSBcIi4vUHJvamVjdFdpbmRvd1wiO1xyXG5pbXBvcnQgeyBnZXRIdG1sRWxlbWVudCwgdXBkYXRlU2Nyb2xsT2ZJbl9PdXQsIHVwZGF0ZVNjcm9sbE9mU3ltYm9sVGFibGUgfSBmcm9tIFwiLi9Ub29sc1wiO1xyXG5cclxuXHJcbmNvbnN0IGFycm93SGVhZElEOnN0cmluZz1cImFycm93SGVhZFwiO1xyXG5jb25zdCBhcnJvd1ZlcnRpY2FsSUQ6c3RyaW5nPVwiYXJyb3dWZXJ0aWNhbFwiO1xyXG5jb25zdCBhcnJvd0pvaW50SUQ6c3RyaW5nPVwiYXJyb3dKb2ludFwiO1xyXG5jb25zdCBhcnJvd0hvcml6b250YWxJRDpzdHJpbmc9XCJhcnJvd0hvcml6b250YWxcIjtcclxuY29uc3QgYXJyb3dVcF9Eb3duQ046c3RyaW5nPVwiYXJyb3dVUF9Eb3duXCI7XHJcbmNvbnN0IGFycm93TGVmdF9SaWdodENOOnN0cmluZz1cImFycm93TGVmdF9SaWdodFwiO1xyXG5jb25zdCBhcnJvd0hvcml6b250YWxJRDI6c3RyaW5nPVwiYXJyb3dIb3Jpem9udGFsMlwiO1xyXG5jb25zdCBhcnJvd0pvaW50SUQyOnN0cmluZz1cImFycm93Sm9pbnQyXCI7XHJcblxyXG5jb25zdCBVUDpzdHJpbmc9XCJ1cFwiO1xyXG5jb25zdCBET1dOOnN0cmluZz1cImRvd25cIjtcclxuY29uc3QgTEVGVDpzdHJpbmc9XCJsZWZ0XCI7XHJcbmNvbnN0IFJJR0hUOnN0cmluZz1cInJpZ2h0XCI7XHJcbmNvbnN0IEpRMTpzdHJpbmcgPVwianExXCI7XHJcbmNvbnN0IEpRMjpzdHJpbmcgPVwianEyXCI7XHJcbmNvbnN0IEpRMzpzdHJpbmcgPVwianEzXCI7XHJcbmNvbnN0IEpRNDpzdHJpbmcgPVwianE0XCI7XHJcbmV4cG9ydCBjb25zdCBhZGRyZXNzYnl0ZTpzdHJpbmc9XCJhZGRyZXNzYnl0ZVwiO1xyXG5jb25zdCBvdmVybGFwZGl2aWRlcjpudW1iZXI9NTA7XHJcbmNvbnN0IGFuaVRwMlRpbWVBZGp1c3RlcjpudW1iZXI9ODtcclxuXHJcbmNvbnN0IGJvZHlFbGVtID0gZ2V0SHRtbEVsZW1lbnQoXCJib2R5XCIpO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFuaW1hdG9ye1xyXG5cclxuICAgIGN1cnJlbnRMaW5lRWxlbTpIVE1MRWxlbWVudDtcclxuICAgIGRlc2NyaXB0aW9uTGluZUVsZW06SFRNTEVsZW1lbnQ7XHJcbiAgICBkZXNjcmlwdGlvblRhYmxlQm94OkhUTUxFbGVtZW50O1xyXG4gICAgZnJhbWVTbGVlcFRpbWU6bnVtYmVyID0gMTA7XHJcbiAgICBtb3ZpbmdFbGVtZW50RmxhZzpib29sZWFuO1xyXG4gICAgbW92YWJsZUVsZW06SFRNTERpdkVsZW1lbnQ7XHJcbiAgICBtb3ZhYmxlSGVscGVyOkhUTUxEaXZFbGVtZW50O1xyXG4gICAgb3V0UHV0TGluZXNFbGVtOkhUTUxFbGVtZW50O1xyXG4gICAgb3V0UHV0VGV4dDpIVE1MRWxlbWVudDtcclxuICAgIGlucHV0VGV4dDpIVE1MRWxlbWVudDtcclxuICAgIHZvcmdhbmdFbGVtOkhUTUxFbGVtZW50O1xyXG4gICAgc3ltYm9sVGFibGVFbGVtOkhUTUxFbGVtZW50O1xyXG4gICAgc3ltYm9sVGFibGVCb3g6SFRNTEVsZW1lbnQ7XHJcbiAgICBhcnJvd0VsZW1zOkhUTUxEaXZFbGVtZW50W109W107XHJcbiAgICB0YXJnZXRFbGVtVG9wOm51bWJlcj0wO1xyXG4gICAgdGFyZ2V0RWxlbUxlZnQ6bnVtYmVyPTA7XHJcbiAgICB0dXJuU2xlZXBUaW1lOm51bWJlciA9IDEwMDA7XHJcbiAgICBhZGRyZXNzemFlaGxlckVsZW06SFRNTEVsZW1lbnQ7XHJcbiAgICB0cmFuc2xhdGVkaW5mb0RpdmlkZXJEaXY6SFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLm1vdmluZ0VsZW1lbnRGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbSA9IHRoaXMuY3JlYXRlTW92YWJsZSgpO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUhlbHBlcj0gdGhpcy5jcmVhdGVNb3ZhYmxlSGVscGVyKCk7XHJcbiAgICAgICAgdGhpcy5pbnB1dFRleHQgPWdldEh0bWxFbGVtZW50KFwiSW5wdXRUZXh0XCIpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudExpbmVFbGVtID0gZ2V0SHRtbEVsZW1lbnQoXCJjdXJyZW50TGluZVwiKTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uTGluZUVsZW09IGdldEh0bWxFbGVtZW50KFwiZGVzY3JpcHRpb25MaW5lc1wiKTtcclxuICAgICAgICB0aGlzLnZvcmdhbmdFbGVtID0gZ2V0SHRtbEVsZW1lbnQoXCJEZXNjcmlwdGlvblwiKTtcclxuICAgICAgICB0aGlzLnN5bWJvbFRhYmxlRWxlbT0gZ2V0SHRtbEVsZW1lbnQoXCJzeW1ib2xUYWJsZUxpbmVzXCIpO1xyXG4gICAgICAgIHRoaXMuc3ltYm9sVGFibGVCb3g9IGdldEh0bWxFbGVtZW50KFwiU3ltYm9sVGFibGVcIik7XHJcbiAgICAgICAgdGhpcy5vdXRQdXRMaW5lc0VsZW0gPSBnZXRIdG1sRWxlbWVudChcIk91dHB1dExpbmVzXCIpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25UYWJsZUJveD0gZ2V0SHRtbEVsZW1lbnQoXCJkZXNjcmlwdGlvblN5bWJvbHRhYmxlQm94XCIpO1xyXG4gICAgICAgIHRoaXMub3V0UHV0VGV4dCA9IGdldEh0bWxFbGVtZW50KFwiT3V0cHV0VGV4dFwiKTtcclxuICAgICAgICB0aGlzLmFkZHJlc3N6YWVobGVyRWxlbSA9IGdldEh0bWxFbGVtZW50KFwiQWRkcmVzc3phaGxlclwiKTtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZWRpbmZvRGl2aWRlckRpdj1nZXRIdG1sRWxlbWVudChcInRyYW5zbGF0ZWRpbmZvRGl2aWRlckRpdlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpe1xyXG4gICAgICAgIHRoaXMubW92aW5nRWxlbWVudEZsYWc9ZmFsc2U7XHJcbiAgICAgICAgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgICAgIHRoaXMudHVybk1vdmFibGVIZWxwZXJIaWRkZW4oKTtcclxuICAgICAgICB0aGlzLnR1cm5BcnJvd0VsZW1zSGlkZGVuKCk7XHJcbiAgICAgICAgdGhpcy5mcmFtZVNsZWVwVGltZT0xMDtcclxuICAgICAgICB0aGlzLnR1cm5TbGVlcFRpbWUgPSAxMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG1vdmVDb25zdFRvU3ltYm9sVGFibGUobGluZTpzdHJpbmcpe1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkzKCkpIHJldHVybjtcclxuICAgICAgICBsZXQgdGFyZ2V0RWxlbSA9IGdldEh0bWxFbGVtZW50KHRhcmdldFN5bWJvbFRhYmxlTGluZSk7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDRcIixsaW5lKTtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1MZWZ0PXRoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5vZmZzZXRMZWZ0O1xyXG4gICAgICAgIHRoaXMuc2V0TW92YWJsZVBhcmFtZXRlcnMoKHRoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5vZmZzZXRUb3ArdGhpcy5kZXNjcmlwdGlvbkxpbmVFbGVtLm9mZnNldEhlaWdodC10aGlzLnZvcmdhbmdFbGVtLm9mZnNldEhlaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbUxlZnQpO1xyXG4gICAgICAgIGxldCBuID0gdXBkYXRlU2Nyb2xsT2ZTeW1ib2xUYWJsZSh0YXJnZXRTeW1ib2xUYWJsZUxpbmUpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbVRvcD10YXJnZXRFbGVtLm9mZnNldFRvcC1uK3RhcmdldEVsZW0ub2Zmc2V0SGVpZ2h0LzItdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvMjtcclxuXHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5pc0FuaTEoKSl7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgd2hpbGUodGhpcy50YXJnZXRFbGVtVG9wPnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2sodGhpcy5nZXRQaXhlbGp1bXAoKSwwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDRcIixsaW5lKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUubGVmdD10aGlzLnRhcmdldEVsZW1MZWZ0K1wicHhcIjtcclxuICAgICAgICAgICAgbGV0IGFycm93SGVhZCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SGVhZElEKTtcclxuICAgICAgICAgICAgbGV0IGFycm93VmVydGljYWwgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd1ZlcnRpY2FsSUQpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZIZWFkKERPV04pO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVRvVXAodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3AtYXJyb3dIZWFkLm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aC8yLWFycm93SGVhZC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS50b3A9dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmxlZnQ9YXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQ9YXJyb3dIZWFkLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcit0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcithcnJvd0hlYWQub2Zmc2V0VG9wLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0K1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRF0pO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpO1xyXG4gICAgICAgICAgIGF3YWl0IHNsZWVwU3RhdGljQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFN0YXRpY0JvZHlXaWR0aCgpe1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQXJyb3dib2R5IHdpZHRoOiBcIityb290VmFyaWFibGVzLmdldFByb3BlcnR5VmFsdWUoXCItLWFycm93Qm9keVdcIikpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQXJyb3doZWFkIHdpZHRoOiBcIityb290VmFyaWFibGVzLmdldFByb3BlcnR5VmFsdWUoXCItLWFycm93SGVhZGxyV1wiKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJBcnJvd2hlYWQgaGVpZ2h0OiBcIityb290VmFyaWFibGVzLmdldFByb3BlcnR5VmFsdWUoJy0tYXJyb3dIZWFkbHJIJykpO1xyXG4gICAgICAgIGxldCBzOm51bWJlciA9IE51bWJlcihyb290VmFyaWFibGVzLmdldFByb3BlcnR5VmFsdWUoXCItLWFycm93Qm9keVdcIikucmVwbGFjZShcInB4XCIsXCJcIikpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHMpO1xyXG4gICAgICAgIHJldHVybiBzO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgYXN5bmMgbW92ZUxhYmVsdG9TeW1ib2x0YWJsZUFMVE1vdmVhYmxlSGVscGVyKGhleDpzdHJpbmcpe1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkzKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnRvcD10aGlzLmFkZHJlc3N6YWVobGVyRWxlbS5vZmZzZXRUb3ArXCJweFwiO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS5sZWZ0PXRoaXMuYWRkcmVzc3phZWhsZXJFbGVtLm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDNcIixoZXgpO1xyXG4gICAgICAgIGxldCBwbGFjZWhvbGRlcjpIVE1MU3BhbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRsYWJlbFZhbHVlUGxhY2Vob2xkZXIpIGFzIEhUTUxTcGFuRWxlbWVudDtcclxuICAgICAgICBpZihwbGFjZWhvbGRlcj09bnVsbCl7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJSVVZcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBuID0gdXBkYXRlU2Nyb2xsT2ZTeW1ib2xUYWJsZSh0YXJnZXRsYWJlbFZhbHVlUGxhY2Vob2xkZXIpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbVRvcD1wbGFjZWhvbGRlci5vZmZzZXRUb3AtbitwbGFjZWhvbGRlci5vZmZzZXRIZWlnaHQqMS8yLXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQqMS8yO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbUxlZnQ9cGxhY2Vob2xkZXIub2Zmc2V0TGVmdDtcclxuICAgICAgICBcclxuICAgICAgICBpZihhbmlDb250cm9sLmlzQW5pMSgpKXtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKHBsYWNlaG9sZGVyLm9mZnNldExlZnQ+dGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQpe1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlSGVscGVyU2xlZXBDaGVjaygwLHRoaXMuZ2V0UGl4ZWxqdW1wKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS5sZWZ0PXBsYWNlaG9sZGVyLm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgd2hpbGUodGhpcy50YXJnZXRFbGVtVG9wPnRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlSGVscGVyU2xlZXBDaGVjayh0aGlzLmdldFBpeGVsanVtcCgpLDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgIFxyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLmlubmVySFRNTD10aGlzLmZvcm1hdExpbmVTdHJpbmcoXCJoM1wiLGhleCk7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wPXRoaXMudGFyZ2V0RWxlbVRvcCtcInB4XCI7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUubGVmdD10aGlzLnRhcmdldEVsZW1MZWZ0K1wicHhcIjtcclxuICAgICAgICAgICAgbGV0IGFycm93SGVhZCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SGVhZElEKTtcclxuICAgICAgICAgICAgbGV0IGFycm93SG9yaXpvbnRhbCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SG9yaXpvbnRhbElEKTtcclxuICAgICAgICAgICAgbGV0IGFycm93Sm9pbnQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQpO1xyXG4gICAgICAgICAgICBsZXQgYXJyb3dWZXJ0aWNhbCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93VmVydGljYWxJRCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZIZWFkKERPV04pO1xyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZKb2ludCgxLEpRMSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVG9VcCh0cnVlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS50b3A9KHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wLWFycm93SGVhZC5vZmZzZXRIZWlnaHQpK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLmxlZnQ9KHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoLzItYXJyb3dIZWFkLm9mZnNldFdpZHRoLzIpK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUubGVmdD0oYXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yKStcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUudG9wPSh0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQvMi1hcnJvd0hvcml6b250YWwub2Zmc2V0SGVpZ2h0LzIpK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUudG9wPShhcnJvd0hvcml6b250YWwub2Zmc2V0VG9wKStcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUubGVmdD0oYXJyb3dWZXJ0aWNhbC5vZmZzZXRMZWZ0KStcInB4XCI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUud2lkdGg9KHRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcithcnJvd0pvaW50Lm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyLXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQub2Zmc2V0TGVmdC10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0V2lkdGgpK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLmxlZnQ9KHRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aC10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIpK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0PShhcnJvd0pvaW50Lm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcithcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93SGVhZC5vZmZzZXRUb3AtYXJyb3dKb2ludC5vZmZzZXRUb3ApK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS50b3A9KGFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0LWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyKStcInB4XCI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5BcnJvd0VsZW1WaXNpYmxlKFthcnJvd0hlYWRJRCxhcnJvd1ZlcnRpY2FsSUQsYXJyb3dKb2ludElELGFycm93SG9yaXpvbnRhbElEXSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RhdGljQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG1vdmVMYWJlbHRvU3ltYm9sdGFibGVBTFRNb3ZlYWJsZShsaW5lOnN0cmluZyl7XHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5pc0FuaTMoKSkgcmV0dXJuO1xyXG4gICAgICAgIGxldCB0YXJnZXRFbGVtID0gZ2V0SHRtbEVsZW1lbnQodGFyZ2V0U3ltYm9sVGFibGVMaW5lKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDNcIixsaW5lKTtcclxuICAgICAgICB0aGlzLnNldE1vdmFibGVQYXJhbWV0ZXJzKCh0aGlzLmRlc2NyaXB0aW9uTGluZUVsZW0ub2Zmc2V0VG9wK3RoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5vZmZzZXRIZWlnaHQtdGhpcy52b3JnYW5nRWxlbS5vZmZzZXRIZWlnaHQpLHRoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5vZmZzZXRMZWZ0KTtcclxuICAgICAgICBsZXQgbiA9IHVwZGF0ZVNjcm9sbE9mU3ltYm9sVGFibGUodGFyZ2V0U3ltYm9sVGFibGVMaW5lKTtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3A9dGFyZ2V0RWxlbS5vZmZzZXRUb3Atbit0YXJnZXRFbGVtLm9mZnNldEhlaWdodC8yLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0LzI7XHJcblxyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkxKCkpe1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgd2hpbGUodGhpcy50YXJnZXRFbGVtVG9wPnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2sodGhpcy5nZXRQaXhlbGp1bXAoKSwwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIsbGluZSk7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLmxlZnQ9dGhpcy50YXJnZXRFbGVtTGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgIGxldCBhcnJvd0hlYWQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0hlYWRJRCk7XHJcbiAgICAgICAgICAgIGxldCBhcnJvd1ZlcnRpY2FsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dWZXJ0aWNhbElEKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSGVhZChET1dOKTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVUb1VwKHRydWUpO1xyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3AtYXJyb3dIZWFkLm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aC8yLWFycm93SGVhZC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS50b3A9dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmxlZnQ9YXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQ9YXJyb3dIZWFkLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcit0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcithcnJvd0hlYWQub2Zmc2V0VG9wLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0K1wicHhcIjtcclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5BcnJvd0VsZW1WaXNpYmxlKFthcnJvd0hlYWRJRCxhcnJvd1ZlcnRpY2FsSURdKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuQXJyb3dFbGVtc0hpZGRlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVySGlkZGVuKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZXhjaGFuZ2VMYWJlbFdpdGhTeW1ib2xUYWJsZSh0b0xpbmU6c3RyaW5nLHJldHVybkxpbmU6c3RyaW5nLGlkOm51bWJlcil7XHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5pc0FuaTMoKSkgcmV0dXJuO1xyXG4gICAgICAgIGxldCB0YXJnZXRFbGVtID0gZ2V0SHRtbEVsZW1lbnQoYHN5bWJvbCR7aWR9YCk7XHJcblxyXG4gICAgICAgIHRoaXMubW92YWJsZUVsZW0uaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIsdG9MaW5lKTtcclxuICAgICAgICB0aGlzLnNldE1vdmFibGVQYXJhbWV0ZXJzKCh0aGlzLmRlc2NyaXB0aW9uTGluZUVsZW0ub2Zmc2V0VG9wK3RoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5vZmZzZXRIZWlnaHQtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQpLHRoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5vZmZzZXRMZWZ0KTtcclxuXHJcbiAgICAgICAgaWYodGFyZ2V0RWxlbSE9bnVsbCl7XHJcbiAgICAgICAgICAgIGxldCBuPSB1cGRhdGVTY3JvbGxPZlN5bWJvbFRhYmxlKHRhcmdldEVsZW0uaWQpXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbVRvcD10YXJnZXRFbGVtLm9mZnNldFRvcC0obj4wP246MCkrdGFyZ2V0RWxlbS5vZmZzZXRIZWlnaHQvMi10aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC8yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3A9dGhpcy5zeW1ib2xUYWJsZUVsZW0ub2Zmc2V0VG9wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihhbmlDb250cm9sLmlzQW5pMSgpKXtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKHRoaXMudGFyZ2V0RWxlbVRvcD50aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKHRoaXMuZ2V0UGl4ZWxqdW1wKCksMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgIFxyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgaWYoaWQ8MCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubW92YWJsZUVsZW0uaW5uZXJIVE1MPWA8aDMgY2xhc3M9XCJtb3ZlYWJsZVRleHRcIj4ke3JldHVybkxpbmV9PC9oMz5gO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLmlubmVySFRNTD10aGlzLmZvcm1hdExpbmVTdHJpbmcoXCJoM1wiLHJldHVybkxpbmUpO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3A9dGhpcy5kZXNjcmlwdGlvbkxpbmVFbGVtLm9mZnNldFRvcCt0aGlzLmRlc2NyaXB0aW9uTGluZUVsZW0ub2Zmc2V0SGVpZ2h0LXRoaXMudm9yZ2FuZ0VsZW0ub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICB3aGlsZSh0aGlzLnRhcmdldEVsZW1Ub3A8dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlU2xlZXBDaGVjaygtdGhpcy5nZXRQaXhlbGp1bXAoKSwwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLmlubmVySFRNTD10aGlzLmZvcm1hdExpbmVTdHJpbmcoXCJoM1wiLHRvTGluZSk7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLmxlZnQ9dGhpcy50YXJnZXRFbGVtTGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgIGxldCBhcnJvd0hlYWQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0hlYWRJRCk7XHJcbiAgICAgICAgICAgIGxldCBhcnJvd1ZlcnRpY2FsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dWZXJ0aWNhbElEKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSGVhZChET1dOKTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVUb1VwKHRydWUpO1xyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3AtYXJyb3dIZWFkLm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aC8yLWFycm93SGVhZC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0PWFycm93SGVhZC5vZmZzZXRMZWZ0K2Fycm93SGVhZC5vZmZzZXRXaWR0aC8yLWFycm93VmVydGljYWwub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0PWFycm93SGVhZC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrYXJyb3dIZWFkLm9mZnNldFRvcC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcC10aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUudG9wPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0LXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRF0pO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgICAgIGlmKGlkPDApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIscmV0dXJuTGluZSk7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIscmV0dXJuTGluZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSGVhZChVUCk7XHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS50b3A9dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUubGVmdD10aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC8yLWFycm93SGVhZC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUudG9wPWFycm93SGVhZC5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC1hcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0PWFycm93SGVhZC5vZmZzZXRMZWZ0K2Fycm93SGVhZC5vZmZzZXRXaWR0aC8yLWFycm93VmVydGljYWwub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0PWFycm93SGVhZC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlci1hcnJvd0hlYWQub2Zmc2V0VG9wLWFycm93SGVhZC5vZmZzZXRIZWlnaHQrdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFRvcCtcInB4XCI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5BcnJvd0VsZW1WaXNpYmxlKFthcnJvd0hlYWRJRCxhcnJvd1ZlcnRpY2FsSURdKTtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuXHJcbiAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgc2VhcmNoRW50cnlJblN5bWJvbHRhYmxlcGhhc2VPbmUoaWRUb1NlYXJjaDpzdHJpbmcsZW50cnlOYW1lOnN0cmluZyxpZFRvRmluZDpudW1iZXIpe1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkzKCkpIHJldHVybjtcclxuICAgICAgICBsZXQgaXNTdWNjZXNzZnVsOmJvb2xlYW4gPWZhbHNlO1xyXG4gICAgICAgIGxldCBmcm9tRWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkVG9TZWFyY2gpO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUVsZW0uaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIsZW50cnlOYW1lKTtcclxuXHJcbiAgICAgICAgbGV0IGFycm93SGVhZCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SGVhZElEKTtcclxuICAgICAgICBsZXQgYXJyb3dIb3Jpem9udGFsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dIb3Jpem9udGFsSUQpO1xyXG4gICAgICAgIGxldCBhcnJvd0pvaW50ID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dKb2ludElEKTtcclxuICAgICAgICBsZXQgYXJyb3dWZXJ0aWNhbCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93VmVydGljYWxJRCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Q2xhc3NPZkhlYWQoRE9XTik7XHJcbiAgICAgICAgdGhpcy5zZXRDbGFzc09mSm9pbnQoMSxKUTIpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlVG9VcCh0cnVlKTtcclxuICAgICAgICAvL3NldHVwIHBhcmFtZXRlcnNcclxuICAgICAgICBsZXQgdG9FbGVtOkhUTUxFbGVtZW50O1xyXG4gICAgICAgIHRvRWxlbSA9dGhpcy5zeW1ib2xUYWJsZUVsZW0uZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBsZXQgbiA9dXBkYXRlU2Nyb2xsT2ZTeW1ib2xUYWJsZSh0b0VsZW0uaWQpO1xyXG4gICAgICAgIGFycm93SGVhZC5zdHlsZS50b3A9dG9FbGVtLm9mZnNldFRvcC0obj4wP246MCktYXJyb3dIZWFkLm9mZnNldEhlaWdodCtcInB4XCI7XHJcblxyXG4gICAgICAgIGlmKGZyb21FbGVtICE9bnVsbCl7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUubGVmdD1mcm9tRWxlbS5vZmZzZXRMZWZ0K2Zyb21FbGVtLm9mZnNldFdpZHRoLzItdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS50b3A9ZnJvbUVsZW0ub2Zmc2V0VG9wLXRoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5zY3JvbGxUb3ArZnJvbUVsZW0ub2Zmc2V0SGVpZ2h0LzItdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUudG9wPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0LzItYXJyb3dIb3Jpem9udGFsLm9mZnNldEhlaWdodC8yK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLmxlZnQgPSB0aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0TGVmdCt0aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0V2lkdGgvMTAwK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUudG9wID0gYXJyb3dIb3Jpem9udGFsLm9mZnNldFRvcCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUubGVmdD0gYXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dKb2ludC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS53aWR0aD10aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQtYXJyb3dKb2ludC5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS5sZWZ0ID0gYXJyb3dKb2ludC5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQub2Zmc2V0V2lkdGgtYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmxlZnQ9YXJyb3dKb2ludC5vZmZzZXRMZWZ0K1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS50b3A9YXJyb3dKb2ludC5vZmZzZXRUb3ArYXJyb3dKb2ludC5vZmZzZXRIZWlnaHQtYXJyb3dKb2ludC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmhlaWdodD1hcnJvd0hlYWQub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93SGVhZC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrYXJyb3dKb2ludC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5BcnJvd0VsZW1WaXNpYmxlKFthcnJvd0hlYWRJRCxhcnJvd1ZlcnRpY2FsSUQsYXJyb3dKb2ludElELGFycm93SG9yaXpvbnRhbElEXSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmxlZnQ9dGhpcy5kZXNjcmlwdGlvblRhYmxlQm94Lm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0VG9wK3RoaXMuZGVzY3JpcHRpb25UYWJsZUJveC5vZmZzZXRIZWlnaHQtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLmxlZnQ9dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvMi1hcnJvd0hlYWQub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUubGVmdCA9IGFycm93SGVhZC5vZmZzZXRMZWZ0K2Fycm93SGVhZC5vZmZzZXRXaWR0aC8yLWFycm93VmVydGljYWwub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUudG9wPSB0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC10aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0PWFycm93SGVhZC5vZmZzZXRUb3AtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcit0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAvLyB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpO1xyXG4gICAgICAgIC8vIGF3YWl0IHNsZWVwU3RhdGljQW5pbWF0aW9uKCk7XHJcblxyXG4gICAgICAgIGlmKGlkVG9GaW5kPj0wICYmIHRoaXMuc3ltYm9sVGFibGVFbGVtLmNoaWxkRWxlbWVudENvdW50LTI+PWlkVG9GaW5kKXtcclxuICAgICAgICAgICAgaXNTdWNjZXNzZnVsPXRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGlkVG9GaW5kPXRoaXMuc3ltYm9sVGFibGVFbGVtLmNoaWxkRWxlbWVudENvdW50PjE/dGhpcy5zeW1ib2xUYWJsZUVsZW0uY2hpbGRFbGVtZW50Q291bnQtMjowO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IobGV0IGk9MDtpPD1pZFRvRmluZDtpKyspe1xyXG4gICAgICAgICAgICBpZihpPT0wKXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RhdGljQW5pbWF0aW9uSGFsZigpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xUYWJsZUVsZW0uY2hpbGRFbGVtZW50Q291bnQ9PWkpe1xyXG4gICAgICAgICAgICAgICAgLy9wcm9iYWJseSB3b250IGhhcHBlbiBidXQganVzdCB0byBtYWtlIHN1cmVcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvRWxlbSA9IHRoaXMuc3ltYm9sVGFibGVFbGVtLmNoaWxkcmVuW2ldIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBuID11cGRhdGVTY3JvbGxPZlN5bWJvbFRhYmxlKHRvRWxlbS5pZCk7XHJcbiAgICAgICAgICAgIC8vQXJyb3dTZXR1cFxyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRvRWxlbS5vZmZzZXRUb3AtKG4+MD9uOjApLWFycm93SGVhZC5vZmZzZXRIZWlnaHQrXCJweFwiO1xyXG4gICAgICAgICAgICBpZihmcm9tRWxlbSAhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQ9YXJyb3dIZWFkLm9mZnNldFRvcC1hcnJvd0pvaW50Lm9mZnNldFRvcCthcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQ9YXJyb3dIZWFkLm9mZnNldFRvcC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCthcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhcnJvd1ZlcnRpY2FsLnN0eWxlLmhlaWdodD1hcnJvd1ZlcnRpY2FsLm9mZnNldEhlaWdodCt0b0VsZW0ub2Zmc2V0SGVpZ2h0K1wicHhcIjtcclxuICAgICAgICAgICAgLy93YWl0IGZvciBhIHN0ZXBcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb25IYWxmKCk7XHJcbiAgICAgICAgICAgIC8vbmV4dCB0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vc2V0IGV2ZXJ5dGhpbmcgaW52aXNpYmxlXHJcbiAgICAgICAgYXdhaXQgdGhpcy50dXJuQXJyb3dFbGVtc0hpZGRlbigpO1xyXG4gICAgICAgIC8vIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJIaWRkZW4oKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcblxyXG5cclxuICAgIH1cclxuICAgIGFzeW5jIHNlYXJjaEVudHJ5SW5TeW1ib2x0YWJsZXBoYXNlVHdvKGZyb21JZDpudW1iZXIsdmFsdWVUb1JldHVybjpzdHJpbmcpe1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkzKCkpIHJldHVybjtcclxuICAgICAgICBsZXQgZnJvbUVsZW09Z2V0SHRtbEVsZW1lbnQoc3ltYm9sYWRkcmVzcysoZnJvbUlkKSk7O1xyXG4gICAgICAgIGxldCB0b0VsZW0gPSBnZXRIdG1sRWxlbWVudChwMkxhYmVsVmFsdWVQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgaWYodG9FbGVtPT1udWxsKXtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGxhY2Vob2xkZXItZGl2IHdhcyBub3QgZm91bmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vc2V0dXAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDNcIix2YWx1ZVRvUmV0dXJuKTtcclxuICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIsdmFsdWVUb1JldHVybik7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBuID11cGRhdGVTY3JvbGxPZlN5bWJvbFRhYmxlKGZyb21FbGVtLmlkKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5sZWZ0PWZyb21FbGVtLm9mZnNldExlZnQrZnJvbUVsZW0ub2Zmc2V0V2lkdGgvMi10aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoLzIrXCJweFwiO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wPWZyb21FbGVtLm9mZnNldFRvcC0obj4wP246MCkrZnJvbUVsZW0ub2Zmc2V0SGVpZ2h0LzItdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnRvcD10b0VsZW0ub2Zmc2V0VG9wLXRoaXMuZGVzY3JpcHRpb25MaW5lRWxlbS5zY3JvbGxUb3ArdG9FbGVtLm9mZnNldEhlaWdodC8yLXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLmxlZnQ9dG9FbGVtLm9mZnNldExlZnQrdG9FbGVtLm9mZnNldFdpZHRoLzItdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFdpZHRoLzIrXCJweFwiO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBpZihhbmlDb250cm9sLmlzQW5pMSgpKXtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdDx0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0TGVmdCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKDAsdGhpcy5nZXRQaXhlbGp1bXAoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K1wicHhcIjtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wPnRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlU2xlZXBDaGVjaygtdGhpcy5nZXRQaXhlbGp1bXAoKSwwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK1wicHhcIjtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBsZXQgYXJyb3dIZWFkID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dIZWFkSUQpO1xyXG4gICAgICAgICAgICBsZXQgYXJyb3dIb3Jpem9udGFsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dIb3Jpem9udGFsSUQpO1xyXG4gICAgICAgICAgICBsZXQgYXJyb3dKb2ludCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93Sm9pbnRJRCk7XHJcbiAgICAgICAgICAgIGxldCBhcnJvd1ZlcnRpY2FsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dWZXJ0aWNhbElEKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3NPZkhlYWQoVVApO1xyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZKb2ludCgxLEpRNCk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVG9VcCh0cnVlKTtcclxuICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLnRvcD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUubGVmdD0gdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFdpZHRoLzItYXJyb3dIZWFkLm9mZnNldFdpZHRoLzIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS50b3A9IGFycm93SGVhZC5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC1hcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0ID0gYXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS50b3AgPSB0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS5sZWZ0ID0gdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0pvaW50LnN0eWxlLnRvcCA9IGFycm93SG9yaXpvbnRhbC5vZmZzZXRUb3ArXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0pvaW50LnN0eWxlLmxlZnQgPSBhcnJvd1ZlcnRpY2FsLm9mZnNldExlZnQrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLndpZHRoPS10aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQrYXJyb3dKb2ludC5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmhlaWdodD0tYXJyb3dIZWFkLm9mZnNldFRvcCthcnJvd0pvaW50Lm9mZnNldFRvcCthcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRCxhcnJvd0hvcml6b250YWxJRCxhcnJvd0pvaW50SURdKTtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RhdGljQW5pbWF0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5BcnJvd0VsZW1zSGlkZGVuKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJIaWRkZW4oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHB1c2hBdWZ6dWxvc2VuZGVzdG9DdXJyZW50TGluZShpOm51bWJlcixsaW5lOnN0cmluZyl7XHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5pc0FuaTMoKSkgcmV0dXJuO1xyXG4gICAgICAgIGxldCBjaGlsZGVsZW0gPSBnZXRIdG1sRWxlbWVudChgJHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX1vdXRwdXRQYCk7XHJcblxyXG4gICAgICAgIGxldCBuPSB1cGRhdGVTY3JvbGxPZkluX091dCh0aGlzLm91dFB1dFRleHQuaWQsY2hpbGRlbGVtLmlkKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhuKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNldE1vdmFibGVQYXJhbWV0ZXJzKGNoaWxkZWxlbS5vZmZzZXRUb3Atbix0aGlzLm91dFB1dFRleHQub2Zmc2V0TGVmdCk7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDNcIixsaW5lKTtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3A9dGhpcy5jdXJyZW50TGluZUVsZW0ub2Zmc2V0VG9wK3RoaXMuY3VycmVudExpbmVFbGVtLm9mZnNldEhlaWdodC10aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodDtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1MZWZ0ID0gdGhpcy5jdXJyZW50TGluZUVsZW0ub2Zmc2V0TGVmdDtcclxuICAgICAgICBpZihhbmlDb250cm9sLmlzQW5pMSgpKXtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAgICAgaWYodGhpcy50YXJnZXRFbGVtVG9wPnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIHdoaWxlKHRoaXMudGFyZ2V0RWxlbVRvcD50aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlU2xlZXBDaGVjayh0aGlzLmdldFBpeGVsanVtcCgpLDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMudGFyZ2V0RWxlbVRvcD09dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSh0aGlzLnRhcmdldEVsZW1Ub3A8dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2soLXRoaXMuZ2V0UGl4ZWxqdW1wKCksMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICB3aGlsZSh0aGlzLnRhcmdldEVsZW1MZWZ0PHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKDAsLXRoaXMuZ2V0UGl4ZWxqdW1wKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUubGVmdD10aGlzLnRhcmdldEVsZW1MZWZ0K1wicHhcIjtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIsbGluZSk7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS5sZWZ0PXRoaXMudGFyZ2V0RWxlbUxlZnQrXCJweFwiO1xyXG4gICAgICAgIGxldCBhcnJvd0hlYWQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0hlYWRJRCk7XHJcbiAgICAgICAgbGV0IGFycm93SG9yaXpvbnRhbCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SG9yaXpvbnRhbElEKTtcclxuICAgICAgICBsZXQgYXJyb3dKb2ludCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93Sm9pbnRJRCk7XHJcbiAgICAgICAgbGV0IGFycm93VmVydGljYWwgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd1ZlcnRpY2FsSUQpO1xyXG5cclxuICAgICAgICB0aGlzLnNldENsYXNzT2ZIZWFkKExFRlQpO1xyXG4gICAgICAgIHRoaXMuc2V0Q2xhc3NPZkpvaW50KDEsSlExKTtcclxuICAgICAgICB0aGlzLnRvZ2dsZVRvVXAoZmFsc2UpO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodC8yLWFycm93SGVhZC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgYXJyb3dIZWFkLnN0eWxlLmxlZnQ9dGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFdpZHRoK1wicHhcIjtcclxuXHJcbiAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLnRvcD1hcnJvd0hlYWQub2Zmc2V0VG9wK2Fycm93SGVhZC5vZmZzZXRIZWlnaHQvMi1hcnJvd0hvcml6b250YWwub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG4gICAgICAgIGlmKHRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3ArMip0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0SGVpZ2h0PnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wIFxyXG4gICAgICAgICAgICAmJiB0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQvMjx0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJyb3dIb3Jpem9udGFsMiA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SG9yaXpvbnRhbElEMik7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJyb3dKb2ludDIgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZKb2ludCgyLEpRMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLndpZHRoPWFycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcithcnJvd0hlYWQub2Zmc2V0V2lkdGgrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUubGVmdD1hcnJvd0hlYWQub2Zmc2V0TGVmdC1hcnJvd0hlYWQub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrYXJyb3dIZWFkLm9mZnNldFdpZHRoK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwyLnN0eWxlLnRvcD10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbDIub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUudG9wPSBhcnJvd0hvcml6b250YWwub2Zmc2V0VG9wK1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUubGVmdD1hcnJvd0hvcml6b250YWwub2Zmc2V0TGVmdCthcnJvd0hvcml6b250YWwub2Zmc2V0V2lkdGgtYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0PWFycm93Sm9pbnQub2Zmc2V0TGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQyLnN0eWxlLmxlZnQgPSBhcnJvd0pvaW50Lm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludDIuc3R5bGUudG9wID0gYXJyb3dIb3Jpem9udGFsMi5vZmZzZXRUb3ArXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0ID0gYXJyb3dKb2ludDIub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQyLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcCA9IGFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0LWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwyLnN0eWxlLmxlZnQ9IGFycm93Sm9pbnQyLm9mZnNldExlZnQrYXJyb3dKb2ludDIub2Zmc2V0V2lkdGgtYXJyb3dKb2ludDIub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbDIuc3R5bGUud2lkdGggPSAtYXJyb3dKb2ludDIub2Zmc2V0TGVmdC1hcnJvd0pvaW50Mi5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlclxyXG4gICAgICAgICAgICAgICAgICAgICt0aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQtYXJyb3dKb2ludDIub2Zmc2V0V2lkdGgrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dXJuQXJyb3dFbGVtVmlzaWJsZShbYXJyb3dIZWFkSUQsYXJyb3dWZXJ0aWNhbElELGFycm93Sm9pbnRJRCxhcnJvd0hvcml6b250YWxJRCxhcnJvd0hvcml6b250YWxJRDIsYXJyb3dKb2ludElEMl0pO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJIaWRkZW4oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICBcclxuICAgICAgICBhcnJvd0pvaW50LnN0eWxlLnRvcD1hcnJvd0hvcml6b250YWwub2Zmc2V0VG9wK1wicHhcIjtcclxuICAgICAgICBhcnJvd0pvaW50LnN0eWxlLmxlZnQ9YXJyb3dWZXJ0aWNhbC5vZmZzZXRMZWZ0K1wicHhcIjtcclxuICAgICAgICBcclxuICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUud2lkdGg9YXJyb3dIZWFkLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXItYXJyb3dIZWFkLm9mZnNldExlZnQtYXJyb3dIZWFkLm9mZnNldFdpZHRoK2Fycm93Sm9pbnQub2Zmc2V0TGVmdCtcInB4XCI7XHJcbiAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLmxlZnQ9YXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLWFycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQ9YXJyb3dKb2ludC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3AtYXJyb3dKb2ludC5vZmZzZXRUb3ArXCJweFwiO1xyXG5cclxuICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcD1hcnJvd0pvaW50Lm9mZnNldFRvcCthcnJvd0pvaW50Lm9mZnNldEhlaWdodC1hcnJvd0pvaW50Lm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG5cclxuICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRCxhcnJvd0pvaW50SUQsYXJyb3dIb3Jpem9udGFsSURdKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpO1xyXG4gICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnR1cm5BcnJvd0VsZW1zSGlkZGVuKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuXHJcbiAgICB9XHJcbiAgICBhc3luYyBhbmltYXRpb25JbnB1dExpbmVUb0N1cnJlbnRMaW5lKGlkOm51bWJlcixsaW5lOnN0cmluZyl7XHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5pc0FuaTMoKSl7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDNcIixsaW5lKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGFydFRvcFRvSW5wdXRMaW5lKGlkKTtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3A9IHRoaXMuY3VycmVudExpbmVFbGVtLm9mZnNldFRvcCt0aGlzLmN1cnJlbnRMaW5lRWxlbS5vZmZzZXRIZWlnaHQtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtTGVmdCA9IHRoaXMuY3VycmVudExpbmVFbGVtLm9mZnNldExlZnQ7XHJcbiAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICBpZihhbmlDb250cm9sLmlzQW5pMSgpKXtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICBpZih0aGlzLnRhcmdldEVsZW1Ub3A+dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgd2hpbGUodGhpcy50YXJnZXRFbGVtVG9wPnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKHRoaXMuZ2V0UGl4ZWxqdW1wKCksMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYodGhpcy50YXJnZXRFbGVtVG9wPT10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHdoaWxlKHRoaXMudGFyZ2V0RWxlbVRvcDx0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlU2xlZXBDaGVjaygtdGhpcy5nZXRQaXhlbGp1bXAoKSwwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wPXRoaXMudGFyZ2V0RWxlbVRvcCtcInB4XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKHRoaXMudGFyZ2V0RWxlbUxlZnQ+dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRMZWZ0KXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2soMCx0aGlzLmdldFBpeGVsanVtcCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmxlZnQ9dGhpcy50YXJnZXRFbGVtTGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLmlubmVySFRNTD10aGlzLmZvcm1hdExpbmVTdHJpbmcoXCJoM1wiLGxpbmUpO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUubGVmdD10aGlzLnRhcmdldEVsZW1MZWZ0K1wicHhcIjtcclxuICAgICAgICBsZXQgYXJyb3dIZWFkID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dIZWFkSUQpO1xyXG4gICAgICAgIGxldCBhcnJvd0hvcml6b250YWwgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0hvcml6b250YWxJRCk7XHJcbiAgICAgICAgbGV0IGFycm93Sm9pbnQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQpO1xyXG4gICAgICAgIGxldCBhcnJvd1ZlcnRpY2FsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dWZXJ0aWNhbElEKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRDbGFzc09mSGVhZChSSUdIVCk7XHJcbiAgICAgICAgdGhpcy5zZXRDbGFzc09mSm9pbnQoMSxKUTIpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlVG9VcChmYWxzZSk7XHJcbiAgICAgICAgYXJyb3dIZWFkLnN0eWxlLnRvcD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQvMi1hcnJvd0hlYWQub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG4gICAgICAgIGFycm93SGVhZC5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0LWFycm93SGVhZC5vZmZzZXRXaWR0aCtcInB4XCI7XHJcblxyXG5cclxuICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUudG9wPWFycm93SGVhZC5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgaWYodGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFRvcCsyKnRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQ+dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3AgXHJcbiAgICAgICAgICAgICYmIHRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodC8yPHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIGxldCBhcnJvd0hvcml6b250YWwyID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dIb3Jpem9udGFsSUQyKTtcclxuICAgICAgICAgICAgICAgIGxldCBhcnJvd0pvaW50MiA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93Sm9pbnRJRDIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3NPZkpvaW50KDIsSlE0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUud2lkdGg9YXJyb3dIZWFkLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK2Fycm93SGVhZC5vZmZzZXRXaWR0aCthcnJvd0pvaW50Lm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS5sZWZ0PWFycm93SGVhZC5vZmZzZXRMZWZ0K2Fycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlci1hcnJvd0hvcml6b250YWwub2Zmc2V0V2lkdGgrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbDIuc3R5bGUudG9wPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0LzItYXJyb3dIb3Jpem9udGFsMi5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS50b3A9IGFycm93SG9yaXpvbnRhbC5vZmZzZXRUb3ArXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS5sZWZ0PWFycm93SG9yaXpvbnRhbC5vZmZzZXRMZWZ0LWFycm93Sm9pbnQub2Zmc2V0V2lkdGgrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0PWFycm93Sm9pbnQub2Zmc2V0TGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQyLnN0eWxlLmxlZnQgPSBhcnJvd0pvaW50Lm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludDIuc3R5bGUudG9wID0gYXJyb3dIb3Jpem9udGFsMi5vZmZzZXRUb3ArXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0ID0gYXJyb3dKb2ludDIub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQyLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcCA9IGFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0LWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwyLnN0eWxlLmxlZnQ9IHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbDIuc3R5bGUud2lkdGggPSBhcnJvd0pvaW50Mi5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQyLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dXJuQXJyb3dFbGVtVmlzaWJsZShbYXJyb3dIZWFkSUQsYXJyb3dWZXJ0aWNhbElELGFycm93Sm9pbnRJRCxhcnJvd0hvcml6b250YWxJRCxhcnJvd0hvcml6b250YWxJRDIsYXJyb3dKb2ludElEMl0pO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJIaWRkZW4oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFycm93VmVydGljYWwuc3R5bGUubGVmdD10aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC8yLWFycm93VmVydGljYWwub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXJyb3dKb2ludC5zdHlsZS50b3A9YXJyb3dIb3Jpem9udGFsLm9mZnNldFRvcCtcInB4XCI7XHJcbiAgICAgICAgYXJyb3dKb2ludC5zdHlsZS5sZWZ0PWFycm93VmVydGljYWwub2Zmc2V0TGVmdCtcInB4XCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLndpZHRoPWFycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcithcnJvd0pvaW50Lm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK2Fycm93SGVhZC5vZmZzZXRMZWZ0LWFycm93Sm9pbnQub2Zmc2V0TGVmdC1hcnJvd0pvaW50Lm9mZnNldFdpZHRoK1wicHhcIjtcclxuICAgICAgICBcclxuICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUubGVmdD1hcnJvd0pvaW50Lm9mZnNldExlZnQrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC1hcnJvd0pvaW50Lm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICBcclxuICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmhlaWdodD1hcnJvd0pvaW50Lm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcit0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcit0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcC1hcnJvd0pvaW50Lm9mZnNldFRvcC1hcnJvd0pvaW50Lm9mZnNldEhlaWdodCtcInB4XCI7XHJcblxyXG4gICAgICAgIGFycm93VmVydGljYWwuc3R5bGUudG9wPWFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0LWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuXHJcblxyXG4gICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgdGhpcy50dXJuQXJyb3dFbGVtVmlzaWJsZShbYXJyb3dIZWFkSUQsYXJyb3dWZXJ0aWNhbElELGFycm93Sm9pbnRJRCxhcnJvd0hvcml6b250YWxJRF0pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJWaXNpYmxlKCk7XHJcbiAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnR1cm5BcnJvd0VsZW1zSGlkZGVuKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBtb3ZlRGV0YWlsVG9TcGVpY2hlcmFiYmlsZChsaW5lOnN0cmluZyxpZDpudW1iZXIpe1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkzKCkpIHJldHVybjtcclxuICAgICAgICB0aGlzLnNldE1vdmFibGVQYXJhbWV0ZXJzKHRoaXMuYWRkcmVzc3phZWhsZXJFbGVtLm9mZnNldFRvcCx0aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0TGVmdCk7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDNcIixsaW5lKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNldFRhcmdldFRvcFRvU3BlaWNoZXJhYmJpbGQoaWQpOyAgICAgICBcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1MZWZ0PXRoaXMub3V0UHV0VGV4dC5vZmZzZXRMZWZ0O1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkxKCkpe1xyXG5cclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIC8vIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICB3aGlsZSh0aGlzLnRhcmdldEVsZW1MZWZ0PnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKDAsdGhpcy5nZXRQaXhlbGp1bXAoKSk7XHJcbiAgICAgICAgICAgICAgICAvLyBhd2FpdCB0aGlzLmFkanVzdFdpZHRoT2ZNb3ZhYmxlKHRoaXMuZ2V0UGl4ZWxqdW1wKCksdGhpcy5vdXRQdXRUZXh0Lm9mZnNldFdpZHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmxlZnQ9dGhpcy50YXJnZXRFbGVtTGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubW92YWJsZUVsZW0uc3R5bGUud2lkdGg9dGhpcy5vdXRQdXRUZXh0Lm9mZnNldFdpZHRoK1wicHhcIjtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudGFyZ2V0RWxlbVRvcD50aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSh0aGlzLnRhcmdldEVsZW1Ub3A+dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2sodGhpcy5nZXRQaXhlbGp1bXAoKSwwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wPXRoaXMudGFyZ2V0RWxlbVRvcCtcInB4XCI7XHJcbiAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMudGFyZ2V0RWxlbVRvcD09dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSh0aGlzLnRhcmdldEVsZW1Ub3A8dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2soLXRoaXMuZ2V0UGl4ZWxqdW1wKCksMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuaW5uZXJIVE1MPXRoaXMuZm9ybWF0TGluZVN0cmluZyhcImgzXCIsbGluZSk7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnRvcD10aGlzLnRhcmdldEVsZW1Ub3ArXCJweFwiO1xyXG4gICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS5sZWZ0PXRoaXMudGFyZ2V0RWxlbUxlZnQrXCJweFwiO1xyXG5cclxuICAgICAgICBsZXQgYXJyb3dIZWFkID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dIZWFkSUQpO1xyXG4gICAgICAgIGxldCBhcnJvd0hvcml6b250YWwgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0hvcml6b250YWxJRCk7XHJcbiAgICAgICAgbGV0IGFycm93Sm9pbnQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQpO1xyXG4gICAgICAgIGxldCBhcnJvd1ZlcnRpY2FsID0gdGhpcy5nZXRBcnJvd0VsZW0oYXJyb3dWZXJ0aWNhbElEKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFRvcCt0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0SGVpZ2h0KjI8dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZIZWFkKFVQKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSm9pbnQoMSxKUTQpO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVRvVXAodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS5sZWZ0PXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aC8yLWFycm93SGVhZC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUubGVmdD1hcnJvd0hlYWQub2Zmc2V0TGVmdCthcnJvd0hlYWQub2Zmc2V0V2lkdGgvMi1hcnJvd1ZlcnRpY2FsLm9mZnNldFdpZHRoLzIrXCJweFwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLnRvcD10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhcnJvd0pvaW50LnN0eWxlLnRvcD1hcnJvd0hvcml6b250YWwub2Zmc2V0VG9wK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS5sZWZ0PWFycm93VmVydGljYWwub2Zmc2V0TGVmdCtcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUud2lkdGggPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcithcnJvd0pvaW50Lm9mZnNldExlZnQtdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRMZWZ0LXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUubGVmdCAgPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQgID1hcnJvd0pvaW50Lm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcithcnJvd0pvaW50Lm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlci1hcnJvd0hlYWQub2Zmc2V0VG9wLWFycm93SGVhZC5vZmZzZXRIZWlnaHQrYXJyb3dKb2ludC5vZmZzZXRUb3ArXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcCAgICAgPWFycm93SGVhZC5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC1hcnJvd0hlYWQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wKzIqdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodD50aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCBcclxuICAgICAgICAgICAgJiYgdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFRvcCt0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0SGVpZ2h0LzQ8PXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSm9pbnQoMSxKUTIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSGVhZChSSUdIVCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRvVXAoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLnRvcD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQvMi1hcnJvd0hlYWQub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLmxlZnQ9dGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQtYXJyb3dIZWFkLm9mZnNldFdpZHRoK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUudG9wPWFycm93SGVhZC5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJyb3dIb3Jpem9udGFsMiA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SG9yaXpvbnRhbElEMik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnJvd0hvcml6b250YWwyKTtcclxuICAgICAgICAgICAgICAgIGxldCBhcnJvd0pvaW50MiA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93Sm9pbnRJRDIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3NPZkpvaW50KDIsSlE0KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFycm93Sm9pbnQyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUud2lkdGg9YXJyb3dIZWFkLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK2Fycm93SGVhZC5vZmZzZXRXaWR0aCthcnJvd0pvaW50Lm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS5sZWZ0PWFycm93SGVhZC5vZmZzZXRMZWZ0K2Fycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlci1hcnJvd0hvcml6b250YWwub2Zmc2V0V2lkdGgrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbDIuc3R5bGUudG9wPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0LzItYXJyb3dIb3Jpem9udGFsMi5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS50b3A9IGFycm93SG9yaXpvbnRhbC5vZmZzZXRUb3ArXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS5sZWZ0PWFycm93SG9yaXpvbnRhbC5vZmZzZXRMZWZ0LWFycm93Sm9pbnQub2Zmc2V0V2lkdGgrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5sZWZ0PWFycm93Sm9pbnQub2Zmc2V0TGVmdCtcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQyLnN0eWxlLmxlZnQgPSBhcnJvd0pvaW50Lm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dKb2ludDIuc3R5bGUudG9wID0gYXJyb3dIb3Jpem9udGFsMi5vZmZzZXRUb3ArXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0ID0gYXJyb3dKb2ludDIub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0VG9wLWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQyLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcCA9IGFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0LWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwyLnN0eWxlLmxlZnQ9IHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbDIuc3R5bGUud2lkdGggPSBhcnJvd0pvaW50Mi5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQyLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1cm5BcnJvd0VsZW1WaXNpYmxlKFthcnJvd0hlYWRJRCxhcnJvd1ZlcnRpY2FsSUQsYXJyb3dKb2ludElELGFycm93SG9yaXpvbnRhbElELGFycm93SG9yaXpvbnRhbElEMixhcnJvd0pvaW50SUQyXSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICAgICBhd2FpdCBzbGVlcFN0YXRpY0FuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuQXJyb3dFbGVtc0hpZGRlbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFRvcCt0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0SGVpZ2h0LzQ+PXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wIFxyXG4gICAgICAgICAgICAmJiB0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wPD10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZIZWFkKFJJR0hUKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlVG9VcChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUudG9wPXRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodC8yLWFycm93SGVhZC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUubGVmdD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0TGVmdC1hcnJvd0hlYWQub2Zmc2V0V2lkdGgrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS50b3A9YXJyb3dIZWFkLm9mZnNldFRvcCthcnJvd0hlYWQub2Zmc2V0SGVpZ2h0LzItYXJyb3dIb3Jpem9udGFsLm9mZnNldEhlaWdodC8yK1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS53aWR0aCA9IGFycm93SGVhZC5vZmZzZXRMZWZ0LXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgK2Fycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcit0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS5sZWZ0ID0gYXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyLWFycm93SG9yaXpvbnRhbC5vZmZzZXRXaWR0aCtcInB4XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93SG9yaXpvbnRhbElEXSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICAgICBhd2FpdCBzbGVlcFN0YXRpY0FuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuQXJyb3dFbGVtc0hpZGRlbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlckhpZGRlbigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wLTIqdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldEhlaWdodDx0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCBcclxuICAgICAgICAgICAgJiYgdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFRvcCt0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0SGVpZ2h0LzQ+dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3Ape1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDbGFzc09mSGVhZChSSUdIVCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZKb2ludCgxLEpRMyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRvVXAoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLnRvcD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRIZWlnaHQvMi1hcnJvd0hlYWQub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLmxlZnQ9dGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQtYXJyb3dIZWFkLm9mZnNldFdpZHRoK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUudG9wPWFycm93SGVhZC5vZmZzZXRUb3ArYXJyb3dIZWFkLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbC5vZmZzZXRIZWlnaHQvMitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJyb3dIb3Jpem9udGFsMiA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SG9yaXpvbnRhbElEMik7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJyb3dKb2ludDIgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZKb2ludCgyLEpRMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLndpZHRoPWFycm93SGVhZC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcithcnJvd0hlYWQub2Zmc2V0V2lkdGgrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUubGVmdD1hcnJvd0hlYWQub2Zmc2V0TGVmdCthcnJvd0hlYWQub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXItYXJyb3dIb3Jpem9udGFsLm9mZnNldFdpZHRoK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwyLnN0eWxlLnRvcD10aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbDIub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUudG9wPSBhcnJvd0hvcml6b250YWwub2Zmc2V0VG9wK1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUubGVmdD1hcnJvd0hvcml6b250YWwub2Zmc2V0TGVmdC1hcnJvd0pvaW50Lm9mZnNldFdpZHRoK2Fycm93Sm9pbnQub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUubGVmdD1hcnJvd0pvaW50Lm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhcnJvd0pvaW50Mi5zdHlsZS5sZWZ0ID0gYXJyb3dKb2ludC5vZmZzZXRMZWZ0K1wicHhcIjtcclxuICAgICAgICAgICAgICAgIGFycm93Sm9pbnQyLnN0eWxlLnRvcCA9IGFycm93SG9yaXpvbnRhbDIub2Zmc2V0VG9wK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmhlaWdodCA9IC1hcnJvd0pvaW50Mi5vZmZzZXRUb3ArYXJyb3dKb2ludC5vZmZzZXRUb3AtYXJyb3dKb2ludDIub2Zmc2V0SGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93Sm9pbnQyLm9mZnNldEhlaWdodC9vdmVybGFwZGl2aWRlcitcInB4XCI7XHJcbiAgICAgICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcCA9IGFycm93Sm9pbnQyLm9mZnNldFRvcCthcnJvd0pvaW50Mi5vZmZzZXRIZWlnaHQtYXJyb3dKb2ludDIub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBhcnJvd0hvcml6b250YWwyLnN0eWxlLmxlZnQ9IHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbDIuc3R5bGUud2lkdGggPSBhcnJvd0pvaW50Mi5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQyLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRCxhcnJvd0pvaW50SUQsYXJyb3dIb3Jpem9udGFsSUQsYXJyb3dIb3Jpem9udGFsSUQyLGFycm93Sm9pbnRJRDJdKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RhdGljQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5BcnJvd0VsZW1zSGlkZGVuKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVySGlkZGVuKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3NPZkhlYWQoRE9XTik7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xhc3NPZkpvaW50KDEsSlExKTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVUb1VwKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgYXJyb3dIZWFkLnN0eWxlLnRvcD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wLWFycm93SGVhZC5vZmZzZXRIZWlnaHQrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUubGVmdD10aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0V2lkdGgvMi1hcnJvd0hlYWQub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLmxlZnQ9YXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS50b3A9dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRUb3ArdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQvMi1hcnJvd0hvcml6b250YWwub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS50b3A9YXJyb3dIb3Jpem9udGFsLm9mZnNldFRvcCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93Sm9pbnQuc3R5bGUubGVmdD1hcnJvd1ZlcnRpY2FsLm9mZnNldExlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXJyb3dIb3Jpem9udGFsLnN0eWxlLndpZHRoPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvb3ZlcmxhcGRpdmlkZXIrYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlci10aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQrYXJyb3dKb2ludC5vZmZzZXRMZWZ0LXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUubGVmdD10aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC10aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUuaGVpZ2h0PWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93SGVhZC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrYXJyb3dIZWFkLm9mZnNldFRvcC1hcnJvd0pvaW50Lm9mZnNldFRvcC1hcnJvd0pvaW50Lm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUudG9wPWFycm93Sm9pbnQub2Zmc2V0VG9wK2Fycm93Sm9pbnQub2Zmc2V0SGVpZ2h0LWFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK1wicHhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgdGhpcy50dXJuQXJyb3dFbGVtVmlzaWJsZShbYXJyb3dIZWFkSUQsYXJyb3dWZXJ0aWNhbElELGFycm93Sm9pbnRJRCxhcnJvd0hvcml6b250YWxJRF0pO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVIZWxwZXJWaXNpYmxlKCk7XHJcbiAgICAgICBhd2FpdCBzbGVlcFN0YXRpY0FuaW1hdGlvbigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudHVybkFycm93RWxlbXNIaWRkZW4oKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVySGlkZGVuKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhpZGRlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGRpc3BsYXlBZGRyZXNzZXJob2VodW5nKGlkOm51bWJlcixpOnN0cmluZyxwcmU6c3RyaW5nLGhleDpzdHJpbmcpe1xyXG4gICAgICAgIGlmKGFuaUNvbnRyb2wuaXNBbmkzKCkpIHJldHVybjtcclxuICAgICAgICBjb25zb2xlLmxvZyhhZGRyZXNzYnl0ZStpZCk7XHJcbiAgICAgICAgbGV0IHRhcmdldGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhZGRyZXNzYnl0ZStpZCk7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDFcIixwcmUraSk7XHJcbiAgICAgICAgbGV0IGVuZGFkZHI6c3RyaW5nID0gXHJcbiAgICAgICAgICAgIE1hbmlwdWxhdG9yLmlzSGV4KGkpXHJcbiAgICAgICAgICAgID8gTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihTdHJpbmcoTWFuaXB1bGF0b3IuaGV4VG9EZWMoaGV4KS1NYW5pcHVsYXRvci5oZXhUb0RlYyhpKSkpXHJcbiAgICAgICAgICAgIDogTWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihTdHJpbmcoTWFuaXB1bGF0b3IuaGV4VG9EZWMoaGV4KS1OdW1iZXIoaSkpKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAvLyBsZXQgZW5kYWRkcjpzdHJpbmcgPSBTdHJpbmcoTWFuaXB1bGF0b3IuaGV4VG9EZWMoaGV4KS1pKTsgLy8gRGVjT3JIZXhcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhlbmRhZGRyKTtcclxuICAgICAgICBpZih0YXJnZXRlbGVtICE9IG51bGwpe1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD0gdGFyZ2V0ZWxlbS5vZmZzZXRUb3AtdGhpcy5kZXNjcmlwdGlvbkxpbmVFbGVtLnNjcm9sbFRvcCt0YXJnZXRlbGVtLm9mZnNldEhlaWdodC8yLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0LzIrXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmxlZnQ9IHRhcmdldGVsZW0ub2Zmc2V0TGVmdCt0YXJnZXRlbGVtLm9mZnNldFdpZHRoLzItdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC8yK1wicHhcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlbGVtIG5vdCBmb3VuZFwiKVxyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD0gdGhpcy5kZXNjcmlwdGlvblRhYmxlQm94Lm9mZnNldFRvcCt0aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0SGVpZ2h0LXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0K1wicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5sZWZ0PSB0aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0TGVmdCt0aGlzLmRlc2NyaXB0aW9uVGFibGVCb3gub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbUxlZnQ9dGhpcy5hZGRyZXNzemFlaGxlckVsZW0ub2Zmc2V0TGVmdCt0aGlzLmFkZHJlc3N6YWVobGVyRWxlbS5vZmZzZXRXaWR0aDtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3AgPXRoaXMudHJhbnNsYXRlZGluZm9EaXZpZGVyRGl2Lm9mZnNldFRvcDtcclxuXHJcbiAgICAgICAgaWYoYW5pQ29udHJvbC5pc0FuaTEoKSl7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDFcIixlbmRhZGRyKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLmxlZnQgPSB0aGlzLmFkZHJlc3N6YWVobGVyRWxlbS5vZmZzZXRMZWZ0K3RoaXMuYWRkcmVzc3phZWhsZXJFbGVtLm9mZnNldFdpZHRoLzItdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFdpZHRoLzIrXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUudG9wID0gdGhpcy50cmFuc2xhdGVkaW5mb0RpdmlkZXJEaXYub2Zmc2V0VG9wK1wicHhcIjtcclxuICAgICAgICAgICAgdGhpcy50dXJuTW92YWJsZVZpc2libGUoKTtcclxuICAgIFxyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgIFxyXG4gICAgICAgICAgICB3aGlsZSh0aGlzLm1vdmFibGVFbGVtLm9mZnNldExlZnQ+dGhpcy50YXJnZXRFbGVtTGVmdCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKDAsLXRoaXMuZ2V0UGl4ZWxqdW1wKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHdoaWxlKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wPHRoaXMudGFyZ2V0RWxlbVRvcCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKHRoaXMuZ2V0UGl4ZWxqdW1wKCksMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS50b3A9dGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIZWxwZXJWaXNpYmxlKCk7XHJcbiAgICBcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgd2hpbGUodGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGg+dGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFdpZHRoKXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZVNsZWVwQ2hlY2soMCwtdGhpcy5nZXRQaXhlbGp1bXAoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUhlbHBlci5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDFcIixNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KGhleCkpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR1cm5Nb3ZhYmxlSGVscGVySGlkZGVuKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgbGV0IGFycm93SGVhZCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SGVhZElEKTtcclxuICAgICAgICAgICAgbGV0IGFycm93SG9yaXpvbnRhbCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93SG9yaXpvbnRhbElEKTtcclxuICAgICAgICAgICAgbGV0IGFycm93Sm9pbnQgPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQpO1xyXG4gICAgICAgICAgICBsZXQgYXJyb3dWZXJ0aWNhbCA9IHRoaXMuZ2V0QXJyb3dFbGVtKGFycm93VmVydGljYWxJRCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZIZWFkKERPV04pO1xyXG4gICAgICAgICAgICB0aGlzLnNldENsYXNzT2ZKb2ludCgxLEpRMik7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVG9VcCh0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLmlubmVySFRNTD10aGlzLmZvcm1hdExpbmVTdHJpbmcoXCJoMVwiLFwiK1wiK2kpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUubGVmdCA9IHRoaXMudGFyZ2V0RWxlbUxlZnQrXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUudG9wID0gdGhpcy50YXJnZXRFbGVtVG9wK1wicHhcIjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFycm93SGVhZC5zdHlsZS50b3A9KHRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3AtYXJyb3dIZWFkLm9mZnNldEhlaWdodCkrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hlYWQuc3R5bGUubGVmdD0odGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldExlZnQrdGhpcy5tb3ZhYmxlSGVscGVyLm9mZnNldFdpZHRoLzItYXJyb3dIZWFkLm9mZnNldFdpZHRoLzIpK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGFycm93VmVydGljYWwuc3R5bGUubGVmdD0oYXJyb3dIZWFkLm9mZnNldExlZnQrYXJyb3dIZWFkLm9mZnNldFdpZHRoLzItYXJyb3dWZXJ0aWNhbC5vZmZzZXRXaWR0aC8yKStcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUudG9wPSh0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodC8yLWFycm93SG9yaXpvbnRhbC5vZmZzZXRIZWlnaHQvMikrXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS50b3A9KGFycm93SG9yaXpvbnRhbC5vZmZzZXRUb3ApK1wicHhcIjtcclxuICAgICAgICAgICAgYXJyb3dKb2ludC5zdHlsZS5sZWZ0PShhcnJvd1ZlcnRpY2FsLm9mZnNldExlZnQpK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGFycm93SG9yaXpvbnRhbC5zdHlsZS53aWR0aD0odGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcithcnJvd0pvaW50Lm9mZnNldFdpZHRoL292ZXJsYXBkaXZpZGVyK3RoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdC1hcnJvd0pvaW50Lm9mZnNldExlZnQtYXJyb3dKb2ludC5vZmZzZXRXaWR0aCkrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd0hvcml6b250YWwuc3R5bGUubGVmdD0oYXJyb3dKb2ludC5vZmZzZXRMZWZ0K2Fycm93Sm9pbnQub2Zmc2V0V2lkdGgtYXJyb3dKb2ludC5vZmZzZXRXaWR0aC9vdmVybGFwZGl2aWRlcikrXCJweFwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXJyb3dWZXJ0aWNhbC5zdHlsZS5oZWlnaHQ9KGFycm93Sm9pbnQub2Zmc2V0SGVpZ2h0L292ZXJsYXBkaXZpZGVyK2Fycm93SGVhZC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIrYXJyb3dIZWFkLm9mZnNldFRvcC1hcnJvd0pvaW50Lm9mZnNldFRvcCkrXCJweFwiO1xyXG4gICAgICAgICAgICBhcnJvd1ZlcnRpY2FsLnN0eWxlLnRvcD0oYXJyb3dKb2ludC5vZmZzZXRUb3ArYXJyb3dKb2ludC5vZmZzZXRIZWlnaHQtYXJyb3dKb2ludC5vZmZzZXRIZWlnaHQvb3ZlcmxhcGRpdmlkZXIpK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybkFycm93RWxlbVZpc2libGUoW2Fycm93SGVhZElELGFycm93VmVydGljYWxJRCxhcnJvd0pvaW50SUQsYXJyb3dIb3Jpem9udGFsSURdKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuTW92YWJsZUhlbHBlclZpc2libGUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdGF0aWNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy50dXJuQXJyb3dFbGVtc0hpZGRlbigpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnR1cm5Nb3ZhYmxlSGlkZGVuKCk7XHJcblxyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDFcIixlbmRhZGRyKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5sZWZ0ID0gdGhpcy5hZGRyZXNzemFlaGxlckVsZW0ub2Zmc2V0TGVmdCt0aGlzLmFkZHJlc3N6YWVobGVyRWxlbS5vZmZzZXRXaWR0aC8yLXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgvMitcInB4XCI7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wID0gdGhpcy50cmFuc2xhdGVkaW5mb0RpdmlkZXJEaXYub2Zmc2V0VG9wK1wicHhcIjtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudHVybk1vdmFibGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwU3RvcFN0YXJ0VGltZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCt0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoPnRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0K3RoaXMubW92YWJsZUhlbHBlci5vZmZzZXRXaWR0aCl7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmVTbGVlcENoZWNrKDAsLXRoaXMuZ2V0UGl4ZWxqdW1wKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIZWxwZXJIaWRkZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5pbm5lckhUTUw9dGhpcy5mb3JtYXRMaW5lU3RyaW5nKFwiaDFcIixNYW5pcHVsYXRvci5mb3JtYXRIZXh0b0RhdDE2KGhleCkpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcFN0b3BTdGFydFRpbWUoKTtcclxuICAgICAgICAgICAgYXdhaXQgc2xlZXBTdG9wU3RhcnRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHVybk1vdmFibGVIaWRkZW4oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIG1vdmVTbGVlcENoZWNrKHQ6bnVtYmVyLGw6bnVtYmVyKXtcclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZU1vdmluZ0VsZW1lbnQodCxsKTtcclxuICAgICAgICBhd2FpdCBzbGVlcEZvckZyYW1lKCk7XHJcbiAgICAgICAgYXdhaXQgY2hlY2tJZlBhdXNlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgbW92ZUhlbHBlclNsZWVwQ2hlY2sodDpudW1iZXIsbDpudW1iZXIpe1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlTW92aW5nSGVscGVyRWxlbWVudCh0LGwpO1xyXG4gICAgICAgIGF3YWl0IHNsZWVwRm9yRnJhbWUoKTtcclxuICAgICAgICBhd2FpdCBjaGVja0lmUGF1c2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmb3JtYXRMaW5lU3RyaW5nKHRhZzpzdHJpbmcsbGluZTpzdHJpbmcpOnN0cmluZ3tcclxuICAgICAgICBpZihsaW5lLmxlbmd0aD4zMCl7XHJcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZygwLDI1KTtcclxuICAgICAgICAgICAgcmV0dXJuIGA8JHt0YWd9IGNsYXNzPVwibW92ZWFibGVUZXh0XCI+JHtsaW5lfS4uLjwvJHt0YWd9PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgPCR7dGFnfSBjbGFzcz1cIm1vdmVhYmxlVGV4dFwiPiR7bGluZX08LyR7dGFnfT5gO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBnZXRBcnJvd0VsZW0oczpzdHJpbmcpOkhUTUxEaXZFbGVtZW50e1xyXG4gICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5hcnJvd0VsZW1zLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBpZih0aGlzLmFycm93RWxlbXNbaV0uaWQ9PT1zKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFycm93RWxlbXNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXJyb3dCb2R5RWxlbShzKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVUb1VwKGI6Ym9vbGVhbil7XHJcbiAgICAgICAgbGV0IGVsZW0gPSB0aGlzLmdldEFycm93RWxlbShhcnJvd0hlYWRJRCk7XHJcbiAgICAgICAgaWYoYiApe1xyXG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoYXJyb3dVcF9Eb3duQ04pO1xyXG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoYXJyb3dMZWZ0X1JpZ2h0Q04pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoYXJyb3dVcF9Eb3duQ04pO1xyXG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoYXJyb3dMZWZ0X1JpZ2h0Q04pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRNb3ZhYmxlUGFyYW1ldGVycyh0Om51bWJlcixsOm51bWJlcil7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS50b3A9dCtcInB4XCI7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5sZWZ0PWwrXCJweFwiO1xyXG4gICAgICAgIC8vIHRoaXMubW92YWJsZUVsZW0uc3R5bGUuaGVpZ2h0PWgrXCJweFwiO1xyXG4gICAgICAgIC8vIHRoaXMubW92YWJsZUVsZW0uc3R5bGUud2lkdGg9dytcInB4XCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQaXhlbGp1bXAoKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIGFuaUNvbnRyb2wuc3BlZWQrMTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhZGp1c3RXaWR0aE9mTW92YWJsZShuOm51bWJlcix3Om51bWJlcil7XHJcbiAgICAgICAgaWYodGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aCtuPncgJiYgdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRXaWR0aC1uPHcpe1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLndpZHRoPXRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgrXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGg+dyl7XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUud2lkdGg9KHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0V2lkdGgtbikrXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLndpZHRoPSh0aGlzLm1vdmFibGVFbGVtLm9mZnNldFdpZHRoK24pK1wicHhcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWRqdXN0SGVpZ2h0T2ZNb3ZhYmxlKG46bnVtYmVyLGg6bnVtYmVyKXtcclxuICAgICAgICBpZih0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodCtuPmggJiYgdGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQtbjxoKXtcclxuICAgICAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5oZWlnaHQ9dGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQrXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0Pmgpe1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmhlaWdodD0odGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQtbikrXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmhlaWdodD0odGhpcy5tb3ZhYmxlRWxlbS5vZmZzZXRIZWlnaHQrbikrXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZU1vdmFibGU9KCk6SFRNTERpdkVsZW1lbnQ9PntcclxuICAgICAgICBsZXQgbmV3RWxlbTpIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBuZXdFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBuZXdFbGVtLmlkPVwiTW92YWJsZVwiO1xyXG4gICAgICAgIG5ld0VsZW0uc3R5bGUudG9wPWAkezB9YDtcclxuICAgICAgICBuZXdFbGVtLnN0eWxlLmxlZnQ9YCR7MH1gO1xyXG4gICAgICAgIC8vIG5ld0VsZW0uc3R5bGUud2lkdGg9YCR7NTB9cHhgO1xyXG4gICAgICAgIC8vIG5ld0VsZW0uc3R5bGUuaGVpZ2h0PWAkezUwfXB4YDtcclxuICAgICAgICBuZXdFbGVtLmNsYXNzTGlzdC5hZGQoXCJ0ZXN0RWxlbVN0eWxlXCIpO1xyXG4gICAgICAgIG5ld0VsZW0uc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO1xyXG4gICAgICAgIG5ld0VsZW0uc3R5bGUuekluZGV4PVwiM1wiO1xyXG5cclxuICAgICAgICBnZXRIdG1sRWxlbWVudChcImJvZHlcIikuYXBwZW5kQ2hpbGQobmV3RWxlbSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0VsZW07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVNb3ZhYmxlSGVscGVyPSgpOkhUTUxEaXZFbGVtZW50PT57XHJcbiAgICAgICAgbGV0IG5ld0VsZW06SFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgbmV3RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbmV3RWxlbS5pZD1cIk1vdmFibGVIZWxwZXJcIjtcclxuICAgICAgICBuZXdFbGVtLnN0eWxlLnRvcD1gJHswfWA7XHJcbiAgICAgICAgbmV3RWxlbS5zdHlsZS5sZWZ0PWAkezB9YDtcclxuICAgICAgICAvLyBuZXdFbGVtLnN0eWxlLndpZHRoPWAkezUwfXB4YDtcclxuICAgICAgICAvLyBuZXdFbGVtLnN0eWxlLmhlaWdodD1gJHs1MH1weGA7XHJcbiAgICAgICAgbmV3RWxlbS5jbGFzc0xpc3QuYWRkKFwidGVzdEVsZW1TdHlsZVwiKTtcclxuICAgICAgICBuZXdFbGVtLnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIjtcclxuICAgICAgICBuZXdFbGVtLnN0eWxlLnpJbmRleD1cIjNcIjtcclxuXHJcbiAgICAgICAgZ2V0SHRtbEVsZW1lbnQoXCJib2R5XCIpLmFwcGVuZENoaWxkKG5ld0VsZW0pO1xyXG4gICAgICAgIHJldHVybiBuZXdFbGVtO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlQXJyb3dCb2R5RWxlbShzOnN0cmluZyk6SFRNTERpdkVsZW1lbnR7XHJcbiAgICAgICAgbGV0IG5ld0VsZW06SFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgbmV3RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbmV3RWxlbS5pZD1zO1xyXG4gICAgICAgIG5ld0VsZW0uc3R5bGUudG9wPWAkezB9YDtcclxuICAgICAgICBuZXdFbGVtLnN0eWxlLmxlZnQ9YCR7MH1gO1xyXG4gICAgICAgIG5ld0VsZW0uc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO1xyXG4gICAgICAgIG5ld0VsZW0uc3R5bGUuekluZGV4PVwiMlwiO1xyXG4gICAgICAgIHN3aXRjaChzKXtcclxuICAgICAgICAgICAgY2FzZSBhcnJvd0hlYWRJRDpcclxuICAgICAgICAgICAgICAgIG5ld0VsZW0uc3R5bGUuekluZGV4PVwiM1wiO1xyXG4gICAgICAgICAgICAgICAgbmV3RWxlbS5jbGFzc0xpc3QuYWRkKFwiYmdJX0NfQ1wiKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYXJyb3dIb3Jpem9udGFsSUQ6XHJcbiAgICAgICAgICAgIGNhc2UgYXJyb3dIb3Jpem9udGFsSUQyOlxyXG4gICAgICAgICAgICAgICAgbmV3RWxlbS5jbGFzc0xpc3QuYWRkKFwiYmdJX0NfQ1wiLFwiaG9yaXpvbnRhbEJvZHlcIik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGFycm93Sm9pbnRJRDpcclxuICAgICAgICAgICAgY2FzZSBhcnJvd0pvaW50SUQyOlxyXG4gICAgICAgICAgICAgICAgbmV3RWxlbS5jbGFzc0xpc3QuYWRkKFwiYmdJX0NfQ1wiLFwiam9pbnRCb2R5XCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYXJyb3dWZXJ0aWNhbElEOlxyXG4gICAgICAgICAgICAgICAgbmV3RWxlbS5jbGFzc0xpc3QuYWRkKFwiYmdJX0NfQ1wiLFwidmVydGljYWxCb2R5XCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQgXHJcbiAgICAgICAgICAgICAgICA6YWxlcnQoXCJzb21lc2hpdCBnb25lIGRvd25cIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2V0SHRtbEVsZW1lbnQoXCJib2R5XCIpLmFwcGVuZENoaWxkKG5ld0VsZW0pO1xyXG4gICAgICAgIHRoaXMuYXJyb3dFbGVtcy5wdXNoKG5ld0VsZW0pO1xyXG4gICAgICAgIHJldHVybiBuZXdFbGVtO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q2xhc3NPZkhlYWQoczpzdHJpbmcpe1xyXG4gICAgICAgIGxldCBlbGVtID10aGlzLmdldEFycm93RWxlbShhcnJvd0hlYWRJRCk7XHJcbiAgICAgICAgc3dpdGNoKHMpe1xyXG4gICAgICAgICAgICBjYXNlIFVQOlxyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKFwiYXJyb3dVXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiYXJyb3dEXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiYXJyb3dMZWZ0XCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiYXJyb3dSaWdodFwiKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRE9XTjpcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFycm93VVwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcImFycm93RFwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFycm93TGVmdFwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFycm93UmlnaHRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIExFRlQ6XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJhcnJvd1VcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJhcnJvd0RcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoXCJhcnJvd0xlZnRcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJhcnJvd1JpZ2h0XCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBSSUdIVDpcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFycm93VVwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFycm93RFwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImFycm93TGVmdFwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcImFycm93UmlnaHRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldENsYXNzT2ZKb2ludChpZDpudW1iZXIsczpzdHJpbmcpe1xyXG4gICAgICAgIGxldCBlbGVtID1pZD09MT90aGlzLmdldEFycm93RWxlbShhcnJvd0pvaW50SUQpOnRoaXMuZ2V0QXJyb3dFbGVtKGFycm93Sm9pbnRJRDIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaChzKXtcclxuICAgICAgICAgICAgY2FzZSBKUTE6XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoXCJqb2ludFExXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiam9pbnRRMlwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImpvaW50UTNcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJqb2ludFE0XCIpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgSlEyOlxyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiam9pbnRRMVwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChcImpvaW50UTJcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJqb2ludFEzXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiam9pbnRRNFwiKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEpRMzpcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImpvaW50UTFcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJqb2ludFEyXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKFwiam9pbnRRM1wiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImpvaW50UTRcIik7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBKUTQ6XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJqb2ludFExXCIpO1xyXG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiam9pbnRRMlwiKTtcclxuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShcImpvaW50UTNcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoXCJqb2ludFE0XCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBvY2N1cmVkIGF0IEpvaW50U1ZHIGFzc2lnbWVudFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0U3RhcnRUb3BUb0lucHV0TGluZShpZDpudW1iZXIpe1xyXG4gICAgICAgIGxldCBjaGlsZEVsZW09ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7KGlkKzEpPDEwP1wiMFwiKyhpZCsxKTooaWQrMSl9aW5wdXRQYCk7XHJcbiAgICAgICAgaWYoY2hpbGRFbGVtIT1udWxsKXtcclxuICAgICAgICAgICAgbGV0IG49IHVwZGF0ZVNjcm9sbE9mSW5fT3V0KHRoaXMub3V0UHV0VGV4dC5pZCxjaGlsZEVsZW0uaWQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhuKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wID0gY2hpbGRFbGVtLm9mZnNldFRvcC1uLTEvMip0aGlzLm1vdmFibGVFbGVtLm9mZnNldEhlaWdodCsxLzIqY2hpbGRFbGVtLm9mZnNldEhlaWdodCtcInB4XCI7XHJcbiAgICAgICAgICAgIGlmKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0VG9wPHRoaXMuaW5wdXRUZXh0Lm9mZnNldFRvcCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcD10aGlzLmlucHV0VGV4dC5vZmZzZXRUb3ArXCJweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUubGVmdD0gY2hpbGRFbGVtLm9mZnNldExlZnQrXCJweFwiO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFzeW5jIHNldFRhcmdldFRvcFRvU3BlaWNoZXJhYmJpbGQoaWQ6bnVtYmVyKXtcclxuICAgICAgICBsZXQgY2hpbGRFbGVtPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAkeyhpZCsxKTwxMD9cIjBcIisoaWQrMSk6KGlkKzEpfW91dHB1dFBgKTtcclxuICAgICAgICBpZihjaGlsZEVsZW0hPW51bGwpe1xyXG4gICAgICAgICAgICBsZXQgbj0gdXBkYXRlU2Nyb2xsT2ZJbl9PdXQodGhpcy5vdXRQdXRUZXh0LmlkLGNoaWxkRWxlbS5pZCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG4pO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1Ub3AgPSBjaGlsZEVsZW0ub2Zmc2V0VG9wLW4tMS8yKnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0SGVpZ2h0KzEvMipjaGlsZEVsZW0ub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB0dXJuQXJyb3dFbGVtVmlzaWJsZShzOnN0cmluZ1tdKXtcclxuICAgICAgICB0aGlzLmFycm93RWxlbXMuZm9yRWFjaChlPT57XHJcbiAgICAgICAgICAgIGlmKHMuaW5jbHVkZXMoZS5pZCkpe1xyXG4gICAgICAgICAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB0dXJuQXJyb3dFbGVtc0hpZGRlbigpe1xyXG4gICAgICAgIHRoaXMuYXJyb3dFbGVtcy5mb3JFYWNoKGU9PntcclxuICAgICAgICAgICAgaWYoZS5pZD09YXJyb3dIb3Jpem9udGFsSUQgfHwgZS5pZD09YXJyb3dIb3Jpem9udGFsSUQyKXtcclxuICAgICAgICAgICAgICAgIGUuc3R5bGUud2lkdGg9MCtcInB4XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoZS5pZD09YXJyb3dWZXJ0aWNhbElEKXtcclxuICAgICAgICAgICAgICAgIGUuc3R5bGUuaGVpZ2h0PTArXCJweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdHVybk1vdmFibGVIaWRkZW4oKTpQcm9taXNlIDxhbnk+e1xyXG4gICAgICAgIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHR1cm5Nb3ZhYmxlVmlzaWJsZSgpOlByb21pc2UgPGFueT57XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHR1cm5Nb3ZhYmxlSGVscGVySGlkZGVuKCk6UHJvbWlzZSA8YW55PntcclxuICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHR1cm5Nb3ZhYmxlSGVscGVyVmlzaWJsZSgpOlByb21pc2UgPGFueT57XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnZpc2liaWxpdHk9XCJ2aXNpYmxlXCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFzeW5jIHVwZGF0ZU1vdmluZ0VsZW1lbnQobVRvcDpudW1iZXIsbUxlZnQ6bnVtYmVyKXtcclxuICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLnRvcCA9ICh0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcCttVG9wKStcInB4XCI7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlRWxlbS5zdHlsZS5sZWZ0ID0gKHRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdCttTGVmdCkrXCJweFwiO1xyXG4gICAgICAgIC8qIHRoaXMubW92YWJsZUVsZW0uc3R5bGUudG9wID0gKDEwMCp0aGlzLm1vdmFibGVFbGVtLm9mZnNldFRvcC9ib2R5RWxlbS5vZmZzZXRIZWlnaHQrbVRvcC81KStcIiVcIjtcclxuICAgICAgICB0aGlzLm1vdmFibGVFbGVtLnN0eWxlLmxlZnQgPSAoMTAwKnRoaXMubW92YWJsZUVsZW0ub2Zmc2V0TGVmdC9ib2R5RWxlbS5vZmZzZXRXaWR0aCttTGVmdC81KStcIiVcIjsgKi9cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGRhdGVNb3ZpbmdIZWxwZXJFbGVtZW50KG1Ub3A6bnVtYmVyLG1MZWZ0Om51bWJlcil7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLnRvcCA9ICh0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0VG9wK21Ub3ApK1wicHhcIjtcclxuICAgICAgICB0aGlzLm1vdmFibGVIZWxwZXIuc3R5bGUubGVmdCA9ICh0aGlzLm1vdmFibGVIZWxwZXIub2Zmc2V0TGVmdCttTGVmdCkrXCJweFwiO1xyXG4gICAgICAgIC8qIHRoaXMubW92YWJsZUhlbHBlci5zdHlsZS50b3AgPSAoMTAwKnRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRUb3AvYm9keUVsZW0ub2Zmc2V0SGVpZ2h0K21Ub3AvNSkrXCIlXCI7XHJcbiAgICAgICAgdGhpcy5tb3ZhYmxlSGVscGVyLnN0eWxlLmxlZnQgPSAoMTAwKnRoaXMubW92YWJsZUhlbHBlci5vZmZzZXRMZWZ0L2JvZHlFbGVtLm9mZnNldFdpZHRoK21MZWZ0LzUpK1wiJVwiOyAqL1xyXG4gICAgfVxyXG59IiwiXHJcblxyXG5pbXBvcnQgeyBNYW5pcHVsYXRvciB9IGZyb20gXCIuL0JhY2tlbmQvTWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IHsgU3ltYm9sTGlzdCB9IGZyb20gXCIuL0JhY2tlbmQvU3ltYm9sTGlzdFwiO1xyXG5pbXBvcnQgeyBEYXRhVHlwZSxJbnB1dExpbmVUeXBlIH0gZnJvbSBcIi4vQmFja2VuZC9FbnVtc1wiO1xyXG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gXCIuL0JhY2tlbmQvTGFiZWxcIjtcclxuaW1wb3J0IHsgQ29uc3RhbnQgfSBmcm9tIFwiLi9CYWNrZW5kL0NvbnN0YW50XCI7XHJcbmltcG9ydCB7IElucHV0TGluZUNvbnRyb2wgfSBmcm9tIFwiLi9CYWNrZW5kL0lucHV0TGluZUNvbnRyb2xcIjtcclxuaW1wb3J0IHsgSW5wdXRMaW5lIH0gZnJvbSBcIi4vQmFja2VuZC9JbnB1dExpbmVcIjtcclxuaW1wb3J0IHsgSW5wdXRXaW5kb3cgfSBmcm9tIFwiLi9JbnB1dFdpbmRvd1wiO1xyXG5pbXBvcnQgeyBnZXRIdG1sRWxlbWVudCwgY3JlYXRlQ2xpY2tMaXN0ZW5lciwgdXBkYXRlU2Nyb2xsLCB1cGRhdGVTY3JvbGxPZkluX091dCwgcmVtb3ZlQ2xhc3NPZkFsbCwgYWRkQ2xhc3NUbywgdXBkYXRlU2Nyb2xsT2ZEZXNjcmlwdGlvbkxpbmVzIH0gZnJvbSBcIi4vVG9vbHNcIjtcclxuaW1wb3J0IHsgYW5pQ29udHJvbCwgQW5pbWF0aW9uc1R5cCwgY2hlY2tJZlBhdXNlZCwgcGxheUJ1dHRvbiwgcmVzZXRCdXR0b24sIHNsZWVwRm9yLCBzbGVlcFN0YXRpY0FuaW1hdGlvbiwgc2xlZXBVbnRpbE5leHRTdGVwIH0gZnJvbSBcIi4vQW5pbWF0aW9uVXRpbFwiO1xyXG5pbXBvcnQgeyBBbmltYXRvciB9IGZyb20gXCIuL0FuaW1hdG9yXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBkZXNjcmlwdGlvbkxpbmVzOkhUTUxFbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnQoJ2Rlc2NyaXB0aW9uTGluZXMnKTtcclxuZXhwb3J0IGNvbnN0IHN5bWJvbFRhYmxlTGluZXM6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudCgnc3ltYm9sVGFibGVMaW5lcycpO1xyXG5leHBvcnQgY29uc3QgY3VycmVudExpbmU6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudCgnY3VycmVudExpbmUnKTtcclxuZXhwb3J0IGNvbnN0IG91dHB1dFRleHQ6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudCgnT3V0cHV0VGV4dCcpO1xyXG5leHBvcnQgY29uc3QgaW5wdXRUZXh0OkhUTUxFbGVtZW50PSBnZXRIdG1sRWxlbWVudCgnSW5wdXRUZXh0Jyk7XHJcbmV4cG9ydCBjb25zdCBhZGRyZXNzemFobGVyOkhUTUxFbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnQoJ0FkZHJlc3N6YWhsZXInKTtcclxuZXhwb3J0IGNvbnN0IG1hY2hpbmVuYmVmZWhsOkhUTUxFbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnQoJ01hY2hpbmVuYmVmZWhsJyk7XHJcbmV4cG9ydCBjb25zdCBvdXRwdXR3aW5kb3dDb250YWluZXI6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudCgnT3V0cHV0V2luZG93Q29udGFpbmVyJyk7XHJcbmV4cG9ydCBjb25zdCBPdXRwdXRUZXh0QXJlYUVsZW1lbnQ6SFRNTFRleHRBcmVhRWxlbWVudCA9Z2V0SHRtbEVsZW1lbnQoJ091dHB1dFRleHRBcmVhJylhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG5leHBvcnQgY29uc3QgSW5wdXRJRDpIVE1MRWxlbWVudD1nZXRIdG1sRWxlbWVudCgnSW5wdXRJRCcpO1xyXG5leHBvcnQgY29uc3QgSW5wdXRMaW5lczpIVE1MRWxlbWVudD1nZXRIdG1sRWxlbWVudCgnSW5wdXRMaW5lcycpO1xyXG5leHBvcnQgY29uc3QgT3V0cHV0QWRkcmVzc2VzOkhUTUxFbGVtZW50PWdldEh0bWxFbGVtZW50KCdPdXRwdXRBZGRyZXNzZXMnKTtcclxuZXhwb3J0IGNvbnN0IE91dHB1dExpbmVzOkhUTUxFbGVtZW50PWdldEh0bWxFbGVtZW50KCdPdXRwdXRMaW5lcycpO1xyXG5leHBvcnQgY29uc3QgY3VycmVudExpbmVMaW5lOkhUTUxFbGVtZW50ID1nZXRIdG1sRWxlbWVudChcImN1cnJlbnRMaW5lTGluZVwiKTtcclxuZXhwb3J0IGNvbnN0IHdpbmRvd091dHB1dEFkZHJlc3NlczpIVE1MRWxlbWVudCA9IGdldEh0bWxFbGVtZW50KFwiT3V0cHV0V2luZG93QWRkcmVzc2VzXCIpO1xyXG5leHBvcnQgY29uc3Qgd2luZG93T3V0cHV0TGluZXM6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudChcIk91dHB1dFdpbmRvd0xpbmVzXCIpO1xyXG5leHBvcnQgY29uc3QgT3V0cHV0V2luZG93TWFjaGluZUNvZGU6SFRNTEVsZW1lbnQgPSBnZXRIdG1sRWxlbWVudChcIk91dHB1dFdpbmRvd01hY2hpbmVDb2RlXCIpO1xyXG5leHBvcnQgY29uc3QgdGFyZ2V0U3ltYm9sVGFibGVMaW5lOnN0cmluZz1cImJ1ZmZlclRhcmdldFN5bWJvbFRhYmxlXCI7XHJcbmV4cG9ydCBjb25zdCB0YXJnZXRsYWJlbFZhbHVlUGxhY2Vob2xkZXI6c3RyaW5nPVwibGFiZWxWYWx1ZVBsYWNlaG9sZGVyXCJcclxuZXhwb3J0IGNvbnN0IHAyTGFiZWxWYWx1ZVBsYWNlaG9sZGVyOnN0cmluZz1cInAyTGFiZWxWYWx1ZVBsYWNlaG9sZGVyXCI7XHJcbmxldCBza2lwcGVkOmJvb2xlYW49ZmFsc2U7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHNlYXJjaEVudHJ5TGFiZWw6c3RyaW5nPVwic2VhcmNoRW50cnlMYWJlbFwiO1xyXG5leHBvcnQgY29uc3Qgc3ltYm9sYWRkcmVzczpzdHJpbmc9XCJzeW1ib2xhZGRyZXNzXCI7XHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGluZzpIVE1MRWxlbWVudD1nZXRIdG1sRWxlbWVudChcInRyYW5zbGF0aW5nQ29udGFpbmVyXCIpO1xyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRpbmdJbmZvOkhUTUxTcGFuRWxlbWVudD0gZ2V0SHRtbEVsZW1lbnQoXCJ0cmFuc2xhdGluZ0luZm9cIikgYXMgSFRNTFNwYW5FbGVtZW50O1xyXG5leHBvcnQgY29uc3Qgc2V0VHJhbnNsYXRpbmdEaXZIaWRkZW49KCk9PntcclxuICAgIHRyYW5zbGF0aW5nLnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIjtcclxufVxyXG5leHBvcnQgY29uc3QgIHNldFRyYW5zbGF0aW5nRGl2VmlzaWJsZT0oKT0+e1xyXG4gICAgaWYoYW5pQ29udHJvbC5pc0FuaTMoKSAmJiBhbmlDb250cm9sLnNwZWVkPT00ICYmIGFuaUNvbnRyb2wucGxheSAmJiB0cmFuc2xhdGluZy5nZXRBdHRyaWJ1dGUoXCJkaXNwbGF5YWJsZVwiKT09XCJ0cnVlXCIpe1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2V0XCIpO1xyXG4gICAgICAgIHRyYW5zbGF0aW5nLnN0eWxlLnZpc2liaWxpdHk9XCJ2aXNpYmxlXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0V2luZG93e1xyXG4gICAgcHJpdmF0ZSBpbnB1dExpbmVDb250cm9sOklucHV0TGluZUNvbnRyb2w9SW5wdXRMaW5lQ29udHJvbC5nZXRJbnN0YW5jZSgpO1xyXG4gICAgcHJpdmF0ZSBzeW1ib2xMaXN0PVN5bWJvbExpc3QuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHByaXZhdGUgaVdpbmRvdzpJbnB1dFdpbmRvdyA9IG5ldyBJbnB1dFdpbmRvdyh0aGlzKTtcclxuICAgIHByaXZhdGUgYW5pbTpBbmltYXRvcjtcclxuICAgIHByaXZhdGUgbGlua2VyQXVmbG9zdW5nQjpib29sZWFuPWZhbHNlO1xyXG4gICAgcHJpdmF0ZSBuZXh0UGFyc2VJRDpudW1iZXI9MDtcclxuICAgIHByaXZhdGUgaW5wdXRMaW5lczpJbnB1dExpbmVbXT1bXTtcclxuICAgIHByaXZhdGUgaW5wdXRzdHJpbmdzOnN0cmluZ1tdID1bXTtcclxuICAgIHByaXZhdGUgc3ltYm9sczpBcnJheTxMYWJlbHxDb25zdGFudD49W11cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5hbmltID0gbmV3IEFuaW1hdG9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBcclxuICAgIHB1YmxpYyBwYXJ0aWFsUmVzZXQgPWFzeW5jICgpID0+e1xyXG4gICAgICAgIHRoaXMuaW5wdXRMaW5lcz1bXTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNsZWFyTWFjaGluZW5iZWZlaGxhbmRDdXJyZW50TGluZSgpO1xyXG4gICAgICAgIHN5bWJvbFRhYmxlTGluZXMuaW5uZXJIVE1MPWA8aDQgaWQ9XCIke3RhcmdldFN5bWJvbFRhYmxlTGluZX1cIj4gJm5ic3A7IDwvaDQ+YDtcclxuICAgICAgICBkZXNjcmlwdGlvbkxpbmVzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIGFkZHJlc3N6YWhsZXIuaW5uZXJIVE1MPVwiMDAwMGhcIjtcclxuICAgICAgICB0cmFuc2xhdGluZy5zZXRBdHRyaWJ1dGUoXCJkaXNwbGF5YWJsZVwiLFwidHJ1ZVwiKTtcclxuICAgICAgICB0aGlzLm5leHRQYXJzZUlEPTA7XHJcbiAgICAgICAgT3V0cHV0QWRkcmVzc2VzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIE91dHB1dExpbmVzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIE91dHB1dFRleHRBcmVhRWxlbWVudC5pbm5lckhUTUw9XCJcIjtcclxuICAgICAgICB3aW5kb3dPdXRwdXRBZGRyZXNzZXMuaW5uZXJIVE1MPVwiXCI7XHJcbiAgICAgICAgd2luZG93T3V0cHV0TGluZXMuaW5uZXJIVE1MPVwiXCI7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbnB1dExpbmVDb250cm9sLnJlc2V0KCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hbmltLnJlc2V0KCk7XHJcbiAgICAgICAgYXdhaXQgYW5pQ29udHJvbC5yZXNldEZsYWdzKCk7XHJcbiAgICAgICAgZ2V0SHRtbEVsZW1lbnQoXCJJbnB1dFRleHRcIikuc2Nyb2xsVG9wPTA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZnJlc2hJbnB1dExpc3RJdGVtcz0oKT0+e1xyXG4gICAgICAgIElucHV0SUQuaW5uZXJIVE1MPVwiXCI7XHJcbiAgICAgICAgSW5wdXRMaW5lcy5pbm5lckhUTUw9XCJcIjtcclxuICAgICAgICBPdXRwdXRBZGRyZXNzZXMuaW5uZXJIVE1MPVwiXCI7XHJcbiAgICAgICAgT3V0cHV0TGluZXMuaW5uZXJIVE1MPVwiXCI7XHJcbiAgICAgICAgbGV0IHNzOnN0cmluZ1tdPVtdO1xyXG4gICAgICAgIGxldCBlOklucHV0TGluZTtcclxuICAgICAgICBmb3IobGV0IGk9MDtpPHRoaXMuaW5wdXRzdHJpbmdzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBlPXRoaXMuaW5wdXRMaW5lc1tpXTtcclxuICAgICAgICAgICAgaWYoZSAhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgaWYoZS5nZXRUeXBlKCk9PUlucHV0TGluZVR5cGUuRU1QVFkpe1xyXG4gICAgICAgICAgICAgICAgICAgIElucHV0SUQuaW5uZXJIVE1MKz1gPHAgaWQ9XCIkeyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfWlucHV0TGluZUlkXCIgY2xhc3M9XCJncmF5XCI+JHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX06PC9wPmA7XHJcbiAgICAgICAgICAgICAgICAgICAgSW5wdXRMaW5lcy5pbm5lckhUTUwrPWA8cCBpZD1cIiR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9aW5wdXRQXCIgY2xhc3M9XCJvdmVyZmxvd0VsaXBzaXNcIj4ke2UuZ2V0Q29tbWVudGFyeSgpPT1cIlwiP1wiXCI6XCI7XCIrZS5nZXRDb21tZW50YXJ5KCl9PC9wPmA7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBJbnB1dElELmlubmVySFRNTCs9YDxwICBjbGFzcz1cImdyYXlcIj4keyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfTo8L3A+YDtcclxuICAgICAgICAgICAgICAgICAgICBJbnB1dExpbmVzLmlubmVySFRNTCs9YDxwIGlkPVwiJHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX1pbnB1dFBcIiBjbGFzcz1cIm92ZXJmbG93RWxpcHNpc1wiPiR7TWFuaXB1bGF0b3IuZm9ybWF0TGFiZWxhbmRCZWZlaGxEaXNwbGF5KGUuZ2V0TGFiZWwoKSxlLmdldEZpcnN0UGFydCgpLGUuY29tbWFuZExpbmV0b1N0cmluZyhmYWxzZSkpfSR7ZS5nZXRDb21tZW50YXJ5KCk9PVwiXCI/XCJcIjpcIjtcIitlLmdldENvbW1lbnRhcnkoKX08L3A+YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIE91dHB1dEFkZHJlc3Nlcy5pbm5lckhUTUwrPWA8cCBpZD1cIiR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9b0FkZHJlc3NcIiBjbGFzcz1cImdyYXlcIj4mbmJzcDs8L3A+YDtcclxuICAgICAgICAgICAgICAgIE91dHB1dExpbmVzLmlubmVySFRNTCs9YDxwIGlkPVwiJHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX1vdXRwdXRQXCIgY2xhc3M9XCJvdmVyZmxvd0VsaXBzaXNcIj4mbmJzcDs8L3A+YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgSW5wdXRJRC5pbm5lckhUTUwrPWA8cCBpZD1cIiR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9aW5wdXRMaW5lSWRcIiBjbGFzcz1cImdyYXlcIj4keyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfTo8L3A+YDtcclxuICAgICAgICAgICAgICAgIElucHV0TGluZXMuaW5uZXJIVE1MKz1gPHAgaWQ9XCIkeyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfWlucHV0UFwiICBjbGFzcz1cIm92ZXJmbG93RWxpcHNpc1wiPiR7dGhpcy5pbnB1dHN0cmluZ3NbaV19Jm5ic3A7PC9wPmA7XHJcbiAgICAgICAgICAgICAgICBPdXRwdXRBZGRyZXNzZXMuaW5uZXJIVE1MKz1gPHAgaWQ9XCIkeyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfW9BZGRyZXNzXCIgY2xhc3M9XCJncmF5XCI+Jm5ic3A7PC9wPmA7XHJcbiAgICAgICAgICAgICAgICBPdXRwdXRMaW5lcy5pbm5lckhUTUwrPWA8cCBpZD1cIiR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9b3V0cHV0UFwiIGNsYXNzPVwib3ZlcmZsb3dFbGlwc2lzXCI+Jm5ic3A7PC9wPmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJpdGVtcyByZWZyZXNoZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZnJlc2hJbnB1dExpc3RJdGVtPShpOm51bWJlcik9PntcclxuICAgICAgICBpZihpPHRoaXMuaW5wdXRMaW5lcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICBsZXQgZTpJbnB1dExpbmU9dGhpcy5pbnB1dExpbmVzW2ldO1xyXG4gICAgICAgICAgICBsZXQgaWRTdHJpbmcgPSBgJHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX1pbnB1dFBgO1xyXG4gICAgICAgICAgICBsZXQgaW5wdXRMaW5lSFRNTDpIVE1MRWxlbWVudCA9IGdldEh0bWxFbGVtZW50KGlkU3RyaW5nKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW5wdXRMaW5lSFRNTCk7XHJcbiAgICAgICAgICAgIGlmKGUuZ2V0VHlwZSgpPT1JbnB1dExpbmVUeXBlLkVNUFRZKXtcclxuICAgICAgICAgICAgICAgIGlucHV0TGluZUhUTUwuaW5uZXJIVE1MPWAke2UuZ2V0Q29tbWVudGFyeSgpPT1cIlwiP1wiXCI6XCI7XCIrZS5nZXRDb21tZW50YXJ5KCl9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGUuZ2V0VHlwZSgpPT1JbnB1dExpbmVUeXBlLlBTRVVET1RSQU5TTEFURUQpe1xyXG4gICAgICAgICAgICAgICAgaW5wdXRMaW5lSFRNTC5pbm5lckhUTUw9YCR7TWFuaXB1bGF0b3IuZm9ybWF0TGFiZWxEaXNwbGF5KGUuZ2V0TGFiZWwoKSx0cnVlKX0ke2UuZ2V0Q29tbWVudGFyeSgpPT1cIlwiP1wiXCI6XCI7XCIrZS5nZXRDb21tZW50YXJ5KCl9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5zeW1ib2xMaXN0LmlzQ29uc3QoZS5nZXRGaXJzdFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0TGluZUhUTUwuaW5uZXJIVE1MPWAke01hbmlwdWxhdG9yLmZvcm1hdENvbnN0YW5kQmVmZWhsRGlzcGxheShlLmdldEZpcnN0UGFydCgpLGUuZ2V0U2Vjb25kUGFydCgpLGUuY29tbWFuZExpbmV0b1N0cmluZyh0cnVlKSl9JHtlLmdldENvbW1lbnRhcnkoKT09XCJcIj9cIlwiOlwiO1wiK2UuZ2V0Q29tbWVudGFyeSgpfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlucHV0TGluZUhUTUwuaW5uZXJIVE1MPWAke01hbmlwdWxhdG9yLmZvcm1hdExhYmVsYW5kQmVmZWhsRGlzcGxheShlLmdldExhYmVsKCksZS5nZXRGaXJzdFBhcnQoKSxlLmNvbW1hbmRMaW5ldG9TdHJpbmcodHJ1ZSkpfSR7ZS5nZXRDb21tZW50YXJ5KCk9PVwiXCI/XCJcIjpcIjtcIitlLmdldENvbW1lbnRhcnkoKX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVwdXNoU3BlaWNoZXJhYmJpbGRPZj0oaTpudW1iZXIsYjpib29sZWFuKT0+e1xyXG5cclxuICAgICAgICBpZihpPHRoaXMuaW5wdXRMaW5lcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICBsZXQgZTpJbnB1dExpbmU9dGhpcy5pbnB1dExpbmVzW2ldO1xyXG4gICAgICAgICAgICBsZXQgaWRTdHJpbmcgPSBgJHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX1vdXRwdXRQYDtcclxuICAgICAgICAgICAgbGV0IG91dHB1dExpbmVIVE1MOkhUTUxFbGVtZW50ID0gZ2V0SHRtbEVsZW1lbnQoaWRTdHJpbmcpO1xyXG4gICAgICAgICAgICBpZihlLmdldFR5cGUoKSA9PSBJbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpe1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYik7XHJcbiAgICAgICAgICAgICAgICBpZighYil7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0SHRtbEVsZW1lbnQoYCR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9b0FkZHJlc3NgKS5pbm5lckhUTUw9YCR7TWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihlLmdldFN0YXJ0aW5nQWRkcigpKStcIjpcIn1gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoZS5nZXRUcmFuc2xhdGlvbigpLmluY2x1ZGVzKFwiPz8/P1wiKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3V0cHV0TGluZUhUTUwuaW5uZXJIVE1MPWAke3RoaXMuaW5wdXRMaW5lQ29udHJvbC5nZXREaXNwbGF5YWJsZVNwZWljaGVyYWJiaWxkKGUsZmFsc2UpfSZuYnNwOyR7dGhpcy5nZXRMYWJlbElmVW5rbm93bihpLGIpfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0TGluZUhUTUwuaW5uZXJIVE1MPWAke01hbmlwdWxhdG9yLmZvcm1hdFNwZWljaGVyYWJiaWxkYW5kTGFiZWwodGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSxmYWxzZSksdGhpcy5nZXRMYWJlbElmVW5rbm93bihpLGIpKX1gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRMaW5lSFRNTC5pbm5lckhUTUw9YCR7dGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSx0cnVlKX0mbmJzcDtgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRMaW5lSFRNTC5pbm5lckhUTUw9YCZuYnNwO2A7XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlUHVzaFN5bWJvbHM9KCk9PntcclxuICAgICAgICB0aGlzLnN5bWJvbHM9dGhpcy5zeW1ib2xMaXN0LmdldFNlcXVlbmNlKCk7XHJcbiAgICAgICAgbGV0IHM6Q29uc3RhbnR8TGFiZWw7XHJcbiAgICAgICAgbGV0IG4scDtcclxuICAgICAgICBsZXQgaWRTdHJpbmc6U3RyaW5nPVwiXCI7XHJcbiAgICAgICAgc3ltYm9sVGFibGVMaW5lcy5pbm5lckhUTUw9XCJcIjtcclxuICAgICAgICBpZih0aGlzLnN5bWJvbHMubGVuZ3RoIT0wKXtcclxuICAgICAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLnN5bWJvbHMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICBpZFN0cmluZz1gc3ltYm9sJHtpfWBcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sc1tpXSE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcz10aGlzLnN5bWJvbHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocyBpbnN0YW5jZW9mIExhYmVsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbj1zLmdldE5hbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcD1zLmdldFBvc2l0aW9uKCkhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xUYWJsZUxpbmVzLmlubmVySFRNTCs9YDxoNCBpZD1cIiR7aWRTdHJpbmd9XCI+PHNwYW4gY2xhc3M9XCJncmF5XCI+TDo8L3NwYW4+ICR7TWFuaXB1bGF0b3IuZm9ybWF0TGFiZWxEaXNwbGF5dG9TeW1ib2xUYWJsZShuKX0gPSA8c3BhbiBpZD1cIiR7c3ltYm9sYWRkcmVzc30ke2l9XCI+JHt0aGlzLmlucHV0TGluZUNvbnRyb2wuZkhEMTYocCl9PC9zcGFuPiAoJHt0aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0TGl0dGxlRW5kaWFuT2YocCl9KTwvaDQ+YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocyBpbnN0YW5jZW9mIENvbnN0YW50KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbj1zLmdldE5hbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcD1zLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE1hbmlwdWxhdG9yLmlzRGF0XzgocCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sVGFibGVMaW5lcy5pbm5lckhUTUwrPWA8aDQgaWQ9XCIke2lkU3RyaW5nfVwiPjxzcGFuIGNsYXNzPVwiZ3JheVwiPks6PC9zcGFuPiAke01hbmlwdWxhdG9yLmZvcm1hdExhYmVsRGlzcGxheXRvU3ltYm9sVGFibGUobil9ID0gPHNwYW4gaWQ9XCIke3N5bWJvbGFkZHJlc3N9JHtpfVwiPiZuYnNwOyZuYnNwOyR7dGhpcy5pbnB1dExpbmVDb250cm9sLmZIRDgocCl9PC9zcGFuPjwvaDQ+YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xUYWJsZUxpbmVzLmlubmVySFRNTCs9YDxoNCBpZD1cIiR7aWRTdHJpbmd9XCI+PHNwYW4gY2xhc3M9XCJncmF5XCI+Szo8L3NwYW4+ICR7TWFuaXB1bGF0b3IuZm9ybWF0TGFiZWxEaXNwbGF5dG9TeW1ib2xUYWJsZShuKX0gPSA8c3BhbiBpZD1cIiR7c3ltYm9sYWRkcmVzc30ke2l9XCI+JHt0aGlzLmlucHV0TGluZUNvbnRyb2wuZkhEMTYocCl9PC9zcGFuPjwvaDQ+YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN5bWJvbFRhYmxlTGluZXMuaW5uZXJIVE1MKz1gPGg0IGlkPVwiJHt0YXJnZXRTeW1ib2xUYWJsZUxpbmV9XCI+ICZuYnNwOzwvaDQ+YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlU2Nyb2xsKFwic3ltYm9sVGFibGVMaW5lc1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlUHVzaExhc3RTeW1ib2xFbXB0eSgpe1xyXG4gICAgICAgIHRoaXMuc3ltYm9scz10aGlzLnN5bWJvbExpc3QuZ2V0U2VxdWVuY2UoKTtcclxuICAgICAgICBsZXQgczpDb25zdGFudHxMYWJlbDtcclxuICAgICAgICBsZXQgbixwO1xyXG4gICAgICAgIGxldCBpZFN0cmluZzpTdHJpbmc9XCJcIjtcclxuICAgICAgICBzeW1ib2xUYWJsZUxpbmVzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMuc3ltYm9scy5sZW5ndGghPTApe1xyXG4gICAgICAgICAgICBmb3IobGV0IGk9MDtpPHRoaXMuc3ltYm9scy5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3ltYm9sc1tpXSE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgcz10aGlzLnN5bWJvbHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaT09dGhpcy5zeW1ib2xzLmxlbmd0aC0xKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocyBpbnN0YW5jZW9mIExhYmVsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG49cy5nZXROYW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwPXMuZ2V0UG9zaXRpb24oKSE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xUYWJsZUxpbmVzLmlubmVySFRNTCs9YDxoND48c3BhbiBjbGFzcz1cImdyYXlcIj5MOjwvc3Bhbj4gJHtNYW5pcHVsYXRvci5mb3JtYXRMYWJlbERpc3BsYXl0b1N5bWJvbFRhYmxlKG4pfSA9Jm5ic3A7Jm5ic3A7PHNwYW4gaWQ9XCIke3RhcmdldGxhYmVsVmFsdWVQbGFjZWhvbGRlcn1cIj4gPC9zcGFuPjwvaDQ+YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocyBpbnN0YW5jZW9mIExhYmVsKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbj1zLmdldE5hbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcD1zLmdldFBvc2l0aW9uKCkhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xUYWJsZUxpbmVzLmlubmVySFRNTCs9YDxoND48c3BhbiBjbGFzcz1cImdyYXlcIj5MOjwvc3Bhbj4gJHtNYW5pcHVsYXRvci5mb3JtYXRMYWJlbERpc3BsYXl0b1N5bWJvbFRhYmxlKG4pfSA9ICR7dGhpcy5pbnB1dExpbmVDb250cm9sLmZIRDE2KHApfSAoJHt0aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0TGl0dGxlRW5kaWFuT2YocCl9KTwvaDQ+YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocyBpbnN0YW5jZW9mIENvbnN0YW50KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbj1zLmdldE5hbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcD1zLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE1hbmlwdWxhdG9yLmlzRGF0XzgocCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sVGFibGVMaW5lcy5pbm5lckhUTUwrPWA8aDQ+PHNwYW4gY2xhc3M9XCJncmF5XCI+Szo8L3NwYW4+ICR7TWFuaXB1bGF0b3IuZm9ybWF0TGFiZWxEaXNwbGF5dG9TeW1ib2xUYWJsZShuKX0gPSAmbmJzcDsmbmJzcDske3RoaXMuaW5wdXRMaW5lQ29udHJvbC5mSEQ4KHApfTwvaDQ+YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xUYWJsZUxpbmVzLmlubmVySFRNTCs9YDxoND48c3BhbiBjbGFzcz1cImdyYXlcIj5LOjwvc3Bhbj4gJHtNYW5pcHVsYXRvci5mb3JtYXRMYWJlbERpc3BsYXl0b1N5bWJvbFRhYmxlKG4pfSA9ICR7dGhpcy5pbnB1dExpbmVDb250cm9sLmZIRDE2KHApfTwvaDQ+YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN5bWJvbFRhYmxlTGluZXMuaW5uZXJIVE1MKz1gPGg0PiAmbmJzcDs8c3BhbiBpZD1cIiR7dGFyZ2V0U3ltYm9sVGFibGVMaW5lfVwiPjwvc3Bhbj4gPC9oND5gO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGVTY3JvbGwoXCJzeW1ib2xUYWJsZUxpbmVzXCIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlcHVzaFRyYW5zbGF0aW9ucz1hc3luYygpPT57XHJcbiAgICAgICAgT3V0cHV0VGV4dEFyZWFFbGVtZW50LmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIHdpbmRvd091dHB1dExpbmVzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIHdpbmRvd091dHB1dEFkZHJlc3Nlcy5pbm5lckhUTUw9XCJcIjtcclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICBmb3IobGV0IGo9MDtqPD10aGlzLmlucHV0TGluZXMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICAgIGk9dGhpcy5pbnB1dExpbmVzW2pdO1xyXG4gICAgICAgICAgICBpZihpIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgaWYoaS5nZXRUeXBlKCkgIT0gSW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKXtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGkuZ2V0VHJhbnNsYXRpb24oKS5pbmNsdWRlcyhcIj8/XCIpKXtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dPdXRwdXRMaW5lcy5pbm5lckhUTUwrPWA8cCBjbGFzcz1cIm92ZXJmbG93RWxpcHNpc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7TWFuaXB1bGF0b3IuZm9ybWF0U3BlaWNoZXJhYmJpbGRhbmRMYWJlbCh0aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0RGlzcGxheWFibGVTcGVpY2hlcmFiYmlsZChpLGZhbHNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRMYWJlbElmVW5rbm93bihpLmdldElkKCksZmFsc2UpKX08L3A+YFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHdpbmRvd091dHB1dExpbmVzLmlubmVySFRNTCs9YDxwIGNsYXNzPVwib3ZlcmZsb3dFbGlwc2lzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0RGlzcGxheWFibGVTcGVpY2hlcmFiYmlsZChpLHRydWUpfSZuYnNwOzwvcD5gXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dPdXRwdXRBZGRyZXNzZXMuaW5uZXJIVE1MKz1gPHAgY2xhc3M9XCJncmF5XCI+JHtpLmdldFN0YXJ0aW5nQWRkcigpfTwvcD5gO1xyXG4gICAgICAgICAgICAgICAgT3V0cHV0VGV4dEFyZWFFbGVtZW50LmlubmVySFRNTCs9XCI6XCIraS5nZXRUcmFuc2xhdGlvbigpK1wiXFxuXCI7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgd2luZG93T3V0cHV0QWRkcmVzc2VzLmlubmVySFRNTCs9YDxwIGNsYXNzPVwiZ3JheVwiPiZuYnNwOzwvcD5gO1xyXG4gICAgICAgICAgICAgICAgd2luZG93T3V0cHV0TGluZXMuaW5uZXJIVE1MKz1gPHAgY2xhc3M9XCJvdmVyZmxvd0VsaXBzaXNcIj4mbmJzcDs8L3A+YDtcclxuICAgICAgICAgICAgICAgIE91dHB1dFRleHRBcmVhRWxlbWVudC5pbm5lckhUTUwrPVwiOjAwMDAwMDAxRkZcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVwdXNoVHJhbnNsYXRpb25PZj1hc3luYyhpOm51bWJlcik9PntcclxuICAgICAgICBsZXQgZTpJbnB1dExpbmU7XHJcbiAgICAgICAgd2luZG93T3V0cHV0QWRkcmVzc2VzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIHdpbmRvd091dHB1dExpbmVzLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgIGlmKHRoaXMuaW5wdXRMaW5lcy5sZW5ndGg9PXRoaXMuaW5wdXRzdHJpbmdzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGU9dGhpcy5pbnB1dExpbmVzW2ldO1xyXG4gICAgICAgICAgICBpZihpPT10aGlzLmlucHV0TGluZXMubGVuZ3RoLTEpe1xyXG4gICAgICAgICAgICAgICAgaWYoZS5nZXRUeXBlKCk9PUlucHV0TGluZVR5cGUuVFJBTlNMQVRFRCl7XHJcbiAgICAgICAgICAgICAgICAgICAgT3V0cHV0VGV4dEFyZWFFbGVtZW50LmlubmVySFRNTCs9XCI6XCIrZS5nZXRUcmFuc2xhdGlvbigpK1wiXFxuXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgT3V0cHV0VGV4dEFyZWFFbGVtZW50LmlubmVySFRNTCs9XCI6MDAwMDAwMDFGRlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGk8dGhpcy5pbnB1dExpbmVzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGU9dGhpcy5pbnB1dExpbmVzW2ldO1xyXG4gICAgICAgICAgICBpZihlLmdldFR5cGUoKT09SW5wdXRMaW5lVHlwZS5UUkFOU0xBVEVEKXtcclxuICAgICAgICAgICAgICAgIE91dHB1dFRleHRBcmVhRWxlbWVudC5pbm5lckhUTUwrPVwiOlwiK2UuZ2V0VHJhbnNsYXRpb24oKStcIlxcblwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgbGlua2VyQXVmbG9zdW5nPWFzeW5jICgpPT57XHJcbiAgICAgICAgdGhpcy5yZXB1c2hUcmFuc2xhdGlvbnMoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZih0aGlzLmxpbmtlckF1Zmxvc3VuZ0Ipe1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXlTZWNvbmRQaGFzZSgpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnRvZ2dsZVN0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5pbnB1dExpbmVzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja0lucHV0TGluZSh0aGlzLmlucHV0TGluZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGVhck1hY2hpbmVuYmVmZWhsYW5kQ3VycmVudExpbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRpc3BsYXlTZWNvbmRQaGFzZT1hc3luYygpPT57XHJcbiAgICAgICAgbGV0IHNsZWVwdGltZSA9IDQwMDtcclxuICAgICAgICBsZXQgbmV3RWxlbTpIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBsZXQgbGluZUJ1ZmZlcjpzdHJpbmdbXT1bXTtcclxuICAgICAgICBsZXQgYmxvY2tBbmltYXRpb246Ym9vbGVhbj10aGlzLmNoZWNrRm9yTm9BbmlTdGVwKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbmV3RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbmV3RWxlbS5pZCA9IFwibGlua2VyVGl0ZWxEaXZcIlxyXG4gICAgICAgIG5ld0VsZW0uY2xhc3NMaXN0LmFkZChcIm5vTVBcIik7XHJcbiAgICAgICAgaWYoIXRoaXMuY2hlY2tGb3JTa2lwKCkpe1xyXG4gICAgICAgICAgICBuZXdFbGVtLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5EZXNjcmlwdGlvbkRpdlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVzY3JpcHRpb25MaW5lcy5hcHBlbmRDaGlsZChuZXdFbGVtKTtcclxuICAgICAgICBmb3IobGV0IGkgPTA7aTw3O2krKyl7XHJcbiAgICAgICAgICAgIGlmKGk8MiB8fCBpPjQpe1xyXG4gICAgICAgICAgICAgICAgbGluZUJ1ZmZlci5wdXNoKGA8cD4mbmJzcDsmbmJzcDsmbmJzcDs8L3A+YCk7XHJcbiAgICAgICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBVbnRpbE5leHRTdGVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwgKz0gYDxwPiZuYnNwOyZuYnNwOyZuYnNwOzwvcD5gO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjcm9sbChkZXNjcmlwdGlvbkxpbmVzLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihpPT0yIHx8IGk9PTQpe1xyXG4gICAgICAgICAgICAgICAgbGluZUJ1ZmZlci5wdXNoKGA8cD4qKioqKioqKioqKioqKioqKioqKioqKio8L3A+YCk7XHJcbiAgICAgICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBVbnRpbE5leHRTdGVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwgKz0gYDxwPioqKioqKioqKioqKioqKioqKioqKioqKjwvcD5gO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjcm9sbChkZXNjcmlwdGlvbkxpbmVzLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihpPT0zKXtcclxuICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIucHVzaChgPHA+Mi5QaGFzZSBMaW5rZXJBdWZsw7ZzdW5nPC9wPmApO1xyXG4gICAgICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9YDxwPjIuUGhhc2UgTGlua2VyQXVmbMO2c3VuZzwvcD5gO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjcm9sbChkZXNjcmlwdGlvbkxpbmVzLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZighYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICBsaW5lQnVmZmVyLmZvckVhY2goZT0+e1xyXG4gICAgICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwrPWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGVja0lucHV0TGluZT1hc3luYyhlOklucHV0TGluZSk9PntcclxuICAgICAgICBsZXQgczpzdHJpbmc9XCJcIjtcclxuICAgICAgICBsZXQgbjpzdHJpbmc9XCJcIjtcclxuICAgICAgICBsZXQgazpMYWJlbHx1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGlmKGUuZ2V0VHlwZSgpIT1JbnB1dExpbmVUeXBlLlRSQU5TTEFURUQpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBuZXdFbGVtOkhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgIGxldCBsaW5lQnVmZmVyOnN0cmluZ1tdPVtdO1xyXG4gICAgICAgIGxldCBibG9ja0FuaW1hdGlvbjpib29sZWFuPXRoaXMuY2hlY2tGb3JOb0FuaVN0ZXAoKTtcclxuICAgICAgICBcclxuICAgICAgICBuZXdFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBuZXdFbGVtLmlkPWAke2UuZ2V0SWQoKX1MaW5rZXJEaXZgO1xyXG4gICAgICAgIG5ld0VsZW0uY2xhc3NMaXN0LmFkZChcIm5vTVBcIik7XHJcbiAgICAgICAgaWYoIXRoaXMuY2hlY2tGb3JTa2lwKCkpe1xyXG4gICAgICAgICAgICBuZXdFbGVtLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5EZXNjcmlwdGlvbkRpdlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVzY3JpcHRpb25MaW5lcy5hcHBlbmRDaGlsZChuZXdFbGVtKTtcclxuICAgICAgICBpZihlLmdldFRyYW5zbGF0aW9uKCkuaW5jbHVkZXMoXCI/Pz8/XCIpIHx8IGUuaGFzT2Zmc2V0TGFiZWwoKSl7XHJcblxyXG4gICAgICAgICAgICBrPXRoaXMuc3ltYm9sTGlzdC5nZXRMYWJlbHMoKS5maW5kKGk9PntcclxuICAgICAgICAgICAgICAgIGlmKGUuaGFzT2Zmc2V0TGFiZWwoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaS5nZXROYW1lKCkudG9Mb3dlckNhc2UoKT09ZS5nZXRMYWJlbE9mT2Zmc2V0KCkudG9Mb3dlckNhc2UoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGkuZ2V0TmFtZSgpLnRvTG93ZXJDYXNlKCk9PWUuZ2V0U2Vjb25kUGFydCgpLnRvTG93ZXJDYXNlKCkgfHwgaS5nZXROYW1lKCkudG9Mb3dlckNhc2UoKT09IGUuZ2V0VGhpcmRQYXJ0KCkudG9Mb3dlckNhc2UoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pITtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5nZXRMaW5rZXJBdWZsb2VzdW5nTGluZShlLmdldElkKCkpKTtcclxuICAgICAgICAgICAgaWYoYW5pQ29udHJvbC5zaW5nbGVTdGVwRmxhZykgYXdhaXQgYW5pQ29udHJvbC5zZXRQYXVzZWQoKTtcclxuICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pIGF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2Nyb2xsT2ZJbl9PdXQoXCJPdXRwdXRUZXh0XCIsYCR7KGUuZ2V0SWQoKSsxKTwxMD9cIjBcIisoZS5nZXRJZCgpKzEpOihlLmdldElkKCkrMSl9b3V0cHV0UGApO1xyXG4gICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0ucHVzaEF1Znp1bG9zZW5kZXN0b0N1cnJlbnRMaW5lKGUuZ2V0SWQoKSx0aGlzLmdldExpbmtlckF1ZmxvZXN1bmdMaW5lKGUuZ2V0SWQoKSxmYWxzZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRMaW5lTGluZS5pbm5lckhUTUw9YCR7ZS5nZXRTdGFydGluZ0FkZHIoKX06ICR7dGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSxmYWxzZSl9IDxzcGFuPiR7dGhpcy5nZXRMYWJlbElmVW5rbm93bihlLmdldElkKCksZmFsc2UpfTwvc3Bhbj5gXHJcbiAgICAgICAgICAgIGFkZHJlc3N6YWhsZXIuaW5uZXJIVE1MPSBgJHtlLmdldFN0YXJ0aW5nQWRkcigpfWA7XHJcbiAgICAgICAgICAgIG1hY2hpbmVuYmVmZWhsLmlubmVySFRNTD0gYCR7dGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSxmYWxzZSl9YDtcclxuICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBVbnRpbE5leHRTdGVwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gIGlkPVwiJHtlLmdldElkKCl9TEQrJHt9XHJcbiAgICAgICAgICAgIGxpbmVCdWZmZXIucHVzaChgPHA+U3VjaGUgTGFiZWwgJzxzcGFuIGlkPVwiJHtzZWFyY2hFbnRyeUxhYmVsfSR7ZS5nZXRJZCgpfVwiIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtrLmdldE5hbWUoKX08L3NwYW4+JyBpbiBTeW1ib2xUYWJlbGxlPC9wPmApXHJcbiAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwgKz1gPHA+U3VjaGUgTGFiZWwgJzxzcGFuIGlkPVwiJHtzZWFyY2hFbnRyeUxhYmVsfSR7ZS5nZXRJZCgpfVwiIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtrLmdldE5hbWUoKX08L3NwYW4+JyBpbiBTeW1ib2xUYWJlbGxlPC9wPmA7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGwoZGVzY3JpcHRpb25MaW5lcy5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudExpbmVMaW5lLmlubmVySFRNTD1gJHtlLmdldFN0YXJ0aW5nQWRkcigpfTogJHt0aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0RGlzcGxheWFibGVTcGVpY2hlcmFiYmlsZChlLGZhbHNlKX0gPHNwYW4gY2xhc3M9XCJjckludmVydFwiPiR7dGhpcy5nZXRMYWJlbElmVW5rbm93bihlLmdldElkKCksZmFsc2UpfTwvc3Bhbj5gXHJcblxyXG4gICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihrLmdldFBvc2l0aW9uKCk9PVwiPz8/P1wiKXtcclxuICAgICAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0uc2VhcmNoRW50cnlJblN5bWJvbHRhYmxlcGhhc2VPbmUoYCR7c2VhcmNoRW50cnlMYWJlbH0ke2UuZ2V0SWQoKX1gLGsuZ2V0TmFtZSgpLHRoaXMuc3ltYm9scy5pbmRleE9mKGspKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMaW5lTGluZS5pbm5lckhUTUw9YCR7ZS5nZXRTdGFydGluZ0FkZHIoKX06ICR7dGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSxmYWxzZSl9IDxzcGFuIGNsYXNzPVwiY3JJbnZlcnQgYmtFcnJvclwiPiR7dGhpcy5nZXRMYWJlbElmVW5rbm93bihlLmdldElkKCksZmFsc2UpfTwvc3Bhbj5gXHJcbiAgICAgICAgICAgICAgICBsaW5lQnVmZmVyLnB1c2goYDxwPjxzcGFuIGNsYXNzPVwiZXJyb3JSZWQgZWluZ2VydWNrdFwiPkxhYmVsICc8c3BhbiBjbGFzcz1cImxhYmVsQmx1ZVwiPiR7ay5nZXROYW1lKCl9PC9zcGFuPicga29ubnRlIG5pY2h0IGF1ZmdlbMO2c3Qgd2VyZGVuITwvc3Bhbj48L3A+YClcclxuICAgICAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFbGVtLmlubmVySFRNTCArPWA8cD48c3BhbiBjbGFzcz1cImVycm9yUmVkIGVpbmdlcnVja3RcIj5MYWJlbCAnPHNwYW4gY2xhc3M9XCJsYWJlbEJsdWVcIj4ke2suZ2V0TmFtZSgpfTwvc3Bhbj4nIGtvbm50ZSBuaWNodCBhdWZnZWzDtnN0IHdlcmRlbiE8L3NwYW4+PC9wPmA7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2Nyb2xsKGRlc2NyaXB0aW9uTGluZXMuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoIWJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lQnVmZmVyLmZvckVhY2goZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtLmlubmVySFRNTCs9ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBGb3IoMTApO1xyXG4gICAgICAgICAgICAgICAgYW5pQ29udHJvbC5zZXRTdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignU3RvcCBwcmVzc2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHM9dGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSxmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0TGluZUNvbnRyb2wucmV0cmFuc2xhdGUoZSk7XHJcbiAgICAgICAgICAgICAgICBuPXRoaXMuaW5wdXRMaW5lQ29udHJvbC5nZXREaXNwbGF5YWJsZVNwZWljaGVyYWJiaWxkKGUsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAvKiBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hbmltLmV4Y2hhbmdlTGFiZWxXaXRoU3ltYm9sVGFibGUoXCJMYWJlbCAnXCIray5nZXROYW1lKCkrXCInP1wiLFwiTGFiZWwgJ1wiK2suZ2V0TmFtZSgpK1wiJyA9IFwiK01hbmlwdWxhdG9yLmhleFRvRGVjKGsuZ2V0UG9zaXRpb24oKSEpK1wiIChcIitrLmdldFBvc2l0aW9uKCkhK1wiKVwiLHRoaXMuc3ltYm9scy5pbmRleE9mKGspKTtcclxuICAgICAgICAgICAgICAgIH0gKi9cclxuICAgICAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0uc2VhcmNoRW50cnlJblN5bWJvbHRhYmxlcGhhc2VPbmUoYCR7c2VhcmNoRW50cnlMYWJlbH0ke2UuZ2V0SWQoKX1gLGsuZ2V0TmFtZSgpLHRoaXMuc3ltYm9scy5pbmRleE9mKGspKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIucHVzaChgPHAgY2xhc3M9XCJlaW5nZXJ1Y2t0XCI+TGFiZWwgJzxzcGFuIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtrLmdldE5hbWUoKX08L3NwYW4+JyBpbiBTeW1ib2x0YWJlbGxlIGdlZnVuZGVuICZuYnNwOyZuYnNwOyZuYnNwOyA8c3BhbiBpZD1cIiR7cDJMYWJlbFZhbHVlUGxhY2Vob2xkZXJ9XCI+PHNwYW4+PC9wPmApXHJcbiAgICAgICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwgKz1gPHAgY2xhc3M9XCJlaW5nZXJ1Y2t0XCI+TGFiZWwgJzxzcGFuIGNsYXNzPVwibGFiZWxCbHVlXCI+JHtrLmdldE5hbWUoKX08L3NwYW4+JyBpbiBTeW1ib2x0YWJlbGxlIGdlZnVuZGVuICZuYnNwOyZuYnNwOyZuYnNwOyA8c3BhbiBpZD1cIiR7cDJMYWJlbFZhbHVlUGxhY2Vob2xkZXJ9XCI+PHNwYW4+PC9wPmA7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2Nyb2xsKGRlc2NyaXB0aW9uTGluZXMuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbS5zZWFyY2hFbnRyeUluU3ltYm9sdGFibGVwaGFzZVR3byh0aGlzLnN5bWJvbHMuaW5kZXhPZihrKSxrLmdldFBvc2l0aW9uKCkhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBsaW5lQnVmZmVyLnB1c2goYDxwIGNsYXNzPVwiZWluZ2VydWNrdFwiPkxhYmVsICc8c3BhbiBjbGFzcz1cImxhYmVsQmx1ZVwiPiR7ay5nZXROYW1lKCl9PC9zcGFuPicgaW4gU3ltYm9sdGFiZWxsZSBnZWZ1bmRlbiwgV2VydDogJHtNYW5pcHVsYXRvci5oZXhUb0RlYyhrLmdldFBvc2l0aW9uKCkhKStcIiAoXCIray5nZXRQb3NpdGlvbigpIStcIilcIn08L3A+YClcclxuICAgICAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFbGVtLmlubmVySFRNTD1cIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIuZm9yRWFjaChlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MKz1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2Nyb2xsKGRlc2NyaXB0aW9uTGluZXMuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIucHVzaChgPHAgY2xhc3M9XCJlaW5nZXJ1Y2t0XCI+RXJzZXR6dW5nIGltIFNwZWljaGVyYWJiaWxkOiAke3N9LS0+JHtufTwvcD5gKVxyXG4gICAgICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9YDxwIGNsYXNzPVwiZWluZ2VydWNrdFwiPkVyc2V0enVuZyBpbSBTcGVpY2hlcmFiYmlsZDogJHtzfS0tPiR7bn08L3A+YDtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGwoZGVzY3JpcHRpb25MaW5lcy5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwdXNoVHJhbnNsYXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBtYWNoaW5lbmJlZmVobC5pbm5lckhUTUw9IGAke259YDtcclxuICAgICAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0ubW92ZURldGFpbFRvU3BlaWNoZXJhYmJpbGQodGhpcy5nZXRMaW5rZXJBdWZsb2VzdW5nTGluZShlLmdldElkKCksdHJ1ZSksZS5nZXRJZCgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVwdXNoU3BlaWNoZXJhYmJpbGRPZihlLmdldElkKCksdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBsaW5lQnVmZmVyLnB1c2goYDxwPiZuYnNwOzwvcD5gKVxyXG4gICAgICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9YDxwPiZuYnNwOzwvcD5gO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjcm9sbChkZXNjcmlwdGlvbkxpbmVzLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKCFibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZUJ1ZmZlci5mb3JFYWNoKGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwrPWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1cGRhdGVTY3JvbGwoZGVzY3JpcHRpb25MaW5lcy5pZCk7XHJcbiAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY2hlY2tGb3JTa2lwKCkpeyAvL2J1ZmZlclplaXQgZsO8ciBBbmltYXRpb25zVHlwMyBtaXQgc3BlZWQ9PTNcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwRm9yKDQwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHB1c2hMaW5lcz1hc3luYyhpc1NraXBwZWQ6Ym9vbGVhbik9PntcclxuICAgICAgICBsZXQgaW5wdXQ6SW5wdXRMaW5lO1xyXG4gICAgICAgIGxldCBpUDpIVE1MRWxlbWVudDtcclxuICAgICAgICBza2lwcGVkPWlzU2tpcHBlZDtcclxuICAgICAgICBpZih0aGlzLmlucHV0c3RyaW5ncy5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5pbnB1dHN0cmluZ3MubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZUlucHV0U3RyaW5nT2ZJZChpKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW5nSW5mby5pbm5lckhUTUw9YCR7aSsxfS8ke3RoaXMuaW5wdXRzdHJpbmdzLmxlbmd0aH1gO1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5pbnB1dExpbmVzLmxlbmd0aD5pKXtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IHRoaXMuaW5wdXRMaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpUD0gZ2V0SHRtbEVsZW1lbnQoYCR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9aW5wdXRQYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2Nyb2xsT2ZJbl9PdXQoXCJJbnB1dFRleHRcIixgJHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX1pbnB1dFBgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaW5wdXQuZ2V0VHlwZSgpPT1JbnB1dExpbmVUeXBlLkVNUFRZKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5jaGVja0Zvck5vQW5pU3RlcCgpKWF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFuaUNvbnRyb2wuc3RhcnQgJiYgYW5pQ29udHJvbC5zcGVlZDwzICYmIGFuaUNvbnRyb2wuYW5pbWF0aW9uVHlwZSE9QW5pbWF0aW9uc1R5cC5UeXAzKSBhd2FpdCBzbGVlcEZvcigxMjAwLShhbmlDb250cm9sLnNwZWVkKSoyMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNoZWNrRm9yTm9BbmlTdGVwKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hbmltLmFuaW1hdGlvbklucHV0TGluZVRvQ3VycmVudExpbmUoaSx0aGlzLmlucHV0c3RyaW5nc1tpXS5zcGxpdChcIjtcIilbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFBhcnNlSUQ9MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExpbmVMaW5lLmlubmVySFRNTD1gJHtpbnB1dC5nZXRDb21tYW5kTGluZVRvQ3VycmVudExpbmUoKX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnB1c2hEZXNjcmlwdGlvbkxpbmVzT2YoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVwdXNoVHJhbnNsYXRpb25PZihpKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGFuaUNvbnRyb2wuc2luZ2xlU3RlcEZsYWcpIGF3YWl0IHRoaXMucGF1c2UoKTtcclxuICAgICAgICAgICAgICAgIGlmKCFza2lwcGVkKWF3YWl0IGNoZWNrSWZQYXVzZWQoKTtcclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmNoZWNrRm9yU2tpcCgpKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcEZvcigxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZGVzY3JpcHRpb25MaW5lcy5pbm5lckhUTUwgKz0gYDxwIHN0eWxlPVwiIHdoaXRlLXNwYWNlOiBub3dyYXA7IG92ZXJmbG93OiBoaWRkZW47XCI+IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIDwvcD5gO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5saW5rZXJBdWZsb3N1bmdCPXRoaXMuYXVmenVsb3NlbmRlTGFiZWwoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5saW5rZXJBdWZsb3N1bmcoKTtcclxuICAgICAgICAgICAgYXdhaXQgdXBkYXRlU2Nyb2xsKGRlc2NyaXB0aW9uTGluZXMuaWQpO1xyXG4gICAgICAgICAgICBhbmlDb250cm9sLnNldEVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHB1c2hEZXNjcmlwdGlvbkxpbmVzT2Y9YXN5bmMoaTpudW1iZXIpPT57XHJcbiAgICAgICAgbGV0IGU6c3RyaW5nO1xyXG4gICAgICAgIGxldCBzczpzdHJpbmdbXTtcclxuICAgICAgICBsZXQgbDpJbnB1dExpbmU7XHJcbiAgICAgICAgbGV0IG5ld0VsZW06SFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgbGV0IGxpbmVCdWZmZXI6c3RyaW5nW109W107XHJcbiAgICAgICAgbGV0IGJsb2NrQW5pbWF0aW9uOmJvb2xlYW49dGhpcy5jaGVja0Zvck5vQW5pU3RlcCgpO1xyXG4gICAgICAgIGlmKHRoaXMuaW5wdXRMaW5lcy5sZW5ndGg8PWkpe1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCB3YXMgYW4gSUQgb2YgYW4gSW5wdXRsaW5lIHNtYWxsZXIgdGhhbiBcIit0aGlzLmlucHV0TGluZXMubGVuZ3RoK1wiIGJ1dCBnb3QgXCIraSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIG5ld0VsZW0uaWQ9YCR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9RGVzY3JpcHRpb25EaXZgO1xyXG4gICAgICAgIG5ld0VsZW0uY2xhc3NMaXN0LmFkZChcIm5vTVBcIik7XHJcbiAgICAgICAgaWYoIXRoaXMuY2hlY2tGb3JTa2lwKCkpe1xyXG4gICAgICAgICAgICBuZXdFbGVtLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5EZXNjcmlwdGlvbkRpdlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVzY3JpcHRpb25MaW5lcy5hcHBlbmRDaGlsZChuZXdFbGVtKTtcclxuICAgICAgICBsPXRoaXMuaW5wdXRMaW5lc1tpXTtcclxuICAgICAgICBzcz1sLmdldERlc2NyaXB0aW9uTGluZSgpO1xyXG4gICAgICAgIGxpbmVCdWZmZXIucHVzaChgPHAgc3R5bGU9XCIgd2hpdGUtc3BhY2U6IG5vd3JhcDsgb3ZlcmZsb3c6IGhpZGRlbjtcIj4gLS0tLTxzcGFuIGNsYXNzPVwiYm9sZFwiPjwkeyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfT48L3NwYW4+LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIDwvcD5gKTtcclxuICAgICAgICAvLyBuZXdFbGVtLmlubmVySFRNTCArPSBgPHAgc3R5bGU9XCIgd2hpdGUtc3BhY2U6IG5vd3JhcDsgb3ZlcmZsb3c6IGhpZGRlbjtcIj4gLS0tLTxzcGFuIGNsYXNzPVwiYm9sZFwiPjwkeyhpKzEpPDEwP1wiMFwiKyhpKzEpOihpKzEpfT48L3NwYW4+LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIDwvcD5gO1xyXG4gICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgbmV3RWxlbS5pbm5lckhUTUwgKz0gYDxwIHN0eWxlPVwiIHdoaXRlLXNwYWNlOiBub3dyYXA7IG92ZXJmbG93OiBoaWRkZW47XCI+IC0tLS08c3BhbiBjbGFzcz1cImJvbGRcIj48JHsoaSsxKTwxMD9cIjBcIisoaSsxKTooaSsxKX0+PC9zcGFuPi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSA8L3A+YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yKGxldCBqPTA7ajxzcy5sZW5ndGg7aisrKXtcclxuICAgICAgICAgICAgZT1zc1tqXVxyXG4gICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihlLmluY2x1ZGVzKFwicGFyc2VcIikpe1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5uZXh0SW52ZXJ0ZWQobC5nZXRBbGxWKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGUuaW5jbHVkZXMoJ2Vycm9yJykpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBoYXMgYmVlbiBmb3VuZFwiKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubmV4dEludmVydGVkKGwuZ2V0QWxsVigpKTtcclxuICAgICAgICAgICAgICAgIGFuaUNvbnRyb2wuc2V0U3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgbGluZUJ1ZmZlci5wdXNoKGA8cD4ke2V9PC9wPmApO1xyXG4gICAgICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9IGA8cD4ke2V9PC9wPmA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIuZm9yRWFjaChlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFkZENsYXNzVG8oXCJjckVycm9yXCIsXCJia0Vycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlU2Nyb2xsKGRlc2NyaXB0aW9uTGluZXMuaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1N0b3AgcHJlc3NlZCcpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGxpbmVCdWZmZXIucHVzaChgPHA+JHtlfTwvcD5gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9IGA8cD4ke2V9PC9wPmA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGwoZGVzY3JpcHRpb25MaW5lcy5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoZS5pbmNsdWRlcyhcImdlZnVuZGVuOiBEb3BwZWxwdW5rdFwiKSl7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKGJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0ubW92ZUxhYmVsdG9TeW1ib2x0YWJsZUFMVE1vdmVhYmxlKGwuZ2V0TGFiZWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZVB1c2hMYXN0U3ltYm9sRW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0ubW92ZUxhYmVsdG9TeW1ib2x0YWJsZUFMVE1vdmVhYmxlSGVscGVyKHRoaXMuc3ltYm9sTGlzdC5nZXRQb3NpdGlvbk9mU3BlY2lmaWNMYWJlbChsLmdldExhYmVsKCkpISk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMucmVQdXNoU3ltYm9scygpOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihqLTE+MCl7XHJcbiAgICAgICAgICAgICAgICBpZihzc1tqLTFdLmluY2x1ZGVzKFwiZ2VzYW10ZXJcIikpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGwuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09XCJPUkdcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMucHVzaFRyYW5zbGF0aW9uT2YoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwdXNoU3BlaWNoZXJhYmJpbGRPZihpLGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihsLmdldEVuZEFkZHIoKSE9XCJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hY2hpbmVuYmVmZWhsLmlubmVySFRNTD0gYCR7dGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQobCxmYWxzZSl9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFjaGluZW5iZWZlaGwuaW5uZXJIVE1MPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke01hbmlwdWxhdG9yLmZvcm1hdFNwZWljaGVyYWJiaWxkYW5kTGFiZWwodGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQobCxmYWxzZSksdGhpcy5nZXRMYWJlbElmVW5rbm93bihsLmdldElkKCksZmFsc2UpKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbS5tb3ZlRGV0YWlsVG9TcGVpY2hlcmFiYmlsZCh0aGlzLmdldExpbmtlckF1ZmxvZXN1bmdMaW5lKGksZmFsc2UpLGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMucHVzaFRyYW5zbGF0aW9uT2YoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwdXNoU3BlaWNoZXJhYmJpbGRPZihpLGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIWJsb2NrQW5pbWF0aW9uKXtcclxuICAgICAgICAgICAgbGluZUJ1ZmZlci5mb3JFYWNoKGU9PntcclxuICAgICAgICAgICAgICAgIG5ld0VsZW0uaW5uZXJIVE1MICs9ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuc3ltYm9sTGlzdC5pc0NvbnN0KGwuZ2V0Rmlyc3RQYXJ0KCkpKXtcclxuICAgICAgICAgICAgaWYoYmxvY2tBbmltYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2xlZXBVbnRpbE5leHRTdGVwKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0ubW92ZUNvbnN0VG9TeW1ib2xUYWJsZSh0aGlzLnN5bWJvbExpc3QuZ2V0U3BlY2lmaWNDb25zdGFudEJ5TmFtZShsLmdldEZpcnN0UGFydCgpKSEudG9TdHJpbmd0b01vdmFibGUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZVB1c2hTeW1ib2xzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVwdXNoU3BlaWNoZXJhYmJpbGRPZihpLGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihsLmdldFR5cGUoKT09SW5wdXRMaW5lVHlwZS5QU0VVRE9UUkFOU0xBVEVEKXtcclxuICAgICAgICAgICAgdGhpcy5yZXB1c2hTcGVpY2hlcmFiYmlsZE9mKGksZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcFVudGlsTmV4dFN0ZXAoKTtcclxuICAgICAgICAgICAgICAgIGlmKGwuZ2V0Rmlyc3RQYXJ0KCkudG9VcHBlckNhc2UoKT09XCJPUkdcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ5ZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG0gPSBsLmdldFNlY29uZFBhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnN5bWJvbExpc3QuaXNDb25zdChsLmdldFNlY29uZFBhcnQoKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gdGhpcy5zeW1ib2xMaXN0LmdldFNwZWNpZmljQ29uc3RhbnRCeU5hbWUobC5nZXRTZWNvbmRQYXJ0KCkpIS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW0uZGlzcGxheUFkZHJlc3NlcmhvZWh1bmcobC5nZXRJZCgpLG0sXCI9XCIsbC5nZXRFbmRBZGRyKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBhd2FpdCB0aGlzLmFuaW0uZGlzcGxheUFkZHJlc3NlcmhvZWh1bmcobC5nZXRJZCgpLFN0cmluZyhsLmdldExlbmd0aCgpKSxcIitcIixsLmdldEVuZEFkZHIoKSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhZGRyZXNzemFobGVyLmlubmVySFRNTD0gYCR7TWFuaXB1bGF0b3IuZm9ybWF0SGV4dG9EYXQxNihsLmdldEVuZEFkZHIoKSl9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5jaGVja0ZvclNraXAoKSl7IC8vYnVmZmVyWmVpdCBmw7xyIEFuaW1hdGlvbnNUeXAzIG1pdCBzcGVlZD09M1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcEZvcigzMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihibG9ja0FuaW1hdGlvbil7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwVW50aWxOZXh0U3RlcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVtb3ZlQ2xhc3NPZkFsbChcImNySW52ZXJ0XCIpO1xyXG5cclxuICAgICAgICBsLmZvcm1hdElucHV0VG9EaXNwbGF5KCk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoSW5wdXRMaXN0SXRlbShpKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNsZWFyTWFjaGluZW5iZWZlaGxhbmRDdXJyZW50TGluZSgpO1xyXG5cclxuICAgICAgICB1cGRhdGVTY3JvbGwoZGVzY3JpcHRpb25MaW5lcy5pZCk7XHJcbiAgICAgICAgZ2V0SHRtbEVsZW1lbnQoYCR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9aW5wdXRQYCkub25jbGljaz0oKGU6TW91c2VFdmVudCk9PntcclxuICAgICAgICAgICAgaWYoIWFuaUNvbnRyb2wucGxheSl7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTY3JvbGxPZkRlc2NyaXB0aW9uTGluZXMoYCR7KGkrMSk8MTA/XCIwXCIrKGkrMSk6KGkrMSl9RGVzY3JpcHRpb25EaXZgLGRlc2NyaXB0aW9uTGluZXMuaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldExhYmVsSWZVbmtub3duKGk6bnVtYmVyLGI6Ym9vbGVhbik6c3RyaW5ne1xyXG4gICAgICAgIGxldCBlOklucHV0TGluZTtcclxuXHJcbiAgICAgICAgbGV0IGFkZHI6c3RyaW5nLHNwYTpzdHJpbmcsbDpzdHJpbmc9XCJcIjtcclxuICAgICAgICBpZihpPHRoaXMuaW5wdXRMaW5lcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICBlID0gdGhpcy5pbnB1dExpbmVzW2ldO1xyXG4gICAgICAgICAgICBzcGEgPSB0aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0RGlzcGxheWFibGVTcGVpY2hlcmFiYmlsZChlLGIpO1xyXG4gICAgICAgICAgICBpZihzcGEuaW5jbHVkZXMoXCI/P1wiKSl7XHJcbiAgICAgICAgICAgICAgICBpZihlLmhhc09mZnNldExhYmVsKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGwgPSBcIihcIitlLmdldExhYmVsT2ZPZmZzZXQoKStcIilcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYodGhpcy5zeW1ib2xMaXN0LmlzTGFiZWwoZS5nZXRTZWNvbmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICBsID0gXCIoXCIrZS5nZXRTZWNvbmRQYXJ0KCkrXCIpXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sTGlzdC5pc0xhYmVsKGUuZ2V0VGhpcmRQYXJ0KCkpKXtcclxuICAgICAgICAgICAgICAgICAgICBsID0gXCIoXCIrZS5nZXRUaGlyZFBhcnQoKStcIilcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbDtcclxuICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRMaW5rZXJBdWZsb2VzdW5nTGluZShpOm51bWJlcixiOmJvb2xlYW4pOnN0cmluZ3tcclxuICAgICAgICBsZXQgZTpJbnB1dExpbmU7XHJcbiAgICAgICAgbGV0IGFkZHI6c3RyaW5nLHNwYTpzdHJpbmcsbDpzdHJpbmc9XCJcIjtcclxuICAgICAgICBpZihpPHRoaXMuaW5wdXRMaW5lcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICBlID0gdGhpcy5pbnB1dExpbmVzW2ldO1xyXG4gICAgICAgICAgICBhZGRyID0gZS5nZXRTdGFydGluZ0FkZHIoKTtcclxuICAgICAgICAgICAgc3BhID0gdGhpcy5pbnB1dExpbmVDb250cm9sLmdldERpc3BsYXlhYmxlU3BlaWNoZXJhYmJpbGQoZSxiKTtcclxuICAgICAgICAgICAgaWYoc3BhLmluY2x1ZGVzKFwiPz9cIikpe1xyXG4gICAgICAgICAgICAgICAgaWYoZS5oYXNPZmZzZXRMYWJlbCgpKXtcclxuICAgICAgICAgICAgICAgICAgICBsID0gXCIoXCIrZS5nZXRMYWJlbE9mT2Zmc2V0KCkrXCIpXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKHRoaXMuc3ltYm9sTGlzdC5pc0xhYmVsKGUuZ2V0U2Vjb25kUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgbCA9IFwiKFwiK2UuZ2V0U2Vjb25kUGFydCgpK1wiKVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZih0aGlzLnN5bWJvbExpc3QuaXNMYWJlbChlLmdldFRoaXJkUGFydCgpKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgbCA9IFwiKFwiK2UuZ2V0VGhpcmRQYXJ0KCkrXCIpXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFkZHIrXCI6IFwiK3NwYStcIiBcIitsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIHByaXZhdGUgYXVmenVsb3NlbmRlTGFiZWw9KCk6Ym9vbGVhbj0+e1xyXG4gICAgICAgIGxldCBiPWZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW5wdXRMaW5lcy5mb3JFYWNoKGU9PntcclxuICAgICAgICAgICAgaWYoZS5nZXRUcmFuc2xhdGlvbigpLmluY2x1ZGVzKFwiPz8/P1wiKSl7XHJcbiAgICAgICAgICAgICAgICBiPXRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoZS5oYXNPZmZzZXRMYWJlbCgpKXtcclxuICAgICAgICAgICAgICAgIGI9dHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBiO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVJbnB1dFN0cmluZ09mSWQ9KG46bnVtYmVyKTpib29sZWFuPT57XHJcbiAgICAgICAgaWYobjx0aGlzLmlucHV0c3RyaW5ncy5sZW5ndGgpe1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0TGluZUNvbnRyb2wuYWRkSW5wdXRMaW5lKHRoaXMuaW5wdXRzdHJpbmdzW25dKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoSW5wdXRMaW5lcygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG5leHRJbnZlcnRlZD1hc3luYyAobjpudW1iZXJbXSk9PntcclxuICAgICAgICBpZih0aGlzLmNoZWNrRm9yTm9BbmlTdGVwKCkpe1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcEZvcigzMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvcih0aGlzLm5leHRQYXJzZUlEO3RoaXMubmV4dFBhcnNlSUQ8bi5sZW5ndGg7dGhpcy5uZXh0UGFyc2VJRCsrKXtcclxuICAgICAgICAgICAgaWYoblt0aGlzLm5leHRQYXJzZUlEXT09MSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaEludmVydGVkVG8odGhpcy5uZXh0UGFyc2VJRClcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dFBhcnNlSUQrPTE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3dpdGNoSW52ZXJ0ZWRUbz0objpudW1iZXIpPT57XHJcbiAgICAgICBzd2l0Y2gobil7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzT2ZBbGwoXCJjckludmVydFwiKTtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzVG8oXCJjckxhYmVsXCIsXCJjckludmVydFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc09mQWxsKFwiY3JJbnZlcnRcIik7XHJcbiAgICAgICAgICAgICAgICBhZGRDbGFzc1RvKFwiY3JGaXJzdFwiLFwiY3JJbnZlcnRcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzT2ZBbGwoXCJjckludmVydFwiKTtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzVG8oXCJjclNlY29uZFwiLFwiY3JJbnZlcnRcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NPZkFsbChcImNySW52ZXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NUbyhcImNyVGhpcmRcIixcImNySW52ZXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzT2ZBbGwoXCJjckludmVydFwiKTtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzVG8oXCJjckVycm9yXCIsXCJjckludmVydFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNoZWNrRm9yU2tpcCgpOmJvb2xlYW57XHJcbiAgICAgICAgaWYoc2tpcHBlZClyZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuICEoYW5pQ29udHJvbC5zcGVlZD09NCAmJiBhbmlDb250cm9sLmlzQW5pMygpKVxyXG4gICAgfVxyXG4gICAgY2hlY2tGb3JOb0FuaVN0ZXAoKTpib29sZWFue1xyXG4gICAgICAgIGlmKHNraXBwZWQpcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiAhKGFuaUNvbnRyb2wuc3BlZWQ+PTMgJiYgYW5pQ29udHJvbC5pc0FuaTMoKSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBjbGVhck1hY2hpbmVuYmVmZWhsYW5kQ3VycmVudExpbmUoKXtcclxuICAgICAgICBtYWNoaW5lbmJlZmVobC5pbm5lckhUTUw9XCImbmJzcDtcIjtcclxuICAgICAgICBjdXJyZW50TGluZUxpbmUuaW5uZXJIVE1MPVwiJm5ic3A7XCI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhcnRQbGF5aW5nPWFzeW5jKCk9PntcclxuICAgICAgICBpZihhbmlDb250cm9sLnN0b3AgfHwgYW5pQ29udHJvbC5yZXNldCB8fCBhbmlDb250cm9sLmVuZCkgdGhyb3cgbmV3IEVycm9yKFwiUmVzZXQgd2FzIHByZXNzZXIgcmVjZW50bHkhXCIpO1xyXG4gICAgICAgIGlmKHRoaXMuaW5wdXRzdHJpbmdzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgbGV0IGRhdGUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnB1c2hMaW5lcyhmYWxzZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xlYXJNYWNoaW5lbmJlZmVobGFuZEN1cnJlbnRMaW5lKCk7XHJcbiAgICAgICAgICAgIGFuaUNvbnRyb2wuc2V0RW5kKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKERhdGUubm93KCktZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gSW5wdXRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIHRvZ2dsZVN0b3A9YXN5bmMoKT0+e1xyXG4gICAgICAgIGlmKHRoaXMuaW5wdXRzdHJpbmdzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihhbmlDb250cm9sLmVuZCB8fCBhbmlDb250cm9sLnN0b3Ape1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0b3AgaGFzIGJlZW4gcHJlc3NlZCBvciBhbmltYXRpb24gRmluaXNoZWQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKGFuaUNvbnRyb2wucmVzZXQpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldhaXRpbmcgdW50aWwgcmVzZXQgaXMgZmluaXNoZWQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKCFhbmlDb250cm9sLnN0YXJ0KXtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBhbmlDb250cm9sLnNldFN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdGFydFBsYXlpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoYW5pQ29udHJvbC5wbGF5KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYW5pQ29udHJvbC5zZXRQYXVzZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgYW5pQ29udHJvbC5zZXRQbGF5aW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIElucHV0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGF1c2U9KCk9PntcclxuICAgICAgICBhbmlDb250cm9sLnNldFBhdXNlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzcGVlZD0oKT0+e1xyXG4gICAgICAgIHRoaXMuYW5pbS5nZXRTdGF0aWNCb2R5V2lkdGgoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVzZXQ9YXN5bmMoKT0+e1xyXG4gICAgICAgIGlmKCFhbmlDb250cm9sLnJlc2V0KXtcclxuICAgICAgICAgICAgYW5pQ29udHJvbC5zZXRSZXNldCgpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBhcnRpYWxSZXNldCgpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2hJbnB1dExpc3RJdGVtcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzcGxheUlucHV0TGluZXM9YXN5bmMoKT0+eyAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgdGhpcy5wYXJ0aWFsUmVzZXQoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlZnJlc2hJbnB1dExpc3RJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldElucHV0U3RyaW5ncz0oczpzdHJpbmdbXSk9PntcclxuICAgICAgICB0aGlzLmlucHV0c3RyaW5ncz1zO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2hJbnB1dFN0cmluZ3M9KHM6c3RyaW5nW10pPT57XHJcbiAgICAgICAgdGhpcy5pbnB1dHN0cmluZ3M9cztcclxuICAgIH1cclxuICAgIHB1YmxpYyByZWZyZXNoSW5wdXRMaW5lcz0oKT0+e1xyXG4gICAgICAgIHRoaXMuaW5wdXRMaW5lcz10aGlzLmlucHV0TGluZUNvbnRyb2wuZ2V0SW5wdXRMaW5lcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvcGVuT3V0cHV0V2luZG93ID0oKT0+e1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgYW5pQ29udHJvbC5zZXRQYXVzZWQoKTtcclxuICAgICAgICAgICAgbGV0IGIgPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG91dHB1dHdpbmRvd0NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIGlmKGIuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpPT1cImhpZGRlblwiKXtcclxuICAgICAgICAgICAgICAgIG91dHB1dHdpbmRvd0NvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXR3aW5kb3dDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfWNhdGNoKGUpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY3JlYXRlTGlzdGVuZXJzPSgpPT57XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICB0aGlzLmlXaW5kb3cuY3JlYXRlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICAgICAgLy8gY3JlYXRlQ2xpY2tMaXN0ZW5lcigndGVzdEJ1dHRvbicsdGhpcy50ZXN0Q3ljbGluZyk7XHJcbiAgICAgICAgICAgIGNyZWF0ZUNsaWNrTGlzdGVuZXIoJ0Nsb3NlT3V0cHV0V2luZG93Jyx0aGlzLm9wZW5PdXRwdXRXaW5kb3cpO1xyXG4gICAgICAgICAgICBjcmVhdGVDbGlja0xpc3RlbmVyKCdUcmFuc2xhdGVXaW5kb3cnLHRoaXMub3Blbk91dHB1dFdpbmRvdyk7XHJcbiAgICAgICAgICAgIGNyZWF0ZUNsaWNrTGlzdGVuZXIoJ3BsYXknLHRoaXMudG9nZ2xlU3RvcCk7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZUNsaWNrTGlzdGVuZXIoJ3N0b3AnLHRoaXMucGF1c2UpO1xyXG4gICAgICAgICAgICBjcmVhdGVDbGlja0xpc3RlbmVyKCdzcGVlZCcsc2V0VHJhbnNsYXRpbmdEaXZWaXNpYmxlKTtcclxuICAgICAgICAgICAgLy8gY3JlYXRlQ2xpY2tMaXN0ZW5lcignc2tpcCcsdGhpcy5za2lwVG9GaW5pc2gpO1xyXG4gICAgICAgICAgICBjcmVhdGVDbGlja0xpc3RlbmVyKCdyZXNldCcsdGhpcy5yZXNldCk7XHJcbiAgICAgICAgICAgIGFuaUNvbnRyb2wuY3JlYXRlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICAgICAgLy8gY3JlYXRlQ2xpY2tMaXN0ZW5lcihJbnB1dElELmlkLHNldFNjcm9sbGJhck9mRGVzY3JpcHRpb25MaW5lKTtcclxuICAgICAgICB9Y2F0Y2goZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0gXHJcblxyXG59IiwiaW1wb3J0IHsgSW5wdXRMaW5lcywgT3V0cHV0VGV4dEFyZWFFbGVtZW50LCBPdXRwdXRXaW5kb3dNYWNoaW5lQ29kZSwgUHJvamVjdFdpbmRvdyB9IGZyb20gXCIuL1Byb2plY3RXaW5kb3dcIjtcclxuaW1wb3J0IHsgYWRkQ2xhc3NUbywgY3JlYXRlQ2xpY2tMaXN0ZW5lciwgZ2V0SHRtbEVsZW1lbnQsIGdldElET2ZTZWxlY3RlZCwgcmVtb3ZlQ2xhc3NPZkFsbCB9IGZyb20gXCIuL1Rvb2xzXCI7XHJcbmltcG9ydCB7IGFuaUNvbnRyb2wsIHNsZWVwRm9yIH0gZnJvbSBcIi4vQW5pbWF0aW9uVXRpbFwiO1xyXG5pbXBvcnQgeyBpbnB1dFRleHQsIG91dHB1dFRleHQgfSBmcm9tIFwiLi9Qcm9qZWN0V2luZG93XCI7XHJcbmltcG9ydCB7IE1hbmlwdWxhdG9yIH0gZnJvbSBcIi4vQmFja2VuZC9NYW5pcHVsYXRvclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uc2Nyb2xsSW5fT3V0ID0gKCkgPT57XHJcbiAgICAvKiBsZXQgaW5wdXRUZXh0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIklucHV0VGV4dFwiKTtcclxuICAgIGxldCBvdXRwdXRUZXh0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIk91dHB1dFRleHRcIik7ICovXHJcbiAgICB2YXIgaWdub3JlU2Nyb2xsRXZlbnRzID0gZmFsc2VcclxuICAgIHRyeXtcclxuICAgICAgICBpZihpbnB1dFRleHQhPW51bGwgJiYgb3V0cHV0VGV4dCE9bnVsbCl7XHJcbiAgICAgICAgICAgIGlucHV0VGV4dC5vbnNjcm9sbCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBpZihhbmlDb250cm9sLnBsYXkpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBpZ25vcmUgPSBpZ25vcmVTY3JvbGxFdmVudHNcclxuICAgICAgICAgICAgICAgIGlnbm9yZVNjcm9sbEV2ZW50cyA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlKSByZXR1cm5cclxuXHJcbiAgICAgICAgICAgICAgICBpZ25vcmVTY3JvbGxFdmVudHMgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICBpZihpbnB1dFRleHQhPW51bGwgJiYgb3V0cHV0VGV4dCE9bnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0VGV4dC5zY3JvbGxUb3A9aW5wdXRUZXh0LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXRUZXh0Lm9uc2Nyb2xsID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAvLyBpZihpbnB1dFRleHQhPW51bGwgJiYgb3V0cHV0VGV4dCE9bnVsbCYmIWFuaUNvbnRyb2wucGxheSl7XHJcbiAgICAgICAgICAgICAgICBpZihhbmlDb250cm9sLnBsYXkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlID0gaWdub3JlU2Nyb2xsRXZlbnRzXHJcbiAgICAgICAgICAgICAgICBpZ25vcmVTY3JvbGxFdmVudHMgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZSkgcmV0dXJuXHJcblxyXG4gICAgICAgICAgICAgICAgaWdub3JlU2Nyb2xsRXZlbnRzID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgaWYoaW5wdXRUZXh0IT1udWxsICYmIG91dHB1dFRleHQhPW51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIGlmKGlucHV0VGV4dC5zY3JvbGxUb3A+b3V0cHV0VGV4dC5zY3JvbGxUb3AgJiYgaW5wdXRUZXh0LnNjcm9sbFRvcCtpbnB1dFRleHQuY2xpZW50SGVpZ2h0Pm91dHB1dFRleHQuc2Nyb2xsSGVpZ2h0KXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0VGV4dC5zY3JvbGxUb3A9b3V0cHV0VGV4dC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IElucHV0VGV4dCBvZGVyIE91dHB1dFRleHQgaXN0IG51bGwhXCIpO1xyXG4gICAgXHJcbiAgICB9Y2F0Y2goZSl7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCByb290VmFyaWFibGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShyb290KTtcclxuZXhwb3J0IGxldCBjb250ZW50bG9hZGVkOmJvb2xlYW49IGZhbHNlO1xyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgRG9jdW1lbnQge1xyXG4gICAgICBtb3pDYW5jZWxGdWxsU2NyZWVuPzogKCkgPT4gUHJvbWlzZTx2b2lkPjtcclxuICAgICAgbXNFeGl0RnVsbHNjcmVlbj86ICgpID0+IFByb21pc2U8dm9pZD47XHJcbiAgICAgIHdlYmtpdEV4aXRGdWxsc2NyZWVuPzogKCkgPT4gUHJvbWlzZTx2b2lkPjtcclxuICAgICAgbW96RnVsbFNjcmVlbkVsZW1lbnQ/OiBFbGVtZW50O1xyXG4gICAgICBtc0Z1bGxzY3JlZW5FbGVtZW50PzogRWxlbWVudDtcclxuICAgICAgd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ/OiBFbGVtZW50O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50IHtcclxuICAgICAgbXNSZXF1ZXN0RnVsbHNjcmVlbj86ICgpID0+IFByb21pc2U8dm9pZD47XHJcbiAgICAgIG1velJlcXVlc3RGdWxsc2NyZWVuPzogKCkgPT4gUHJvbWlzZTx2b2lkPjtcclxuICAgICAgd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4/OiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHN3aXRjaFRvRnVsbHNjcmVlbj0oKT0+e1xyXG4gICAgdmFyIGVsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICBjb25zdCBlbGVtMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidm9sbGJpbGRcIik7XHJcbiAgICBpZihlbGVtIT1udWxsICYmIGVsZW0yICE9bnVsbCl7XHJcbiAgICAgICAgaWYoIWZ1bGxzY3JlZW5lZCl7XHJcbiAgICAgICAgICAgIGlmIChlbGVtLnJlcXVlc3RGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtLnJlcXVlc3RGdWxsc2NyZWVuKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikgeyAvKiBTYWZhcmkgKi9cclxuICAgICAgICAgICAgICAgIGVsZW0ud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtLm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHsgLyogSUUxMSAqL1xyXG4gICAgICAgICAgICAgICAgZWxlbS5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxlbTIuc2V0QXR0cmlidXRlKFwiZnVsbHNjcmVlblwiLFwib25cIik7XHJcbiAgICAgICAgICAgIGZ1bGxzY3JlZW5lZCA9dHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbGVtMi5zZXRBdHRyaWJ1dGUoXCJmdWxsc2NyZWVuXCIsXCJvZmZcIik7XHJcbiAgICAgICAgICAgIGZ1bGxzY3JlZW5lZD1mYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiBcclxuICAgIGZ1bmN0aW9uIHRvZ2dsZUZ1bGxTY3JlZW4oKSB7XHJcbiAgICAgICAgdmFyIGRvYyA9IHdpbmRvdy5kb2N1bWVudDtcclxuICAgICAgICB2YXIgZG9jRWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuICAgICAgICB2YXIgcmVxdWVzdEZ1bGxTY3JlZW4gPVxyXG4gICAgICAgICAgICBkb2NFbC5yZXF1ZXN0RnVsbHNjcmVlbiB8fFxyXG4gICAgICAgICAgICBkb2NFbC5tb3pSZXF1ZXN0RnVsbFNjcmVlbiB8fFxyXG4gICAgICAgICAgICBkb2NFbC53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbiB8fFxyXG4gICAgICAgICAgICBkb2NFbC5tc1JlcXVlc3RGdWxsc2NyZWVuO1xyXG4gICAgICAgIHZhciBjYW5jZWxGdWxsU2NyZWVuID1cclxuICAgICAgICAgICAgZG9jLmV4aXRGdWxsc2NyZWVuIHx8XHJcbiAgICAgICAgICAgIGRvYy5tb3pDYW5jZWxGdWxsU2NyZWVuIHx8XHJcbiAgICAgICAgICAgIGRvYy53ZWJraXRFeGl0RnVsbHNjcmVlbiB8fFxyXG4gICAgICAgICAgICBkb2MubXNFeGl0RnVsbHNjcmVlbjtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhZG9jLmZ1bGxzY3JlZW5FbGVtZW50ICYmXHJcbiAgICAgICAgICAgICFkb2MubW96RnVsbFNjcmVlbkVsZW1lbnQgJiZcclxuICAgICAgICAgICAgIWRvYy53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCAmJlxyXG4gICAgICAgICAgICAhZG9jLm1zRnVsbHNjcmVlbkVsZW1lbnRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmVxdWVzdEZ1bGxTY3JlZW4uY2FsbChkb2NFbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FuY2VsRnVsbFNjcmVlbi5jYWxsKGRvYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgKi9cclxufVxyXG5jb25zdCBjb25zb2xlV2luZG93c2l6ZT0oKT0+e1xyXG4gICAgY29uc29sZS5sb2coXCJJbm5lcndpZHRoOiBcIit3aW5kb3cuaW5uZXJXaWR0aCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIklubmVyaGVpZ2h0OiBcIit3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiT3V0ZXJ3aWR0aDogXCIrd2luZG93Lm91dGVyV2lkdGgpO1xyXG4gICAgY29uc29sZS5sb2coXCJPdXRlcmhlaWdodDogXCIrd2luZG93Lm91dGVySGVpZ2h0KTtcclxuXHJcbn1cclxuY29uc3Qgb3V0cHV0Q2xpcCA9ICgpID0+e1xyXG4gICAgdmFyIGNvcHlUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJPdXRwdXRUZXh0QXJlYVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgaWYoY29weVRleHQhPW51bGwpe1xyXG4gICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvcHlUZXh0LnZhbHVlKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBzeW5jU2Nyb2xsX01hY2hpbmVDb2RlX0hleGFkZWNpbWFsID0gKCkgPT57XHJcbiAgICB2YXIgaWdub3JlU2Nyb2xsRXZlbnRzMiA9IGZhbHNlO1xyXG4gICAgLy8gY29uc29sZS5sb2coT3V0cHV0V2luZG93TWFjaGluZUNvZGUuc2Nyb2xsVG9wKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKE91dHB1dFRleHRBcmVhRWxlbWVudC5zY3JvbGxUb3ApO1xyXG4gICAgdHJ5e1xyXG4gICAgICAgIGlmKE91dHB1dFdpbmRvd01hY2hpbmVDb2RlIT1udWxsICYmIE91dHB1dFRleHRBcmVhRWxlbWVudCE9bnVsbCl7XHJcbiAgICAgICAgICAgIE91dHB1dFdpbmRvd01hY2hpbmVDb2RlLm9uc2Nyb2xsID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBpZ25vcmUgPSBpZ25vcmVTY3JvbGxFdmVudHMyXHJcbiAgICAgICAgICAgICAgICBpZ25vcmVTY3JvbGxFdmVudHMyID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmUpIHJldHVyblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZ25vcmVTY3JvbGxFdmVudHMyID0gdHJ1ZSBcclxuICAgICAgICAgICAgICAgIE91dHB1dFRleHRBcmVhRWxlbWVudC5zY3JvbGxUb3A9T3V0cHV0V2luZG93TWFjaGluZUNvZGUuc2Nyb2xsVG9wO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPdXRwdXRUZXh0QXJlYUVsZW1lbnQub25zY3JvbGwgPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHZhciBpZ25vcmUgPSBpZ25vcmVTY3JvbGxFdmVudHMyXHJcbiAgICAgICAgICAgICAgICBpZ25vcmVTY3JvbGxFdmVudHMyID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmUpIHJldHVyblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZ25vcmVTY3JvbGxFdmVudHMyID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgT3V0cHV0V2luZG93TWFjaGluZUNvZGUuc2Nyb2xsVG9wPU91dHB1dFRleHRBcmVhRWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IE91dHB1dFdpbmRvd01hY2hpbmVDb2RlIG9kZXIgT3V0cHV0VGV4dEFyZWFFbGVtZW50IGlzdCBudWxsIVwiKTtcclxuICAgIFxyXG4gICAgfWNhdGNoKGUpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCBzZXRDdXJyZW50bHlIb3ZlcmVkID0gYXN5bmMgKGU6IGFueSkgPT57IC8vRXZlbnRidWJibGluZyBpcyBmLWluZyBzaWNrIVxyXG4gICAgbGV0IGlkOnN0cmluZztcclxuICAgIGlmKGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xyXG4gICAgICAgIHJlbW92ZUNsYXNzT2ZBbGwoXCJoaWdobGlnaHRlZFwiKTtcclxuICAgICAgICBpZD1nZXRJRE9mU2VsZWN0ZWQoZS50YXJnZXQuaWQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGlkKTtcclxuICAgICAgICBhZGRDbGFzc1RvKGlkK1wiaW5wdXRQXCIsXCJoaWdobGlnaHRlZFwiKTtcclxuICAgICAgICBhZGRDbGFzc1RvKGlkK1wib3V0cHV0UFwiLFwiaGlnaGxpZ2h0ZWRcIik7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICAvKiBpZihlIGluc3RhbmNlb2YgUG9pbnRlckV2ZW50KXtcclxuICAgIH0gKi9cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuY29uc3QgY2hhbmdlVGhlbWUgPSAoKSA9PntcclxuICAgIGxldCB0aGVtZTpzdHJpbmcgPSBwcmVmZXJlZFRoZW1lPT09XCJsaWdodFwiID8gJ2RhcmsnIDogJ2xpZ2h0JztcclxuICAgIHByZWZlcmVkVGhlbWUgPSB0aGVtZTtcclxuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6cm9vdCcpO1xyXG4gICAgcm9vdCEuc2V0QXR0cmlidXRlKCdjb2xvci1zY2hlbWUnLCBgJHt0aGVtZX1gKTtcclxuICAgIFxyXG59XHJcblxyXG5sZXQgcHJlZmVyZWRUaGVtZSA9IFwibGlnaHRcIjtcclxubGV0IGZ1bGxzY3JlZW5lZDpib29sZWFuID0gZmFsc2U7XHJcblxyXG5sZXQgcCA9IG5ldyBQcm9qZWN0V2luZG93KCk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGFzeW5jKCkgPT57XHJcbiAgICBjb25zdCByb290MSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJzpyb290Jyk7XHJcbiAgICByb290MSEuc2V0QXR0cmlidXRlKCdjb2xvci1zY2hlbWUnLCBgJHtwcmVmZXJlZFRoZW1lfWApO1xyXG4gICAgY29udGVudGxvYWRlZD10cnVlO1xyXG4gICAgYW5pQ29udHJvbC5zZXRMb2FkZWQodHJ1ZSk7XHJcbn0pXHJcbmNvbnN0IHRlc3RCaW5Ub0hleD0oKT0+e1xyXG4gICAgbGV0IHNzOnN0cmluZ1tdPVtcclxuICAgICAgICBNYW5pcHVsYXRvci5iaW5Ub0hleChcIjExMTFcIiksXHJcbiAgICAgICAgTWFuaXB1bGF0b3IuYmluVG9IZXgoXCIwMTExMVwiKSxcclxuICAgICAgICBNYW5pcHVsYXRvci5iaW5Ub0hleChcIjAwMTExMVwiKSxcclxuICAgICAgICBNYW5pcHVsYXRvci5iaW5Ub0hleChcIjAwMTExMVwiKSxcclxuICAgICAgICBNYW5pcHVsYXRvci5iaW5Ub0hleChcIjAwMDExMTFcIiksXHJcbiAgICAgICAgTWFuaXB1bGF0b3IuYmluVG9IZXgoXCIwMDAwMTExMVwiKSxcclxuICAgICAgICBNYW5pcHVsYXRvci5iaW5Ub0hleChcIjAwMDAwMTExMVwiKVxyXG4gICAgXTtcclxuICAgIHNzLmZvckVhY2goZT0+Y29uc29sZS5sb2coZSkpO1xyXG59XHJcbmNvbnN0ICBtYWluID1hc3luYyAoKT0+e1xyXG4gICAgcC5jcmVhdGVMaXN0ZW5lcnMoKTtcclxuICAgIG9uc2Nyb2xsSW5fT3V0KCk7XHJcbiAgICBjcmVhdGVDbGlja0xpc3RlbmVyKFwiSW5wdXRMaW5lc1wiLHNldEN1cnJlbnRseUhvdmVyZWQpO1xyXG4gICAgSW5wdXRMaW5lcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHNldEN1cnJlbnRseUhvdmVyZWQpO1xyXG4gICAgY3JlYXRlQ2xpY2tMaXN0ZW5lcihcImxpZ2h0XCIsY2hhbmdlVGhlbWUpO1xyXG4gICAgY3JlYXRlQ2xpY2tMaXN0ZW5lcihcIk91dHB1dENsaXBcIixvdXRwdXRDbGlwKTtcclxuICAgIHN5bmNTY3JvbGxfTWFjaGluZUNvZGVfSGV4YWRlY2ltYWwoKTtcclxuICAgIGNyZWF0ZUNsaWNrTGlzdGVuZXIoXCJ2b2xsYmlsZFwiLHN3aXRjaFRvRnVsbHNjcmVlbik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGNvbnNvbGVXaW5kb3dzaXplKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidm9sbGJpbGRcIikhLnNldEF0dHJpYnV0ZShcImZ1bGxzY3JlZW5cIixcIm9mZlwiKTtcclxuICAgIC8vIHRlc3RCaW5Ub0hleCgpO1xyXG59XHJcbm1haW4oKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///851\n')}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F)},__webpack_exports__={};__webpack_modules__[851](0,__webpack_exports__,__webpack_require__)})();