(()=>{"use strict";var __webpack_modules__={851:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Jz": () => (/* binding */ root),\n  "I8": () => (/* binding */ rootVariables)\n});\n\n// UNUSED EXPORTS: contentloaded, onscrollIn_Out, setCurrentlyHovered\n\n;// CONCATENATED MODULE: ./src/Backend/Manipulator.ts\nconst erlaubteLängeL_C = 8;\r\nconst erlaubteLängeMNEMO = 4;\r\nconst speicherabbildL = 16;\r\nclass Manipulator_Manipulator {\r\n    constructor() { }\r\n    static sliceString(s1, s2) {\r\n        let n, p;\r\n        n = s1.indexOf(s2);\r\n        p = s2.length;\r\n        return [s1.substring(0, n), s1.substring(n + p)];\r\n    }\r\n    static splitStringHalf(addr, ch) {\r\n        let reString = [];\r\n        let p = addr.indexOf(ch);\r\n        if (p != -1 && p != undefined) {\r\n            reString[0] = addr.slice(0, p).trim();\r\n            reString[1] = addr.slice(p + 1).trim();\r\n        }\r\n        else\r\n            reString[0] = addr;\r\n        return reString;\r\n    }\r\n    static splitStringHalfUnfiltered(s, ch) {\r\n        let reString = [];\r\n        let p = s.indexOf(ch);\r\n        if (p != -1 && p != undefined) {\r\n            reString[0] = s.slice(0, p).trim();\r\n            reString[1] = s.slice(p + 1);\r\n            if (reString[1].trim() != " " || reString[1].trim() != "") {\r\n                reString[1] = reString[1].trim();\r\n            }\r\n        }\r\n        else\r\n            reString[0] = s;\r\n        return reString;\r\n    }\r\n    static isBin(s) {\r\n        if (s.endsWith("b") || s.endsWith("B")) {\r\n            s = s.replace(/b$/i, "");\r\n            // addr =addr.replace(/^0{1,}/,\'0\');\r\n            if (s == "") {\r\n                return false;\r\n            }\r\n            if (!/[^0-1]/.test(s)) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isHex(addr) {\r\n        if (addr.endsWith("h") || addr.endsWith("H")) {\r\n            addr = addr.replace(/h$/i, "");\r\n            // addr =addr.replace(/^0{1,}/,\'0\');\r\n            if (addr == "") {\r\n                return false;\r\n            }\r\n            if (!/[^0-9A-F]/i.test(addr)) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDec(addr) {\r\n        if (addr == "") {\r\n            return false;\r\n        }\r\n        if (!/[^0-9]/.test(addr)) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDat_8(addr) {\r\n        // addr =addr.replace(/^0+/,\'\');\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (addr == "") {\r\n            return false;\r\n        }\r\n        if (this.isBin(addr)) {\r\n            if (this.binToHex(addr).length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isDec(addr)) {\r\n            if (this.decToHex(addr).length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isHex(addr)) {\r\n            while (addr.startsWith(\'0\') && addr.length > 3) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length <= 3) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static isDat_16(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (addr == "") {\r\n            return false;\r\n        }\r\n        if (this.isBin(addr)) {\r\n            if (this.binToHex(addr).length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        if (this.isDec(addr)) {\r\n            if (this.decToHex(addr).length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else if (this.isHex(addr)) {\r\n            while (addr.startsWith(\'0\') && addr.length > 5) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length <= 5) {\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    static formatHextoDat8(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (this.isDat_8(addr)) {\r\n            if (this.isBin(addr)) {\r\n                addr = this.binToHex(addr);\r\n            }\r\n            else if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 3) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat8 but got instead " + addr);\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat8WithoutH(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (this.isDat_8(addr)) {\r\n            if (this.isBin(addr)) {\r\n                addr = this.binToHex(addr);\r\n            }\r\n            else if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 3) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            if (addr.length == 2) {\r\n                addr = \'0\' + addr;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat8 but got instead " + addr);\r\n        }\r\n        return addr.replace(/h$/, "");\r\n    }\r\n    static formatHextoDat16(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (this.isDat_16(addr)) {\r\n            if (this.isBin(addr)) {\r\n                addr = this.binToHex(addr);\r\n            }\r\n            else if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 5) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            switch (addr.length) {\r\n                case 1:\r\n                    addr = "0000" + addr;\r\n                    break;\r\n                case 2:\r\n                    addr = \'000\' + addr;\r\n                    break;\r\n                case 3:\r\n                    addr = \'00\' + addr;\r\n                    break;\r\n                case 4:\r\n                    addr = \'0\' + addr;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat16 but got instead " + addr);\r\n        }\r\n        return addr;\r\n    }\r\n    static formatHextoDat16WithoutH(addr) {\r\n        addr = addr.replace(/^0{1,}/, \'0\');\r\n        if (this.isDat_16(addr)) {\r\n            if (this.isBin(addr)) {\r\n                addr = this.binToHex(addr);\r\n            }\r\n            else if (this.isDec(addr)) {\r\n                addr = this.decToHex(addr);\r\n            }\r\n            while (addr.startsWith(\'0\') && addr.length > 5) {\r\n                addr = addr.replace(/^0/, \'\');\r\n            }\r\n            switch (addr.length) {\r\n                case 1:\r\n                    addr = "0000" + addr;\r\n                    break;\r\n                case 2:\r\n                    addr = \'000\' + addr;\r\n                    break;\r\n                case 3:\r\n                    addr = \'00\' + addr;\r\n                    break;\r\n                case 4:\r\n                    addr = \'0\' + addr;\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error("Expected was Dat16 but got instead " + addr);\r\n        }\r\n        return addr.replace(/h$/g, "");\r\n    }\r\n    static splitDat16InDat8(addr) {\r\n        let r = [];\r\n        if (this.isDat_16(addr)) {\r\n            addr = this.formatHextoDat16(addr);\r\n            r[0] = addr[2] + addr[3];\r\n            r[1] = addr[0] + addr[1];\r\n        }\r\n        return r;\r\n    }\r\n    static formatLabelDisplay(s, b) {\r\n        let ss = "";\r\n        let toReturn = "";\r\n        if (s.length < 1) {\r\n            return "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";\r\n        }\r\n        s = s.concat(": ");\r\n        while (s.length < erlaubteLängeL_C + 2) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        toReturn = b ? s : ss;\r\n        return toReturn;\r\n    }\r\n    static formatConstantDisplay(s, b) {\r\n        let ss = "";\r\n        let toReturn = "";\r\n        if (s.length < 1) {\r\n            return "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";\r\n        }\r\n        s = s.concat("  ");\r\n        while (s.length < erlaubteLängeL_C + 2) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        toReturn = b ? s : ss;\r\n        return toReturn;\r\n    }\r\n    static formatLabelDisplaytoSymbolTable(s) {\r\n        let ss = "";\r\n        while (s.length < erlaubteLängeL_C + 1) {\r\n            s = s.concat(" ");\r\n        }\r\n        ss = s;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        // console.log(ss+" --\x3e "+ss.length);\r\n        return ss;\r\n    }\r\n    static formatBefehlDisplay(s1, s2, b) {\r\n        let ss = "";\r\n        let toReturn = s1;\r\n        while (toReturn.length < erlaubteLängeMNEMO) {\r\n            toReturn = toReturn.concat(" ");\r\n        }\r\n        // s2=s2.replace(s1,toReturn);\r\n        s2 = toReturn + s2.split(s1)[1];\r\n        while (s2.length < 16) {\r\n            s2 = s2.concat(" ");\r\n        }\r\n        ss = s2;\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        toReturn = b ? s2 : ss;\r\n        return toReturn;\r\n    }\r\n    static formatLabelandBefehlDisplay(s1, s2, s3) {\r\n        let ss = "";\r\n        if (s1.length < erlaubteLängeL_C) {\r\n            return this.formatLabelDisplay(s1, false).concat(this.formatBefehlDisplay(s2, s3, false));\r\n        }\r\n        s2 = this.formatBefehlDisplay(s2, s3, true);\r\n        s1 = this.formatLabelDisplay(s1, true);\r\n        ss = (s1.concat(s2)).trim();\r\n        if (ss.length < 26) {\r\n            while (ss.length < 26) {\r\n                ss = ss.concat(" ");\r\n            }\r\n        }\r\n        console.log(ss);\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        console.log(ss);\r\n        return ss;\r\n    }\r\n    static formatConstandBefehlDisplay(s1, s2, s3) {\r\n        let ss = "";\r\n        if (s1.length < erlaubteLängeL_C) {\r\n            return this.formatConstantDisplay(s1, false).concat(this.formatBefehlDisplay(s2, s3, false));\r\n        }\r\n        s2 = this.formatBefehlDisplay(s2, s3, true);\r\n        s1 = this.formatConstantDisplay(s1, true);\r\n        ss = (s1.concat(s2)).trim();\r\n        if (ss.length < 26) {\r\n            while (ss.length < 26) {\r\n                ss = ss.concat(" ");\r\n            }\r\n        }\r\n        console.log(ss);\r\n        while (ss.includes(" ")) {\r\n            ss = ss.replace(" ", "&nbsp;");\r\n        }\r\n        console.log(ss);\r\n        return ss;\r\n    }\r\n    static formatSpeicherabbildandLabel(s1, s2) {\r\n        if (s1.length >= speicherabbildL) {\r\n            return s1 + s2;\r\n        }\r\n        while (s1.length < speicherabbildL) {\r\n            s1 = s1 + " ";\r\n        }\r\n        while (s1.includes(" ")) {\r\n            s1 = s1.replace(" ", "&nbsp;");\r\n        }\r\n        return s1 + s2;\r\n    }\r\n}\r\nManipulator_Manipulator.binToHex = (addr) => {\r\n    addr = addr.replace(/b$/g, "");\r\n    return parseInt(addr, 2).toString(16).toUpperCase() + "h";\r\n};\r\nManipulator_Manipulator.decToHex = (addr) => {\r\n    return parseInt(addr, 10).toString(16).toUpperCase() + "h";\r\n};\r\nManipulator_Manipulator.binToDec = (addr) => {\r\n    addr = addr.replace(/b$/g, "");\r\n    return Number(parseInt(addr, 2).toString(10));\r\n};\r\nManipulator_Manipulator.hexToDec = (addr) => {\r\n    addr = addr.replace(/h$/g, "");\r\n    return Number(parseInt(addr, 16).toString(10));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/Backend/Label.ts\nclass Label {\r\n    constructor(n, p) {\r\n        this.name = "";\r\n        this.position = undefined;\r\n        this.name = n;\r\n        this.position = p;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getPosition() {\r\n        return this.position;\r\n    }\r\n    setPosition(addr) {\r\n        this.position = addr;\r\n    }\r\n    toString() {\r\n        return `<span class="gray">Label:</span> &nbsp;&nbsp;&nbsp;&nbsp; Label Wert:0000h (little endian:0000h)`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/Constant.ts\nclass Constant {\r\n    constructor(n, v) {\r\n        this.name = "";\r\n        this.value = "";\r\n        this.name = n;\r\n        this.value = v;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    setValue(addr) {\r\n        this.value = addr;\r\n    }\r\n    toStringtoMovable() {\r\n        return `${this.name} Wert:${this.value}`;\r\n    }\r\n    toString() {\r\n        return `<span class="gray">Konst.:</span> ;&nbsp;&nbsp;&nbsp; ${this.name} Wert:${this.value}`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/SymbolList.ts\n\r\n\r\n\r\nclass SymbolList {\r\n    constructor() {\r\n        this.Labels = [];\r\n        this.Consts = [];\r\n        this.sequence = [];\r\n    }\r\n    static getInstance() {\r\n        if (!SymbolList.instance) {\r\n            SymbolList.instance = new SymbolList();\r\n        }\r\n        return SymbolList.instance;\r\n    }\r\n    empty() {\r\n        this.Labels = [];\r\n        this.Consts = [];\r\n        this.sequence = [];\r\n    }\r\n    pushValidLabelConst(s) {\r\n        if (this.sequence.find(e => { e == s; }) == undefined) {\r\n            this.sequence.push(s);\r\n        }\r\n    }\r\n    isEligible(addr) {\r\n        if (addr.length < 3) {\r\n            return false;\r\n        }\r\n        if (addr.toLowerCase() == "offset") {\r\n            return false;\r\n        }\r\n        if (/^\\d/.test(addr)) {\r\n            return false;\r\n        }\r\n        if (/^[\\w]+$/.test(addr)) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isEligible_Const(addr) {\r\n        if (this.isEligible(addr) && /^_/.test(addr)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    updateLabel(s, addr) {\r\n        let l = this.getSpecificLabelByName(s);\r\n        if (l != undefined && Manipulator_Manipulator.isDat_16(addr)) {\r\n            l.setPosition(Manipulator_Manipulator.formatHextoDat16(addr));\r\n            this.pushValidLabelConst(l);\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isLabel(addr) {\r\n        //  case-sensitive\r\n        /* if(this.Labels.find(element => element.getName()==addr) !=undefined){\r\n            return true;\r\n        }\r\n        else return false; */\r\n        //  NOT case-sensitive\r\n        if (this.Labels.find(element => element.getName().toLowerCase() == addr.toLowerCase()) != undefined) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    setLabel(s, p) {\r\n        let l;\r\n        if (!this.isLabel(s) && Manipulator_Manipulator.isDat_16(p)) {\r\n            l = new Label(s, Manipulator_Manipulator.formatHextoDat16(p));\r\n            this.Labels.push(l);\r\n            this.pushValidLabelConst(l);\r\n        }\r\n    }\r\n    setLabelWithoutPosition(addr) {\r\n        if (!this.isLabel(addr)) {\r\n            this.Labels.push(new Label(addr, "????"));\r\n            return true;\r\n        }\r\n        else if (this.getPositionOfSpecificLabel(addr) == undefined) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    isConst(s) {\r\n        if (this.Consts.find(element => element.getName().toLowerCase() == s.toLowerCase()) != undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getSequence() {\r\n        return this.sequence;\r\n    }\r\n    setConst(s, v) {\r\n        let l;\r\n        if (!this.isConst(s)) {\r\n            l = new Constant(s, v);\r\n            this.Consts.push(new Constant(s, v));\r\n            this.pushValidLabelConst(l);\r\n        }\r\n    }\r\n    removeLabel(s) {\r\n        //  case-sensitive\r\n        /*\r\n        this.Labels.filter(e=>{\r\n            e.getName()!=s;\r\n        })\r\n        */\r\n        //   NOT case-sensitive\r\n        this.Labels.filter(e => {\r\n            e.getName().toLowerCase() != s.toLowerCase();\r\n        });\r\n    }\r\n    getLabels() {\r\n        return this.Labels;\r\n    }\r\n    getConsts() {\r\n        return this.Consts;\r\n    }\r\n    getSpecificConstantByName(addr) {\r\n        return this.Consts.find(e => e.getName().toLowerCase() == addr.toLowerCase());\r\n    }\r\n    getSpecificLabelByName(addr) {\r\n        //  case-sensitive\r\n        /*\r\n        return this.Labels.find(e=>e.getName()==addr);\r\n        */\r\n        //   NOT case-sensitive\r\n        return this.Labels.find(e => e.getName().toLowerCase() == addr.toLowerCase());\r\n    }\r\n    getPositionOfSpecificLabel(addr) {\r\n        let r = this.getSpecificLabelByName(addr);\r\n        if (r == undefined) {\r\n            this.setLabelWithoutPosition(addr);\r\n            return undefined;\r\n        }\r\n        else {\r\n            if (r.getPosition() == "????") {\r\n                return undefined;\r\n            }\r\n            else\r\n                return r.getPosition();\r\n        }\r\n    }\r\n}\r\nlet SymbolL = SymbolList.getInstance();\r\n\n;// CONCATENATED MODULE: ./src/Backend/Enums.ts\nvar DataType;\r\n(function (DataType) {\r\n    DataType["dat_8"] = "dat_8";\r\n    DataType["dat_16"] = "dat_16";\r\n    DataType["LABEL"] = "label";\r\n    DataType["CONSTANT"] = "const";\r\n    DataType["ELLIGIBLE"] = "elligible";\r\n    DataType["NONE"] = "none";\r\n})(DataType || (DataType = {}));\r\nvar InputLineType;\r\n(function (InputLineType) {\r\n    InputLineType["TRANSLATED"] = "TRANSLATED";\r\n    InputLineType["PSEUDOTRANSLATED"] = "PSEUDOTRANSLATED";\r\n    InputLineType["NOTTRANSLATED"] = "NOTTRANSLATED";\r\n    InputLineType["EMPTY"] = "EMPTY";\r\n})(InputLineType || (InputLineType = {}));\r\n\n;// CONCATENATED MODULE: ./src/Backend/InputLine.ts\n\r\n\r\n\r\nclass InputLine {\r\n    constructor(init, id) {\r\n        this.startingAddr = "";\r\n        this.length = -1;\r\n        this.id = -1;\r\n        this.hCode = "";\r\n        this.initialLine = "";\r\n        this.commandLine = "";\r\n        this.firstPart = "";\r\n        this.secondPart = "";\r\n        this.thirdPart = "";\r\n        this.error = "";\r\n        this.rest = "";\r\n        this.commentary = "";\r\n        this.label = "";\r\n        this.offsetLabel = false;\r\n        this.errorBool = false;\r\n        this.translation = "";\r\n        this.description = [];\r\n        this.valid = false;\r\n        this.type = InputLineType.NOTTRANSLATED;\r\n        this.setTranslation = (s) => {\r\n            this.translation = s;\r\n        };\r\n        this.getTranslation = () => {\r\n            return this.translation;\r\n        };\r\n        this.getDescriptionLine = () => {\r\n            return this.description;\r\n        };\r\n        this.getStartingAddr = () => { return this.startingAddr; };\r\n        this.getLength = () => { return this.length; };\r\n        this.getHCode = () => {\r\n            return this.hCode;\r\n        };\r\n        this.getId = () => { return this.id; };\r\n        this.getLabel = () => {\r\n            return this.label;\r\n        };\r\n        this.getFirstPart = () => { return this.firstPart; };\r\n        this.getSecondPart = () => { return this.secondPart; };\r\n        this.getThirdPart = () => { return this.thirdPart; };\r\n        this.getCommentary = () => {\r\n            return this.commentary;\r\n        };\r\n        this.getValid = () => { return this.valid; };\r\n        this.getType = () => { return this.type; };\r\n        this.setComment = (s) => {\r\n            this.commentary = s;\r\n        };\r\n        this.setLabelTo = (s) => {\r\n            this.label = s;\r\n        };\r\n        this.setCommandLine = () => {\r\n            if (this.initialLine.trim() == "" || this.initialLine.trim() == " ") {\r\n                return "";\r\n            }\r\n            let ss = Manipulator_Manipulator.splitStringHalf(this.initialLine, ";");\r\n            let s1 = this.initialLine.replace(\';\' + ss[1], \'\');\r\n            if (ss[1] != undefined) {\r\n                this.commentary = ss[1];\r\n            }\r\n            let s = Manipulator_Manipulator.splitStringHalf(s1, ":");\r\n            if (s.length > 1) {\r\n                this.label = s[0];\r\n            }\r\n            s1 = s1.replace(s[0] + ":", "");\r\n            return s1.trim();\r\n        };\r\n        this.commandLinetoString = (b) => {\r\n            let first = this.firstPart, second = this.secondPart, third = this.thirdPart;\r\n            let temp;\r\n            if (this.valid == true) {\r\n                if (b) {\r\n                    temp = this.formatpartsToDisplay(first, second, third);\r\n                    first = temp[0];\r\n                    second = temp[1];\r\n                    third = temp[2];\r\n                }\r\n                if (second.toUpperCase() == "EQU") {\r\n                    // this.secondPart = "EQU";\r\n                    return (`${first} ${second} ${third}`);\r\n                }\r\n                else {\r\n                    return (`${first} ${second}${(third == "" ? "" : \',\' + third)}`);\r\n                }\r\n            }\r\n            else {\r\n                return this.commandLine;\r\n            }\r\n        };\r\n        this.hasLabel = () => {\r\n            return this.label != "";\r\n        };\r\n        this.initialLine = init.replace(/\\s{3,}/g, \' \');\r\n        this.id = id;\r\n        this.commandLine = this.setCommandLine();\r\n        this.preemptiveValidation();\r\n    }\r\n    getCommandline() {\r\n        return this.commandLine;\r\n    }\r\n    preemptiveValidation() {\r\n        if (this.commandLine == "" && this.label == "") {\r\n            this.valid = true;\r\n            this.type = InputLineType.EMPTY;\r\n        }\r\n        else if (this.commandLine == "" && this.label != "") {\r\n            this.type = InputLineType.PSEUDOTRANSLATED;\r\n        }\r\n    }\r\n    setError(s) {\r\n        this.errorBool = true;\r\n        this.error = s;\r\n    }\r\n    hasError() {\r\n        return this.errorBool;\r\n    }\r\n    hasOffsetLabel() {\r\n        return this.offsetLabel;\r\n    }\r\n    setOffsetLabel(b) {\r\n        this.offsetLabel = b;\r\n    }\r\n    setStartingAddr(s) { this.startingAddr = s; }\r\n    setLength(n) {\r\n        if (Manipulator_Manipulator.isHex(String(n))) {\r\n            this.length = Manipulator_Manipulator.hexToDec(String(n));\r\n        }\r\n        else if (Manipulator_Manipulator.isBin(String(n))) {\r\n            this.length = Manipulator_Manipulator.binToDec(String(n));\r\n        }\r\n        else\r\n            this.length = Number(n);\r\n    }\r\n    setHCode(s) {\r\n        this.hCode = s;\r\n    }\r\n    setFirstPart(s) { this.firstPart = s; }\r\n    setSecondPart(s) {\r\n        this.secondPart = s;\r\n    }\r\n    getEndAddr() {\r\n        if (this.firstPart.toUpperCase() == "ORG") {\r\n            return Manipulator_Manipulator.formatHextoDat16(String(this.length)); // DecOrHex\r\n            // return String(this.length);\r\n        }\r\n        if (this.startingAddr != "") {\r\n            return String(Manipulator_Manipulator.hexToDec(this.startingAddr) + this.length);\r\n        }\r\n        else\r\n            return "";\r\n    }\r\n    setThirdPart(s) {\r\n        this.thirdPart = s;\r\n    }\r\n    setRest(s) {\r\n        this.rest = s;\r\n    }\r\n    getLabelorUndefined() {\r\n        if (this.label != "" && this.label.length > erlaubteLängeL_C) {\r\n            return this.label;\r\n        }\r\n        if (this.offsetLabel && this.getLabelOfOffset().length > erlaubteLängeL_C) {\r\n            return this.getLabelOfOffset();\r\n        }\r\n        if (SymbolL.isLabel(this.firstPart) && this.firstPart.length > erlaubteLängeL_C) {\r\n            return this.firstPart;\r\n        }\r\n        if (SymbolL.isLabel(this.secondPart) && this.secondPart.length > erlaubteLängeL_C) {\r\n            return this.secondPart;\r\n        }\r\n        if (SymbolL.isLabel(this.thirdPart) && this.thirdPart.length > erlaubteLängeL_C) {\r\n            return this.thirdPart;\r\n        }\r\n        return undefined;\r\n    }\r\n    getConstorUndefined() {\r\n        if (SymbolL.isConst(this.firstPart) && this.firstPart.length > erlaubteLängeL_C) {\r\n            return this.firstPart;\r\n        }\r\n        if (SymbolL.isConst(this.secondPart) && this.secondPart.length > erlaubteLängeL_C) {\r\n            return this.secondPart;\r\n        }\r\n        if (SymbolL.isConst(this.thirdPart) && this.thirdPart.length > erlaubteLängeL_C) {\r\n            return this.thirdPart;\r\n        }\r\n        return undefined;\r\n    }\r\n    setValid(b) { this.valid = b; }\r\n    setType(t) { this.type = t; }\r\n    saveDescriptionLine(s) {\r\n        this.description.push(s);\r\n    }\r\n    getInitialLine() {\r\n        return this.initialLine;\r\n    }\r\n    getLabelOfOffset() {\r\n        if (this.offsetLabel) {\r\n            if (this.secondPart.toUpperCase().startsWith("OFFSET")) {\r\n                return Manipulator_Manipulator.splitStringHalf(this.secondPart, " ")[1];\r\n            }\r\n            if (this.thirdPart.toUpperCase().startsWith("OFFSET")) {\r\n                return Manipulator_Manipulator.splitStringHalf(this.thirdPart, " ")[1];\r\n            }\r\n        }\r\n        return "";\r\n    }\r\n    formatInputToDisplay() {\r\n        let temp;\r\n        if (this.valid) {\r\n            temp = this.formatpartsToDisplay(this.firstPart, this.secondPart, this.thirdPart);\r\n            this.firstPart = temp[0];\r\n            this.secondPart = temp[1];\r\n            this.thirdPart = temp[2];\r\n        }\r\n    }\r\n    getCommandLineToCurrentLine() {\r\n        let dsrl = this.initialLine.split(";")[0];\r\n        let ss = [];\r\n        let temp = [];\r\n        if (this.label != "") {\r\n            // temp =dsrl.split(this.label);\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.label);\r\n            ss.push(temp[0]);\r\n            ss.push(`<span id="crLabel">${this.label}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.firstPart != "") {\r\n            // temp =dsrl.split(this.firstPart)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.firstPart);\r\n            ss.push(temp[0]);\r\n            ss.push(`<span id="crFirst">${this.firstPart}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.secondPart != "") {\r\n            // console.log("dsrl : "+dsrl);\r\n            // temp =dsrl.split(this.secondPart,2)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.secondPart);\r\n            // console.log("SECOND:")\r\n            // console.log(Manipulator.sliceString(dsrl,this.secondPart));\r\n            ss.push(temp[0]);\r\n            ss.push(`<span id="crSecond">${this.secondPart}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.thirdPart != "") {\r\n            // temp =dsrl.split(this.thirdPart)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.thirdPart);\r\n            ss.push(dsrl.split(this.thirdPart)[0]);\r\n            // console.log("THIRD:")\r\n            // console.log(Manipulator.sliceString(dsrl,this.thirdPart));\r\n            ss.push(`<span id="crThird">${this.thirdPart}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        if (this.error != "") {\r\n            // temp =dsrl.split(this.error)\r\n            temp = Manipulator_Manipulator.sliceString(dsrl, this.error);\r\n            ss.push(dsrl.split(this.error)[0]);\r\n            ss.push(`<span id="crError">${this.error}</span>`);\r\n            dsrl = temp[1];\r\n        }\r\n        ss.push(dsrl);\r\n        /* if(this.rest!=""){\r\n            dsrl+=`<span id="crRest">${this.rest}</span>`;\r\n        } */\r\n        // console.log(ss);\r\n        return ss.join("");\r\n    }\r\n    getAllV() {\r\n        return [this.label != "" ? 1 : 0, this.firstPart != "" ? 1 : 0, this.secondPart != "" ? 1 : 0, this.thirdPart != "" ? 1 : 0, (this.error != "" || this.errorBool) ? 1 : 0, this.rest != "" ? 1 : 0];\r\n    }\r\n    formatpartsToDisplay(first, second, third) {\r\n        let temp;\r\n        if (second.toUpperCase() == "EQU") {\r\n            second = second.toUpperCase();\r\n        }\r\n        /* else if(["DW","ORG"].includes(first.toUpperCase())){\r\n            if(SymbolL\r\n            second = Manipulator.formatHextoDat16(second);\r\n        } */\r\n        else {\r\n            first = first.toUpperCase();\r\n            temp = Manipulator_Manipulator.splitStringHalf(second, " ");\r\n            if (!SymbolL.isLabel(second) && !SymbolL.isConst(second) && !Manipulator_Manipulator.isDat_16(second) && !(temp[0].toUpperCase() == "OFFSET")) {\r\n                second = second.toUpperCase();\r\n            }\r\n            if (this.hasOffsetLabel()) {\r\n                second = "OFFSET " + this.getLabelOfOffset();\r\n            }\r\n            else if (second != "") {\r\n                if (Manipulator_Manipulator.isDat_8(second)) {\r\n                    second = second; // DecOrHex\r\n                    // second=Manipulator.formatHextoDat8(second); \r\n                }\r\n                else if (Manipulator_Manipulator.isDat_16(second)) {\r\n                    second = second; // DecOrHex\r\n                    // second=Manipulator.formatHextoDat16(second);\r\n                }\r\n            }\r\n            temp = Manipulator_Manipulator.splitStringHalf(third, " ");\r\n            if (!SymbolL.isLabel(third) && !SymbolL.isConst(third) && !Manipulator_Manipulator.isDat_16(third) && !(temp[0].toUpperCase() == "OFFSET")) {\r\n                third = third.toUpperCase();\r\n            }\r\n            else if (this.hasOffsetLabel()) {\r\n                third = "OFFSET " + this.getLabelOfOffset();\r\n            }\r\n            else if (third != "") {\r\n                if (Manipulator_Manipulator.isDat_8(third) && this.length < 3) {\r\n                    // third=Manipulator.formatHextoDat8(third); \r\n                    third = third; // DecOrHex\r\n                }\r\n                else if (Manipulator_Manipulator.isDat_16(third)) {\r\n                    // third=Manipulator.formatHextoDat16(third);\r\n                    third = third; // DecOrHex\r\n                }\r\n            }\r\n        }\r\n        return [first, second, third];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/MnemoCommand.ts\n\r\nclass MnemoCommand {\r\n    constructor(c, d, addr, bC, l) {\r\n        this.mCode = "";\r\n        this.destination = "";\r\n        this.source = "";\r\n        this.binaryCode = "";\r\n        this.hexCode = "";\r\n        this.size = 0;\r\n        this.mCode = c.toUpperCase();\r\n        this.destination = d;\r\n        this.source = addr;\r\n        this.binaryCode = bC.replace(/\\s/g, "");\r\n        this.hexCode = Manipulator_Manipulator.binToHex(bC.replace(/\\s/g, ""));\r\n        this.size = l;\r\n    }\r\n    getMCode() {\r\n        return this.mCode;\r\n    }\r\n    getDestination() {\r\n        return this.destination;\r\n    }\r\n    getSource() {\r\n        return this.source;\r\n    }\r\n    getHexCode() {\r\n        return this.hexCode;\r\n    }\r\n    getLength() {\r\n        let i = 1;\r\n        if (this.destination != "") {\r\n            i++;\r\n        }\r\n        if (this.source != "") {\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n    toFilterableString() {\r\n        return `${this.mCode}${this.destination == "" ? "" : " " + this.destination}${this.source == "" ? "" : "," + this.source}`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Tools.ts\n\r\n\r\nconst getHtmlElement = (id) => document.getElementById(id);\r\nconst createClickListener = (id, f) => {\r\n    try {\r\n        const a = document.getElementById(id);\r\n        if (a != null) {\r\n            a.addEventListener("click", f);\r\n        }\r\n        else\r\n            throw new Error("Element " + id + " is null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst updateScroll = (id) => {\r\n    var element = getHtmlElement(id);\r\n    element.scrollTop = element.scrollHeight;\r\n};\r\nconst updateScrollOfSymbolTable = (id) => {\r\n    let targetElem = document.getElementById(id);\r\n    let n = 0;\r\n    if (targetElem != null) {\r\n        if (targetElem.offsetTop + targetElem.offsetHeight > symbolTableLines.scrollTop + symbolTableLines.clientHeight + symbolTableLines.offsetTop) {\r\n            symbolTableLines.scrollTop = (targetElem.offsetTop + 2 * targetElem.offsetHeight - symbolTableLines.offsetTop - symbolTableLines.clientHeight);\r\n            // return targetElem.offsetTop+2*targetElem.offsetHeight-symbolTableLines.offsetTop-symbolTableLines.clientHeight;\r\n            n = targetElem.offsetTop + 2 * targetElem.offsetHeight - symbolTableLines.offsetTop - symbolTableLines.clientHeight;\r\n            return n > symbolTableLines.scrollHeight - symbolTableLines.offsetHeight\r\n                ? symbolTableLines.scrollHeight - symbolTableLines.offsetHeight\r\n                : n;\r\n        }\r\n        else if (targetElem.offsetTop < symbolTableLines.offsetTop + symbolTableLines.scrollTop) {\r\n            symbolTableLines.scrollTop = (targetElem.offsetTop - symbolTableLines.offsetTop);\r\n            return targetElem.offsetTop - symbolTableLines.offsetTop;\r\n        }\r\n    }\r\n    return symbolTableLines.scrollTop;\r\n};\r\nconst updateScrollOfIn_Out = (id, targetID) => {\r\n    var elem = id == inputText.id ? inputText : outputText;\r\n    var targetElem = getHtmlElement(targetID);\r\n    let n = 0;\r\n    if (targetElem.offsetTop + 2 * targetElem.offsetHeight > elem.scrollTop + elem.clientHeight + elem.offsetTop) {\r\n        inputText.scrollTop = (targetElem.offsetTop - elem.offsetTop - elem.clientHeight + 2 * targetElem.offsetHeight);\r\n        outputText.scrollTop = (targetElem.offsetTop - elem.offsetTop - elem.clientHeight + 2 * targetElem.offsetHeight);\r\n        n = targetElem.offsetTop - elem.offsetTop - elem.clientHeight + 2 * targetElem.offsetHeight;\r\n        return n > elem.scrollHeight - elem.offsetHeight ? elem.scrollHeight - elem.offsetHeight : n;\r\n    }\r\n    else if (targetElem.offsetTop < elem.offsetTop + elem.scrollTop) {\r\n        inputText.scrollTop = (targetElem.offsetTop - elem.offsetTop);\r\n        outputText.scrollTop = (targetElem.offsetTop - elem.offsetTop);\r\n        return targetElem.offsetTop - elem.offsetTop;\r\n    }\r\n    return elem.scrollTop;\r\n};\r\nconst removeClassOfAll = (s) => {\r\n    let elements = Array.from(document.querySelectorAll("." + s + ""));\r\n    for (let elem of elements) {\r\n        elem.classList.remove(s);\r\n    }\r\n};\r\nconst addClassTo = (id, cls) => {\r\n    let elem = getHtmlElement(id);\r\n    if (elem != null || elem != undefined) {\r\n        elem.classList.add(cls);\r\n    }\r\n};\r\nconst getIDOfSelected = (s) => {\r\n    return s[0] + s[1];\r\n};\r\nconst updateScrollOfDescriptionLines = (id, targetID) => {\r\n    var elem = getHtmlElement(id);\r\n    var targetElem = getHtmlElement(targetID);\r\n    targetElem.scrollTop = elem.offsetTop - targetElem.offsetTop;\r\n};\r\nclass Resizer {\r\n    constructor() {\r\n        this.outerHeight = 100;\r\n        this.outerWidth = 100;\r\n        this.arrowHead = 40;\r\n        this.arrowBody = 20;\r\n        this.var10px = 10;\r\n        this.var8px = 8;\r\n        this.var6px = 6;\r\n        this.var5px = 5;\r\n        this.var4px = 4;\r\n        this.var3px = 3;\r\n        this.var2px = 2;\r\n        this.var1_5px = 1.5;\r\n        this.var1px = 1;\r\n        this.getInitialValues = () => {\r\n            this.var1px = Number(rootVariables.getPropertyValue("--var1px").replace("px", ""));\r\n            this.var1_5px = Number(rootVariables.getPropertyValue("--var1_5px").replace("px", ""));\r\n            this.var2px = Number(rootVariables.getPropertyValue("--var2px").replace("px", ""));\r\n            this.var3px = Number(rootVariables.getPropertyValue("--var3px").replace("px", ""));\r\n            this.var4px = Number(rootVariables.getPropertyValue("--var4px").replace("px", ""));\r\n            this.var5px = Number(rootVariables.getPropertyValue("--var5px").replace("px", ""));\r\n            this.var6px = Number(rootVariables.getPropertyValue("--var6px").replace("px", ""));\r\n            this.var8px = Number(rootVariables.getPropertyValue("--var8px").replace("px", ""));\r\n            this.var10px = Number(rootVariables.getPropertyValue("--var10px").replace("px", ""));\r\n            this.arrowHead = Number(rootVariables.getPropertyValue("--arrowHeadlrW").replace("px", ""));\r\n            this.arrowBody = Number(rootVariables.getPropertyValue("--arrowBodyW").replace("px", ""));\r\n        };\r\n        this.getWidthAndHeightOfWindow = () => {\r\n            this.outerHeight = window.outerHeight;\r\n            this.outerWidth = window.outerWidth;\r\n        };\r\n        this.initialResize = () => {\r\n            this.getInitialValues();\r\n            this.getWidthAndHeightOfWindow();\r\n            this.var1px = 100 * this.var1px / 1920;\r\n            this.var1_5px = 100 * this.var1_5px / 1920;\r\n            this.var2px = 100 * this.var2px / 1920;\r\n            this.var3px = 100 * this.var3px / 1920;\r\n            this.var4px = 100 * this.var4px / 1920;\r\n            this.var5px = 100 * this.var5px / 1920;\r\n            this.var6px = 100 * this.var6px / 1920;\r\n            this.var8px = 100 * this.var8px / 1920;\r\n            this.var10px = 100 * this.var10px / 1920;\r\n            this.arrowBody = 100 * this.arrowBody / 1920;\r\n            this.arrowHead = 100 * this.arrowHead / 1920;\r\n            this.calculateValues();\r\n        };\r\n        this.calculateValues = () => {\r\n            root.style.setProperty("--var1px", `${this.var1px}vmax`);\r\n            root.style.setProperty("--var2px", `${this.var2px}vmax`);\r\n            root.style.setProperty("--var3px", `${this.var3px}vmax`);\r\n            root.style.setProperty("--var4px", `${this.var4px}vmax`);\r\n            root.style.setProperty("--var5px", `${this.var5px}vmax`);\r\n            root.style.setProperty("--var6px", `${this.var6px}vmax`);\r\n            root.style.setProperty("--var8px", `${this.var8px}vmax`);\r\n            root.style.setProperty("--var10px", `${this.var10px}vmax`);\r\n            root.style.setProperty("--arrowBodyW", `${this.arrowBody}vmax`);\r\n            root.style.setProperty("--arrowHeadlrW", `${this.arrowHead}vmax`);\r\n            root.style.setProperty("--arrowHeadlrH", `${this.arrowHead}vmax`);\r\n        };\r\n        this.resizeWindow = () => {\r\n            this.getWidthAndHeightOfWindow();\r\n        };\r\n    }\r\n}\r\nconst resizer = new Resizer();\r\n\n;// CONCATENATED MODULE: ./src/AnimationUtil.ts\n\r\n\r\nconst sleepFor = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\nconst speedBTN = getHtmlElement("speed");\r\nconst speedSlider = getHtmlElement("speedSlider");\r\nconst singleStepBTN = getHtmlElement("singleStep");\r\nconst animationTyp1BTN = getHtmlElement("animationsTyp1");\r\nconst animationTyp2BTN = getHtmlElement("animationsTyp2");\r\nconst animationTyp3BTN = getHtmlElement("animationsTyp3");\r\nconst playButton = getHtmlElement("play");\r\nconst resetButton = getHtmlElement("reset");\r\nconst setCurrentLineHidden = () => {\r\n    if (aniControl.speed >= 3 && aniControl.isAni3() && aniControl.play) {\r\n        currentLineLine.style.visibility = "hidden";\r\n    }\r\n};\r\nconst setCurrentLineVisible = () => {\r\n    currentLineLine.style.visibility = "visible";\r\n};\r\nconst checkIfPaused = async () => {\r\n    if (aniControl.play) {\r\n        return true;\r\n    }\r\n    while (true) {\r\n        if (aniControl.play) {\r\n            return true;\r\n        }\r\n        if (aniControl.reset) {\r\n            throw Error(\'Reset pressed\');\r\n        }\r\n        if (aniControl.stop) {\r\n            throw Error(\'Stop pressed\');\r\n        }\r\n        await sleepFor(100);\r\n    }\r\n};\r\nconst sleepUntilNextStep = async () => {\r\n    let c = aniControl.baseFrameTime;\r\n    if (aniControl.isAni3()) {\r\n        if (aniControl.speed == 1) {\r\n            await sleepFor(10);\r\n            await checkIfPaused();\r\n            return;\r\n        }\r\n        await sleepFor(3);\r\n        await checkIfPaused();\r\n        return;\r\n    }\r\n    while (true) {\r\n        if (c < 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            await sleepFor(10);\r\n            c -= 10;\r\n            await checkIfPaused();\r\n        }\r\n    }\r\n};\r\nconst sleepStaticAnimation = async () => {\r\n    let b = 2 * aniControl.baseFrameTime;\r\n    let n = 10 * aniControl.speed;\r\n    while (b > 0) {\r\n        await sleepFor(n / (aniControl.speed));\r\n        await checkIfPaused();\r\n        b = b - 10;\r\n    }\r\n};\r\nconst sleepStaticAnimationHalf = async () => {\r\n    let b = aniControl.baseFrameTime;\r\n    let n = 10 * aniControl.speed;\r\n    while (b > 0) {\r\n        await sleepFor(n / (aniControl.speed));\r\n        await checkIfPaused();\r\n        b = b - 10;\r\n    }\r\n};\r\nconst sleepStopStartTime = async () => {\r\n    let b = aniControl.baseFrameTime / 2;\r\n    while (b > 0) {\r\n        await sleepFor(10);\r\n        await checkIfPaused();\r\n        b = b - 10;\r\n    }\r\n};\r\nconst sleepForFrame = async () => {\r\n    // let b=aniControl.baseFrameTime/aniControl.frames;\r\n    let b = aniControl.baseFrameTime / 120 / 2;\r\n    while (b > 0) {\r\n        await sleepFor(1);\r\n        b = b - 1;\r\n        await checkIfPaused();\r\n    }\r\n};\r\nvar AnimationsTyp;\r\n(function (AnimationsTyp) {\r\n    AnimationsTyp["Typ1"] = "Typ1";\r\n    AnimationsTyp["Typ2"] = "Typ2";\r\n    AnimationsTyp["Typ3"] = "Typ3";\r\n})(AnimationsTyp || (AnimationsTyp = {}));\r\nclass AnimationControl {\r\n    constructor() {\r\n        this.animationType = AnimationsTyp.Typ1;\r\n        this.resetFlags = () => {\r\n            while (!aniControl.reset) {\r\n            }\r\n            ;\r\n            this.start = false;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.stop = false;\r\n            this.end = false;\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.setStart = () => {\r\n            this.start = true;\r\n            this.setPlaying();\r\n        };\r\n        this.setSinglestep = () => {\r\n            if (this.singleStepFlag)\r\n                this.singleStepFlag = false;\r\n            else\r\n                this.singleStepFlag = true;\r\n            this.singleStepFlag ? singleStepBTN.classList.add("selected") : singleStepBTN.classList.remove("selected");\r\n        };\r\n        this.setSpeedTo = (n) => {\r\n            if (n < 1) {\r\n                speedSlider.value = `${1}`;\r\n                return 1;\r\n            }\r\n            else if (n > 4) {\r\n                speedSlider.value = `${(4)}`;\r\n                return 4;\r\n            }\r\n            else {\r\n                speedSlider.value = `${(n)}`;\r\n                return n;\r\n            }\r\n        };\r\n        this.increaseSpeed = () => {\r\n            this.setSpeed(this.setSpeedTo(speedSlider.valueAsNumber + 1));\r\n        };\r\n        this.decreaseSpeed = () => {\r\n            this.setSpeed(this.setSpeedTo(speedSlider.valueAsNumber - 1));\r\n        };\r\n        this.setAnimationTyp1 = () => {\r\n            if (this.isAni3() && this.speed >= 3) {\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n            }\r\n            this.animationType = AnimationsTyp.Typ1;\r\n            this.setSmoothIfNecessery();\r\n            try {\r\n                animationTyp1BTN.classList.add("selected");\r\n                animationTyp2BTN.classList.remove("selected");\r\n                animationTyp3BTN.classList.remove("selected");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.setAnimationTyp2 = () => {\r\n            if (this.isAni3() && this.speed >= 3) {\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n            }\r\n            this.animationType = AnimationsTyp.Typ2;\r\n            this.setSmoothIfNecessery();\r\n            try {\r\n                animationTyp1BTN.classList.remove("selected");\r\n                animationTyp2BTN.classList.add("selected");\r\n                animationTyp3BTN.classList.remove("selected");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.setAnimationTyp3 = () => {\r\n            this.animationType = AnimationsTyp.Typ3;\r\n            this.removeSmoothScroll();\r\n            try {\r\n                animationTyp1BTN.classList.remove("selected");\r\n                animationTyp2BTN.classList.remove("selected");\r\n                animationTyp3BTN.classList.add("selected");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.setPlaying = () => {\r\n            if (this.start && !this.stop && !this.end) {\r\n                this.play = true;\r\n                this.pause = false;\r\n                this.end = false;\r\n                this.stop = false;\r\n                this.changePlayButtonBKG();\r\n            }\r\n        };\r\n        this.setStop = () => {\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.end = false;\r\n            this.stop = true;\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.setPaused = () => {\r\n            if (this.start && !this.stop && !this.reset) {\r\n                this.play = false;\r\n                this.pause = true;\r\n                this.end = false;\r\n                this.changePlayButtonBKG();\r\n            }\r\n        };\r\n        this.setReset = async () => {\r\n            if (this.reset)\r\n                return;\r\n            this.reset = true;\r\n            setTimeout(function () {\r\n                aniControl.reset = false;\r\n            }, 200);\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.setEnd = () => {\r\n            // console.log(" END ");\r\n            this.start = true;\r\n            this.play = false;\r\n            this.pause = false;\r\n            this.end = true;\r\n            this.changePlayButtonBKG();\r\n        };\r\n        this.isAni1 = () => {\r\n            return this.animationType == AnimationsTyp.Typ1;\r\n        };\r\n        this.isAni2 = () => {\r\n            return this.animationType == AnimationsTyp.Typ2;\r\n        };\r\n        this.isAni3 = () => {\r\n            return this.animationType == AnimationsTyp.Typ3;\r\n        };\r\n        this.changePlayButtonBKG = () => {\r\n            let elem = getHtmlElement("play");\r\n            if (this.end || this.pause || this.reset || this.stop) {\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n                this.removeSmoothScroll();\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n                inputText.classList.remove("scrollDisabled");\r\n                outputText.classList.remove("scrollDisabled");\r\n                descriptionLines.classList.remove("scrollDisabled");\r\n                symbolTableLines.classList.remove("scrollDisabled");\r\n                descriptionLines.classList.add("scrollSmooth");\r\n                elem.classList.remove("pausedBKG");\r\n                elem.classList.add("playingBKG");\r\n                return;\r\n            }\r\n            else if (this.play) {\r\n                setTranslatingDivVisible();\r\n                setCurrentLineHidden();\r\n                inputText.classList.add("scrollDisabled");\r\n                outputText.classList.add("scrollDisabled");\r\n                descriptionLines.classList.add("scrollDisabled");\r\n                symbolTableLines.classList.add("scrollDisabled");\r\n                if (this.speed < 3 && this.animationType != AnimationsTyp.Typ3) {\r\n                    inputText.classList.add("scrollSmooth");\r\n                    outputText.classList.add("scrollSmooth");\r\n                    descriptionLines.classList.add("scrollSmooth");\r\n                }\r\n                if (this.speed == 4) {\r\n                    descriptionLines.classList.remove("scrollSmooth");\r\n                }\r\n                else {\r\n                    descriptionLines.classList.add("scrollSmooth");\r\n                }\r\n                if (this.isAni3())\r\n                    descriptionLines.classList.remove("scrollSmooth");\r\n                elem.classList.add("pausedBKG");\r\n                elem.classList.remove("playingBKG");\r\n                return;\r\n            }\r\n        };\r\n        this.setSpeed = (n) => {\r\n            this.speed = n;\r\n            this.baseFrameTime = 1000 - this.speed * 240;\r\n            if (!this.loaded)\r\n                return;\r\n            this.setSmoothIfNecessery();\r\n            if (n >= 3) {\r\n                setTranslatingDivVisible();\r\n                setCurrentLineHidden();\r\n            }\r\n            else {\r\n                setTranslatingDivHidden();\r\n                setCurrentLineVisible();\r\n            }\r\n            if (n != 4) {\r\n                removeClassOfAll("hiddenDescriptionDiv");\r\n                setTranslatingDivHidden();\r\n            }\r\n        };\r\n        this.createEventListeners = () => {\r\n            this.setAnimationTyp1();\r\n            createClickListener("animationsTyp1", this.setAnimationTyp1);\r\n            createClickListener("animationsTyp2", this.setAnimationTyp2);\r\n            createClickListener("animationsTyp3", this.setAnimationTyp3);\r\n            createClickListener("speedDecrease", this.decreaseSpeed);\r\n            createClickListener("speedIncrease", this.increaseSpeed);\r\n            createClickListener("singleStep", this.setSinglestep);\r\n            try {\r\n                speedSlider.addEventListener("change", () => {\r\n                    this.setSpeed(speedSlider.valueAsNumber);\r\n                });\r\n                speedSlider.addEventListener("input", () => {\r\n                    this.setSpeed(speedSlider.valueAsNumber);\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        this.start = false;\r\n        this.play = false;\r\n        this.pause = false;\r\n        this.stop = false;\r\n        this.reset = false;\r\n        this.singleStepFlag = false;\r\n        this.end = false;\r\n        this.loaded = false;\r\n        this.speed = 1;\r\n        this.baseFrameTime = 800;\r\n        this.setSpeed(speedSlider.valueAsNumber);\r\n        this.frames = 60;\r\n    }\r\n    setLoaded(b) {\r\n        this.loaded = b;\r\n    }\r\n    setSmoothIfNecessery() {\r\n        if (this.play && this.animationType != AnimationsTyp.Typ3 && this.speed < 3) {\r\n            inputText.classList.add("scrollSmooth");\r\n            outputText.classList.add("scrollSmooth");\r\n            descriptionLines.classList.add("scrollSmooth");\r\n        }\r\n        if (this.play && this.animationType != AnimationsTyp.Typ3 && this.speed == 4) {\r\n            descriptionLines.classList.remove("scrollSmooth");\r\n        }\r\n        else {\r\n            descriptionLines.classList.add("scrollSmooth");\r\n        }\r\n    }\r\n    removeSmoothScroll() {\r\n        inputText.classList.remove("scrollSmooth");\r\n        outputText.classList.remove("scrollSmooth");\r\n    }\r\n}\r\nconst aniControl = new AnimationControl();\r\n\n;// CONCATENATED MODULE: ./src/InputWindow.ts\n\r\n\r\n\r\n\r\n\r\nconst errorDescriptionDiv = getHtmlElement(\'ErrorDescription\');\r\nconst inputWindowContainer = getHtmlElement(\'InputWindowContainter\');\r\nvar timeout;\r\nconst inputSelect = getHtmlElement("bsppSelect");\r\nconst filterableDescription = getHtmlElement("filterableDescription");\r\nclass InputWindow {\r\n    constructor(p) {\r\n        this.previousP = "0";\r\n        this.inputcontrol = InputLineControl.getInstance();\r\n        this.translate = () => {\r\n            try {\r\n                let s = this.InputTextAreaElement.value.split("\\n");\r\n                if (!(s.length < 1)) {\r\n                    this.pWindow.refreshInputStrings(s);\r\n                    this.pWindow.setPotentialConsts(this.preTranslateDefConst(s));\r\n                    this.inputcontrol.addInputLines(s);\r\n                }\r\n                else {\r\n                    throw new Error(\'No InputLines!\');\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.addLinetoTextArea = (s) => {\r\n            this.InputTextAreaElement.value = "";\r\n            s.forEach(e => {\r\n                this.InputTextAreaElement.value += e + "\\n";\r\n            });\r\n        };\r\n        this.translateAndGo = async () => {\r\n            await this.translate();\r\n            await this.pushInputLines();\r\n            await this.openEditWindow();\r\n        };\r\n        this.pushInputLines = async () => {\r\n            if (this.pWindow) {\r\n                await this.pWindow.reset();\r\n                await this.pWindow.refreshInputLines();\r\n                await this.pWindow.displayInputLines();\r\n            }\r\n        };\r\n        this.preTranslateDefConst = (ss) => {\r\n            let potentialConsts = [];\r\n            let s;\r\n            ss.forEach(e => {\r\n                let i = Manipulator_Manipulator.splitStringHalf(e, ";");\r\n                if (i[0].replace(/\\s/g, "") != "") {\r\n                    s = i[0].match(/(\\s*_|^_)\\w+(?=\\s+EQU\\s+([0-9]+|[A-Fa-f0-9]+h|[01]+b)\\s*$)/i);\r\n                    if (s != null) {\r\n                        potentialConsts.push(s[0].trim());\r\n                    }\r\n                }\r\n            });\r\n            // console.log(potentialConsts);\r\n            return potentialConsts;\r\n        };\r\n        this.switchInputContent = () => {\r\n            let s = inputSelect.value;\r\n            if (this.previousP == "0") {\r\n                bsp0 = this.InputTextAreaElement.value.split("\\n");\r\n                if (bsp0[bsp0.length - 1] == "") {\r\n                    bsp0.pop();\r\n                }\r\n            }\r\n            switch (s) {\r\n                case "0":\r\n                    this.addLinetoTextArea(bsp0);\r\n                    break;\r\n                case "1":\r\n                    this.addLinetoTextArea(bsp1);\r\n                    break;\r\n                case "2":\r\n                    this.addLinetoTextArea(bsp2);\r\n                    break;\r\n                case "3":\r\n                    this.addLinetoTextArea(bsp3);\r\n                    break;\r\n                case "4":\r\n                    this.addLinetoTextArea(bsp4);\r\n                    break;\r\n            }\r\n            this.previousP = s;\r\n        };\r\n        this.openEditWindow = () => {\r\n            try {\r\n                aniControl.setPaused();\r\n                let b = window.getComputedStyle(inputWindowContainer);\r\n                if (b.getPropertyValue(\'visibility\') == "hidden") {\r\n                    inputWindowContainer.style.visibility = "visible";\r\n                }\r\n                else {\r\n                    inputWindowContainer.style.visibility = "hidden";\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.createFilterable = () => {\r\n            let filterables = this.inputcontrol.filterables();\r\n            let elem;\r\n            let type = "";\r\n            if (this.filterOutput != null) {\r\n                filterables.forEach(e => {\r\n                    if (e == "Mnemocodes" || e == "PSEUDO-Mnemocodes") {\r\n                        if (e == "Mnemocodes") {\r\n                            type = "Mnemo";\r\n                        }\r\n                        else {\r\n                            type = "pseudoMnemo";\r\n                        }\r\n                        elem = document.createElement("h3");\r\n                        elem.innerHTML = e;\r\n                        elem.id = "filterable" + filterables.indexOf(e);\r\n                        elem.setAttribute("type", "title");\r\n                        this.filterOutput.appendChild(elem);\r\n                    }\r\n                    else {\r\n                        elem = document.createElement("p");\r\n                        elem.innerHTML = e;\r\n                        elem.id = "filterable" + filterables.indexOf(e);\r\n                        elem.setAttribute("type", type);\r\n                        this.filterOutput.appendChild(elem);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.filterOutputDiv = () => {\r\n            let s = this.filterInput.value;\r\n            let tempElem;\r\n            let i = 0;\r\n            s = s.replace(/\\s+/g, " ");\r\n            s = s.replace(/,\\s/g, ",");\r\n            tempElem = document.getElementById("filterable" + i);\r\n            while (tempElem != null) {\r\n                i++;\r\n                if (tempElem.getAttribute("type") == "Mnemo" || tempElem.getAttribute("type") == "pseudoMnemo") {\r\n                    if (tempElem.innerHTML.toLowerCase().startsWith(s.toLowerCase()) || s == " " || s == "") {\r\n                        tempElem.classList.add("filterableShown");\r\n                        tempElem.classList.remove("filterableNotShown");\r\n                    }\r\n                    else {\r\n                        tempElem.classList.remove("filterableShown");\r\n                        tempElem.classList.add("filterableNotShown");\r\n                    }\r\n                }\r\n                tempElem = document.getElementById("filterable" + i);\r\n            }\r\n            console.log(s);\r\n        };\r\n        this.createEventListeners = () => {\r\n            try {\r\n                const a = document.getElementById(\'EditWindowOpenButton\');\r\n                if (a != null) {\r\n                    a.addEventListener("click", this.openEditWindow);\r\n                }\r\n                else\r\n                    throw new Error("Element #EditWindowOpenButton is null!");\r\n                const c = document.getElementById(\'Submit\');\r\n                if (c != null) {\r\n                    c.addEventListener("click", this.translateAndGo);\r\n                }\r\n                else\r\n                    throw new Error("Element #Submit is null!");\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n            // createClickListener(\'Preview\',this.previewTranslation);\r\n            createClickListener(\'GenerateDummy\', this.generateDummy);\r\n            createClickListener(\'CloseInputWindow\', this.openEditWindow);\r\n            inputSelect.addEventListener("change", this.switchInputContent);\r\n            this.createFilterable();\r\n            document.getElementById("filterDiv").addEventListener("focusin", function () {\r\n                document.getElementById("filterOutput").setAttribute("filtering", "true");\r\n            });\r\n            /* document.getElementById("filterDiv")!.addEventListener("mouseup",function(){\r\n                document.getElementById("filterOutput")!.setAttribute("filtering","false");\r\n            }); */\r\n            document.getElementById("body").addEventListener("mouseup", (e) => {\r\n                let targetElem = document.getElementById("filterDiv");\r\n                if (targetElem != null) {\r\n                    if (e.target instanceof HTMLElement) {\r\n                        if (!e.target.id.startsWith("filter")) {\r\n                            document.getElementById("filterOutput").setAttribute("filtering", "false");\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            document.getElementById("filterDiv").addEventListener("touchstart", function () {\r\n                document.getElementById("filterOutput").setAttribute("filtering", "true");\r\n            });\r\n            document.getElementById("filterDiv").addEventListener("touchcancel", function () {\r\n                document.getElementById("filterOutput").setAttribute("filtering", "false");\r\n            });\r\n            this.filterInput.addEventListener("input", this.filterOutputDiv);\r\n            this.filterOutput.addEventListener("click", (e) => {\r\n                let targetElem;\r\n                if (e.target instanceof HTMLElement) {\r\n                    targetElem = document.getElementById("filterInput");\r\n                    if (targetElem != null) {\r\n                        if (e.target.getAttribute("type") == "Mnemo" || e.target.getAttribute("type") == "pseudoMnemo") {\r\n                            targetElem.value = e.target.innerHTML;\r\n                            navigator.clipboard.writeText(targetElem.value);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this.filterOutput.addEventListener("mouseover", (e) => {\r\n                let targetElem;\r\n                if (e.target instanceof HTMLElement) {\r\n                    targetElem = document.getElementById("filterableDescription");\r\n                    if (targetElem != null) {\r\n                        if (e.target.getAttribute("type") == "Mnemo" || e.target.getAttribute("type") == "pseudoMnemo") {\r\n                            descriptionLoader.loadDescription(e.target.innerHTML);\r\n                            if (timeout != null) {\r\n                                clearTimeout(timeout);\r\n                            }\r\n                            timeout = setTimeout(function () {\r\n                                document.getElementById("filterableDescription").style.visibility = "visible";\r\n                            }, 1200);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this.filterOutput.addEventListener("mouseout", (e) => {\r\n                let targetElem;\r\n                if (e.target instanceof HTMLElement) {\r\n                    if (timeout != null) {\r\n                        clearTimeout(timeout);\r\n                        document.getElementById("filterableDescription").style.visibility = "hidden";\r\n                    }\r\n                }\r\n            });\r\n            document.getElementById("filtercopyInputValue").addEventListener("click", function () {\r\n                var copyText = document.getElementById("filterInput");\r\n                if (copyText != null) {\r\n                    navigator.clipboard.writeText(copyText.value);\r\n                }\r\n            });\r\n        };\r\n        this.generateDummy = () => {\r\n            this.preTranslateDefConst(this.InputTextAreaElement.value.split("\\n"));\r\n        };\r\n        this.InputTextAreaElement = getHtmlElement(\'InputTextArea\');\r\n        this.pWindow = p;\r\n        this.filterInput = getHtmlElement("filterInput");\r\n        this.filterOutput = getHtmlElement("filterOutput");\r\n    }\r\n}\r\nlet bsp0 = [];\r\nconst bsp1 = [\r\n    "_const1 EQU 3434h", "Label1:Mov A,95h", "Mov B,95h", "Mov C,95h", "Mov IX,1295h", "Mov HL,1095h", "Mov SP,2395h", "Mov A,B",\r\n    "Mov A,C", "Mov B,A", "Mov B,C", "Mov C,A", "Mov C,B", "Mov A,Label1", "Mov HL,Label1", "Mov IX,Label1",\r\n    "Mov Label1,A", "Mov Label1,HL", "Mov Label1,IX", "MOV A,[HL]", "MOV [HL],A", "PUSH", "POP", "IN A, 67h",\r\n    "OUT 46, A", "INC A", "DEC A", "ADD A", "SUB A", "AND A", "OR A", "XOR A", "SHL", "SHR", "RCL", "ROL", "RCR",\r\n    "ROR", "CP A", "JP Label1", "CALL Label1", "RET", "HALT", "NOP", "DB 45h", "DW 45h", "RS 3", "ORG 2323h",\r\n];\r\nconst bsp2 = [\r\n    "mov hl, 0",\r\n    "mov hl, 00h",\r\n    "mov hl, 000000000000000000000000h",\r\n    "mov hl, 000000000000000000000000",\r\n    "dw 0",\r\n    "dw 00",\r\n    "dw 000",\r\n    "dw 0000",\r\n    "dw 000000000",\r\n    "org 0000",\r\n    "org 0",\r\n    "const equ 0000h",\r\n    "const2 equ 00h",\r\n    "const3 equ 0",\r\n    ";org h"\r\n];\r\nconst bsp3 = [\r\n    "label1:",\r\n    "label2:",\r\n    "label3:",\r\n    "label4:",\r\n    "label5:",\r\n    "label6:",\r\n    "label7:",\r\n    "label8:",\r\n    "label9:",\r\n    "label10:",\r\n    "",\r\n    "label:jp label",\r\n    "jp label1",\r\n    "jp label4",\r\n    "jp label5",\r\n    "jp label4"\r\n];\r\nconst bsp4 = [\r\n    "_const equ 1343h",\r\n    "_var equ 12",\r\n    "",\r\n    "mov a, _var",\r\n    "in a,_var",\r\n    "in a,_const",\r\n    "label: mov hl,_var",\r\n];\r\n\n;// CONCATENATED MODULE: ./src/Backend/StringConstructor.ts\n\r\n\r\nconst warningClass = "warning";\r\nconst errClass = "errorRed";\r\nconst labelClass = "labelBlue";\r\nclass StringConstructor {\r\n    constructor() {\r\n    }\r\n    static info(s) {\r\n        return `<span class="eingeruckt">${s}<span>`;\r\n    }\r\n    static warning(s) {\r\n        return `<span class="${warningClass} eingeruckt">Achtung : ${s}<span>`;\r\n    }\r\n    static error(s) {\r\n        return `<span class="errorRed ">error: ${s}</span>`;\r\n    }\r\n    static plusError(s) {\r\n        return `<span class="pluserrRed eingeruckt">${s}</span>`;\r\n    }\r\n    static warLabelZuLang(s) {\r\n        return this.warning(`Label \'<span class="${labelClass}">${s}</span>\' >${erlaubteLängeL_C} Zeichen`);\r\n    }\r\n    static warConstZuLang(s) {\r\n        return this.warning(`Konstante ${s} >${erlaubteLängeL_C} Zeichen`);\r\n    }\r\n    static warLabelND(s) {\r\n        return this.warning(`Label \'<span class="${labelClass}">${s}</span>\' mit Hex-Zahl verwechselbar`);\r\n    }\r\n    static warAddrOverwriten() {\r\n        return this.warning(`Adresse von aufgelösten Befehl ist bereits besetzt!`);\r\n    }\r\n    static errLabelDef(s) {\r\n        return this.error(`Label \'<span class="${labelClass}">${s}</span>\' ist bereits definiert`);\r\n    }\r\n    static errConstDef(s) {\r\n        return this.error(`Konstante ${s} ist bereits definiert`);\r\n    }\r\n    static invalidLabel(s) {\r\n        return this.error(`${s} kein gülitger Label`); // ungültiger Label\r\n    }\r\n    static invalidCmd(s) {\r\n        return this.error(`${s} ungültiger Operand`); //ungültiger Befehl\r\n    }\r\n    static toofewCmd() {\r\n        return this.error(`fehlender Operand`); //zu wenige Operanden\r\n    }\r\n    static tooManyCmd() {\r\n        return this.error(`zu viele Operanden`);\r\n    }\r\n    static noValidLabelAfterOffset() {\r\n        return this.error(`gefunden wurde OFFSET aber kein gültiger label!`);\r\n    }\r\n    static bugNoCommand() {\r\n        return this.error("keine passende Befehl gefunden!");\r\n    }\r\n    static bugSwitchDefault() {\r\n        return this.error("unbekannter Fehler ist aufgetreten");\r\n    }\r\n    static bugNoValueForConst(s) {\r\n        return this.error(`Wert für Konstante ${s} nicht gefunden!`);\r\n    }\r\n    static expectedDat8() {\r\n        return this.error("erwartet war 8-bit Wert");\r\n    }\r\n    static expectedDat8ConstToBig(s) {\r\n        return this.error(`erwartet war 8-bit Wert, Konstante ${s} ist zu groß`);\r\n    }\r\n    static expectedDat8Plus(s) {\r\n        return this.error(`erwartet war 8-bit Wert, ${s} ist kein gültiger Operand`);\r\n    }\r\n    static expectedDat16() {\r\n        return this.error("erwartet war 16-bit Wert");\r\n    }\r\n    static expectedDat16Plus(s) {\r\n        return this.error(`erwartet war 16-bit Wert, ${s} ist kein gültiger Operand`);\r\n    }\r\n    static nameTakenForLabel(s) {\r\n        return this.error(`Symbolbezeichnung ${s} bereits als Label definiert`);\r\n    }\r\n    static nameTakenForConst(s) {\r\n        return this.error(`Symbolbezeichnung ${s} bereits als Konstante definiert`);\r\n    }\r\n    static noConstafterLabelDef() {\r\n        return this.error(`keine Konstantendefinition nach einer Labeldefinition erlaubt`);\r\n    }\r\n    static noValidConstOrOperand(s) {\r\n        return this.error(`${s} ungültiger Befehl oder Konstantendefinition`);\r\n    }\r\n    static notValidLabelSinceItsConst(s) {\r\n        return this.plusError(`<span class="${labelClass}">${s}</span> ist kein gültiges Label, bereits als Konstante definiert`);\r\n    }\r\n    static noConstDefAllowed() {\r\n        return this.error(`Konstantendefinition nur am Anfang erlaubt`);\r\n    }\r\n    static infoIsDat8() {\r\n        return this.info("überprüfe auf 8-Bit Wert ... gefunden");\r\n    }\r\n    static infoNotDat8() {\r\n        return this.info("überprüfe auf 8-Bit Wert ... nicht gefunden");\r\n    }\r\n    static infoIsDat16() {\r\n        return this.info("überprüfe auf 16-Bit Wert ... gefunden");\r\n    }\r\n    static infoNotDat16() {\r\n        return this.info("überprüfe auf 16-Bit Wert ... nicht gefunden");\r\n    }\r\n    static infoInvalidConst(s) {\r\n        return this.info(`\'${s}\' ist kein gültiger Konstantenname`);\r\n    }\r\n    static infoNotDat8Const(s) {\r\n        return this.info(`suche 8-Bit Konstante <span class="${labelClass}">${s}<span> ... nicht gefunden`);\r\n    }\r\n    static infoNotDat16Const(s) {\r\n        return this.info(`suche 16-Bit Konstante <span class="${labelClass}">${s}<span> ...  nicht gefunden`);\r\n    }\r\n    static infoIsDat8Const(s) {\r\n        return this.info(`suche 8-Bit Konstante <span class="${labelClass}">${s}<span> ... gefunden`);\r\n    }\r\n    static infoIsDat16Const(s) {\r\n        return this.info(`suche 16-Bit Konstante <span class="${labelClass}">${s}<span> ... gefunden`);\r\n    }\r\n    static infoInvalidLabel(s) {\r\n        return this.info(`\'${s}\' ist kein gültiges Label`);\r\n    }\r\n    static infoIsLabel(s) {\r\n        return this.info(`suche Label <span class="${labelClass}">${s}<span> ... gefunden`);\r\n    }\r\n}\r\nclass DescriptionLoader {\r\n    constructor() {\r\n        this.loadDescription = (s) => {\r\n            if (this.magicWand[s]) {\r\n                this.magicWand[s]();\r\n            }\r\n            else\r\n                console.log("Method with name " + s + " is not implemented");\r\n        };\r\n        this.mov_a_b = () => {\r\n            filterableDescription.innerHTML =\r\n                `\r\n        <h2>MOV A,B:</h2>\r\n        <p>some text<p>\r\n        `;\r\n        };\r\n        this.magicWand = {\r\n            "MOV A,B": this.mov_a_b,\r\n        };\r\n    }\r\n}\r\nconst descriptionLoader = new DescriptionLoader();\r\n\n;// CONCATENATED MODULE: ./src/Backend/CommandMap.ts\n\r\n\r\n\r\n\r\n\r\nconst parse1 = `<span class="gray">parse Labelfeld/Befehlsfeld:</span>`;\r\nconst parse2 = `<span class="gray">parse Befehlsfeld:</span>`;\r\nconst parse3 = `<span class="gray">parse Operandenfeld (1):</span>`;\r\nconst parse4 = `<span class="gray">parse Operandenfeld (2):</span>`;\r\nconst parse5 = `<span class="gray">gesamter Befehl:</span>`;\r\nconst saveInput = (I, n) => {\r\n    switch (n) {\r\n        case 1:\r\n            I.saveDescriptionLine(parse1);\r\n            break;\r\n        case 2:\r\n            I.saveDescriptionLine(parse2);\r\n            break;\r\n        case 3:\r\n            I.saveDescriptionLine(parse3);\r\n            break;\r\n        case 4:\r\n            I.saveDescriptionLine(parse4);\r\n            break;\r\n        case 5:\r\n            I.saveDescriptionLine(parse5);\r\n            break;\r\n    }\r\n};\r\nconst save2 = (i) => {\r\n    saveInput(i, 2);\r\n};\r\nconst save3 = (i) => {\r\n    saveInput(i, 3);\r\n};\r\nconst save4 = (i) => {\r\n    saveInput(i, 4);\r\n};\r\nconst registerAdressierung = "Registeradressierung";\r\nconst indirekteRegAdressierung = "indirekte Registeradressierung";\r\nconst immediateAdressierung = "Immediateadressierung";\r\nconst absoluteAdressierung = "Absolutadressierung";\r\nconst stackBefehl = "Stackbefehl";\r\nconst ioAdressierung = "IO Adressierung";\r\nclass CommandMap {\r\n    constructor() {\r\n        this.mnemoCommands = [\r\n            //TRANSPORTBEFEHLE\r\n            //Immediate laden\r\n            new MnemoCommand("MOV", "A", "dat_8", "00 111 110", 2),\r\n            new MnemoCommand("MOV", "B", "dat_8", "00 000 110", 2),\r\n            new MnemoCommand("MOV", "C", "dat_8", "00 001 110", 2),\r\n            new MnemoCommand("MOV", "IX", "dat_16", "11 011 10100 100 001", 4),\r\n            new MnemoCommand("MOV", "HL", "dat_16", "00 100 001", 3),\r\n            new MnemoCommand("MOV", "SP", "dat_16", "00 110 001", 3),\r\n            //Direkte Adressierung Register<>Register\r\n            new MnemoCommand("MOV", "A", "B", "01 111 000", 1),\r\n            new MnemoCommand("MOV", "A", "C", "01 111 001", 1),\r\n            new MnemoCommand("MOV", "B", "A", "01 000 111", 1),\r\n            new MnemoCommand("MOV", "B", "C", "01 000 001", 1),\r\n            new MnemoCommand("MOV", "C", "A", "01 001 111", 1),\r\n            new MnemoCommand("MOV", "C", "B", "01 001 000", 1),\r\n            //Direkte Adressierung Register<>Speicher\r\n            new MnemoCommand("MOV", "A", "label", "00 111 010", 3),\r\n            new MnemoCommand("MOV", "label", "A", "00 110 010", 3),\r\n            new MnemoCommand("MOV", "HL", "label", "00 101 010", 3),\r\n            new MnemoCommand("MOV", "label", "HL", "00 100 010", 3),\r\n            new MnemoCommand("MOV", "IX", "label", "11 011 10100 101 010", 4),\r\n            new MnemoCommand("MOV", "label", "IX", "11 011 10100 100 010", 4),\r\n            //Registerindirekte Adressierung\r\n            new MnemoCommand("MOV", "A", "[HL]", "01 111 110", 1),\r\n            new MnemoCommand("MOV", "[HL]", "A", "01 110 111", 1),\r\n            //Stackbefehle\r\n            new MnemoCommand("PUSH", "", "", "11 110 101", 1),\r\n            new MnemoCommand("POP", "", "", "11 110 001", 1),\r\n            //Ein-Ausgabebefehle\r\n            new MnemoCommand("IN", "A", "port", "11 011 011", 2),\r\n            new MnemoCommand("OUT", "port", "A", "11 010 011", 2),\r\n            //BEFEHLE ZUR DATENBEARBEITUNG\r\n            //Inkrement- und Dekrementbefehle\r\n            new MnemoCommand("INC", "A", "", "00 111 100", 1),\r\n            new MnemoCommand("INC", "B", "", "00 000 100", 1),\r\n            new MnemoCommand("INC", "C", "", "00 001 100", 1),\r\n            new MnemoCommand("INC", "HL", "", "00 100 011", 1),\r\n            new MnemoCommand("INC", "IX", "", "11 011 10100 100 011", 2),\r\n            new MnemoCommand("DEC", "A", "", "00 111 101", 1),\r\n            new MnemoCommand("DEC", "B", "", "00 000 101", 1),\r\n            new MnemoCommand("DEC", "C", "", "00 001 101", 1),\r\n            new MnemoCommand("DEC", "HL", "", "00 101 011", 1),\r\n            new MnemoCommand("DEC", "IX", "", "11 011 10100 101 011", 2),\r\n            //Arithmetische Operationen\r\n            new MnemoCommand("ADD", "A", "", "10 000 111", 1),\r\n            new MnemoCommand("ADD", "B", "", "10 000 000", 1),\r\n            new MnemoCommand("ADD", "C", "", "10 000 001", 1),\r\n            new MnemoCommand("ADD", "dat_8", "", "11 000 110", 2),\r\n            new MnemoCommand("SUB", "A", "", "10 010 111", 1),\r\n            new MnemoCommand("SUB", "B", "", "10 010 000", 1),\r\n            new MnemoCommand("SUB", "C", "", "10 010 001", 1),\r\n            new MnemoCommand("SUB", "dat_8", "", "11 010 110", 2),\r\n            //Logische Operationen\r\n            new MnemoCommand("AND", "A", "", "10 100 111", 1),\r\n            new MnemoCommand("AND", "B", "", "10 100 000", 1),\r\n            new MnemoCommand("AND", "C", "", "10 100 001", 1),\r\n            new MnemoCommand("AND", "dat_8", "", "11 100 110", 2),\r\n            new MnemoCommand("OR", "A", "", "10 110 111", 1),\r\n            new MnemoCommand("OR", "B", "", "10 110 000", 1),\r\n            new MnemoCommand("OR", "C", "", "10 110 001", 1),\r\n            new MnemoCommand("OR", "dat_8", "", "11 110 110", 2),\r\n            new MnemoCommand("XOR", "A", "", "10 101 111", 1),\r\n            new MnemoCommand("XOR", "B", "", "10 101 000", 1),\r\n            new MnemoCommand("XOR", "C", "", "10 101 001", 1),\r\n            new MnemoCommand("XOR", "dat_8", "", "11 101 110", 2),\r\n            //Schiebebefehle\r\n            new MnemoCommand("SHL", "", "", "11 001 01100 100 111", 2),\r\n            new MnemoCommand("SHR", "", "", "11 001 01100 111 111", 2),\r\n            //Rotierbefehle\r\n            new MnemoCommand("RCL", "", "", "00 010 111", 1),\r\n            new MnemoCommand("ROL", "", "", "00 000 111", 1),\r\n            new MnemoCommand("RCR", "", "", "00 011 111", 1),\r\n            new MnemoCommand("ROR", "", "", "00 001 111", 1),\r\n            //Vergleichsoperationen\r\n            new MnemoCommand("CP", "A", "", "10 111 111", 1),\r\n            new MnemoCommand("CP", "B", "", "10 111 000", 1),\r\n            new MnemoCommand("CP", "C", "", "10 111 001", 1),\r\n            new MnemoCommand("CP", "dat_8", "", "11 111 110", 2),\r\n            //BEFEHLE FÜR VERZWEIGUNGEN\r\n            //Bedingte Sprünge\r\n            new MnemoCommand("JPNZ", "label", "", "11 000 010", 3),\r\n            new MnemoCommand("JPZ", "label", "", "11 001 010", 3),\r\n            new MnemoCommand("JPNC", "label", "", "11 010 010", 3),\r\n            new MnemoCommand("JPC", "label", "", "11 011 010", 3),\r\n            new MnemoCommand("JPNO", "label", "", "11 100 010", 3),\r\n            new MnemoCommand("JPO", "label", "", "11 101 010", 3),\r\n            new MnemoCommand("JPNS", "label", "", "11 110 010", 3),\r\n            new MnemoCommand("JPS", "label", "", "11 111 010", 3),\r\n            //Unbedingter Sprung\r\n            new MnemoCommand("JP", "label", "", "11 000 011", 3),\r\n            //Registerinderkter Sprung\r\n            new MnemoCommand("JP", "[IX]", "", "11 011 10111 101 001", 2),\r\n            //Unterprogrammbefehle\r\n            new MnemoCommand("CALL", "label", "", "11 001 101", 3),\r\n            new MnemoCommand("RET", "", "", "11 001 001", 1),\r\n            //CPU-STEUERBEFEHLE\r\n            //Leerbefehl\r\n            new MnemoCommand("NOP", "", "", "00 000 000", 1),\r\n            //Haltbefehl\r\n            new MnemoCommand("HALT", "", "", "01 110 110", 1),\r\n        ];\r\n        this.symbollist = SymbolList.getInstance();\r\n        this.mCodes = ["MOV", "PUSH", "POP", "IN", "OUT", "INC", "DEC", "ADD", "SUB", "AND", "OR", "XOR", "SHL", "SHR", "RCL", "ROL", "RCR", "ROR", "CP", "JPNZ", "JPZ", "JPNC", "JPC", "JPNO", "JPO", "JPNS", "JPS", "JP", "CALL", "RET", "NOP", "HALT"];\r\n        this.pseudoMCodes = ["DB", "DW", "RS", "ORG", "EXT", "ENT"];\r\n        this.Regs = ["A", "B", "C", "IX", "HL", "SP", "[HL]", "[IX]"];\r\n        this.constDefFlag = true;\r\n        this.filterableString = () => {\r\n            let toReturn = [];\r\n            let toSort = [];\r\n            toReturn.push("Mnemocodes");\r\n            this.mnemoCommands.forEach(e => {\r\n                toSort.push(e.toFilterableString());\r\n            });\r\n            toSort.sort().forEach(e => {\r\n                toReturn.push(e);\r\n            });\r\n            toReturn.push("PSEUDO-Mnemocodes");\r\n            toReturn.push("const EQU dat_16");\r\n            toReturn.push("DB dat_8");\r\n            toReturn.push("DW dat_16");\r\n            toReturn.push("ORG dat_16");\r\n            toReturn.push("RS dat_8");\r\n            return toReturn;\r\n        };\r\n        this.getCommands = () => {\r\n            return this.mnemoCommands;\r\n        };\r\n    }\r\n    static getInstance() {\r\n        if (!CommandMap.instance) {\r\n            CommandMap.instance = new CommandMap();\r\n        }\r\n        return CommandMap.instance;\r\n    }\r\n    formatGefunden(s1, s2) {\r\n        return `<span class="eingeruckt">gefunden: ${s1 != "" ? s1 + \' \' : ""} -> <span class="bold">${s2}</span></span>`;\r\n    }\r\n    formatErwartet(s1) {\r\n        // return \'erwarte: \'+s1;\r\n        s1 = s1.replace("dat_8", "8-bit Wert").replace("dat_16", "16-bit Wert").replace("label", "Label");\r\n        return `<span class="eingeruckt">erwarte&nbsp;: ${s1}</span>`;\r\n    }\r\n    formatErkannt(s1) {\r\n        return `<span class="eingeruckt"> (${s1})</span>`;\r\n    }\r\n    formatErrorMassage(s1) {\r\n        return `<span class="errorRed">error: ${s1}</span>`;\r\n    }\r\n    filterForEmtpyStrings(s) {\r\n        return s.filter(e => { if (!/^[\\s+]/g.test(e) && e != "") {\r\n            return e;\r\n        } });\r\n    }\r\n    resetConstDefFlag() {\r\n        this.constDefFlag = true;\r\n    }\r\n    mapInputLineByCase(i) {\r\n        let strings = Manipulator_Manipulator.splitStringHalf(i.getInitialLine(), \';\');\r\n        let commandLine = strings[0];\r\n        if (strings.length > 1) {\r\n            i.setComment(strings[1].trim());\r\n        }\r\n        saveInput(i, 1);\r\n        this.constDefFlag\r\n            ? i.saveDescriptionLine(this.formatErwartet(`Labeldef., Mnemocode oder Konstante (+EQU)`))\r\n            : i.saveDescriptionLine(this.formatErwartet(`Labeldef. oder Mnemocode`));\r\n        //Auflösung von lebel wenn : gefunden\r\n        if (commandLine.includes(":")) {\r\n            strings = Manipulator_Manipulator.splitStringHalf(commandLine, ":");\r\n            i.setLabelTo("");\r\n            //Darf nicht bereits definiert label sein die in Symboltabelle ist\r\n            if (this.symbollist.isConst(strings[0])) {\r\n                i.saveDescriptionLine(StringConstructor.nameTakenForConst(strings[0]));\r\n                i.setError(strings[0]);\r\n                i.setRest(": " + strings[1]);\r\n                i.setValid(false);\r\n                return false;\r\n            }\r\n            else if (this.symbollist.isLabel(strings[0])) {\r\n                if (this.symbollist.getPositionOfSpecificLabel(strings[0]) != undefined) {\r\n                    // i.saveDescriptionLine(this.formatErrorMassage(`Label ${strings[0]} ist schon bereits besetzt`)); \r\n                    i.saveDescriptionLine(StringConstructor.errLabelDef(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    i.setRest(": " + strings[1]);\r\n                    i.setValid(false);\r\n                    return false;\r\n                }\r\n            }\r\n            if (!this.symbollist.isEligible(strings[0])) {\r\n                i.saveDescriptionLine(StringConstructor.invalidLabel(strings[0]));\r\n                i.setError(strings[0]);\r\n                i.setRest(": " + strings[1]);\r\n                i.setValid(false);\r\n                return false;\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(this.formatGefunden("Doppelpunkt ", `Label \'${strings[0]}\'`)); // ??\r\n                i.setLabelTo(strings[0]);\r\n                //Wenn zu lang, Warnung gesetzt\r\n                if (strings[0].length > erlaubteLängeL_C) {\r\n                    i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[0]));\r\n                }\r\n                else if (strings[0].match(/^[A-Fa-f0-9]{1,4}h$/) != null) {\r\n                    i.saveDescriptionLine(StringConstructor.warLabelND(strings[0]));\r\n                }\r\n                this.symbollist.setLabelWithoutPosition(strings[0]);\r\n                saveInput(i, 2);\r\n                i.saveDescriptionLine(this.formatErwartet("(Pseudo-)Mnemocode"));\r\n                if (strings[1] == "") {\r\n                    i.saveDescriptionLine(`<span class="eingeruckt">gefunden: Ende der Codezeile</span>`); // ??\r\n                    i.setType(InputLineType.PSEUDOTRANSLATED);\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                commandLine = strings[1];\r\n            }\r\n        }\r\n        strings = Manipulator_Manipulator.splitStringHalfUnfiltered(commandLine, " ");\r\n        strings = this.filterForEmtpyStrings(strings);\r\n        //erster Term MnemoCode\r\n        if (this.mCodes.includes(strings[0].toUpperCase())) {\r\n            i.setFirstPart(strings[0]);\r\n            strings[0] = strings[0].toUpperCase();\r\n            return this.parseToMnemoCode(i, strings);\r\n        } //erster Term PseudoMnemoCode - mögliche ConstantenName\r\n        else if (this.pseudoMCodes.includes(strings[0].toUpperCase()) || this.symbollist.isEligible_Const(strings[0])) {\r\n            return this.parsetoPseudoMnemoCode(i, strings);\r\n        }\r\n        else {\r\n            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(strings[1]);\r\n            }\r\n            i.setValid(false);\r\n            return false;\r\n        }\r\n    }\r\n    parseToMnemoCode(i, strings) {\r\n        let consoletostring = "";\r\n        let matches = [];\r\n        let toSave = "";\r\n        this.constDefFlag = false;\r\n        //Behandlung aller Fälle wo der 1. Term mit einem MnemoCode anfangt\r\n        switch (strings[0]) {\r\n            case \'MOV\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'MOV\'; }); //Alle treffer auf MOV Codes filtriert\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd()); //ERROR\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                strings = Manipulator_Manipulator.splitStringHalfUnfiltered(strings[1], ",");\r\n                // strings = this.filterForEmtpyStrings(strings);\r\n                // 2. Term Register\r\n                if (this.getDests(matches).includes(strings[0].toUpperCase())\r\n                    && this.Regs.includes(strings[0].toUpperCase())) { // A || B || C || IX || HL || SP\r\n                    toSave = strings[0];\r\n                    i.setSecondPart(toSave);\r\n                    strings[0] = strings[0].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0] + " ..."));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[0]) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    consoletostring = this.getScources(matches).join(", ");\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd()); //ERROR\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    // 3. Term Register\r\n                    if (this.getScources(matches).includes(strings[1].toUpperCase()) && this.Regs.includes(strings[1].toUpperCase())) { // A || B || C || [HL]\r\n                        toSave = strings[1];\r\n                        strings[1] = strings[1].toUpperCase();\r\n                        i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + strings[1]));\r\n                        matches = matches.filter(e => {\r\n                            if (e.getSource() == strings[1]) {\r\n                                return e;\r\n                            }\r\n                        });\r\n                        if (matches.length == 1) {\r\n                            i.setThirdPart(toSave);\r\n                            if (strings[0] == "[HL]" || strings[1] == "[HL]") {\r\n                                i.saveDescriptionLine(this.formatErkannt(indirekteRegAdressierung));\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                            }\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            //Bug aufgetrenten oder unbeachtetter fall\r\n                            i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // 3. Term nicht Register -> OFFSET Label || dat || const || label\r\n                        // console.log(strings[1]+" "+this.getDataType(strings[1]))\r\n                        if (this.getDataType(strings[1]) != DataType.NONE) {\r\n                            let type = this.getDataType(strings[1]);\r\n                            switch (type) {\r\n                                case DataType.dat_8:\r\n                                    if (consoletostring.includes("dat_8")) {\r\n                                        //i.saveDescriptionLine(`Gefunden -> \'dat_8\'`);\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat8());\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),"MOV "+strings[0]+", "+Manipulator.formatHextoDat8(strings[1])));\r\n                                        i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[1], "MOV " + strings[0] + ", " + strings[1])); // DecOrHex\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_8") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // Änderung\r\n                                        // i.setThirdPart(Manipulator.formatHextoDat8(strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        i.setThirdPart((strings[1]));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_16")) {\r\n                                        //i.saveDescriptionLine(`Gefunden -> \'dat_16\'`);\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat16());\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(this.formatGefunden("16-bit Wert " + strings[1], "MOV " + strings[0] + ", " + strings[1])); // DecOrHex\r\n                                        // i.saveDescriptionLine(this.formatGefunden("16-bit Wert "+Manipulator.formatHextoDat16(strings[1]),"MOV "+strings[0]+", "+Manipulator.formatHextoDat16(strings[1])));\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_16") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // Änderung\r\n                                        i.setThirdPart((strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1])); //can only be [HL]\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                case DataType.dat_16:\r\n                                    if (consoletostring.includes("dat_16") && [\'HL\', \'SP\', \'IX\'].includes(strings[0])) {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        // i.saveDescriptionLine(this.formatGefunden("16-bit Wert "+Manipulator.formatHextoDat16(strings[1]),"MOV "+strings[0]+", "+Manipulator.formatHextoDat16(strings[1])));\r\n                                        i.saveDescriptionLine(this.formatGefunden("16-bit Wert " + strings[1], "MOV " + strings[0] + ", " + strings[1])); // DecOrHex\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_16") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        i.setThirdPart((strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_8")) {\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNoConst(strings[1]));\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNoLabel(strings[1]));\r\n                                        // i.saveDescriptionLine(StringConstructor.expectedDat8Plus(strings[1]));\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    else {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1])); //can only be [HL]\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    break;\r\n                                case DataType.CONSTANT:\r\n                                    let value = this.symbollist.getSpecificConstantByName(strings[1])?.getValue();\r\n                                    if (value == undefined) { //bug Aufgetreten oder Konstante nicht angelegt\r\n                                        i.saveDescriptionLine(StringConstructor.bugNoValueForConst(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        return false;\r\n                                    }\r\n                                    type = this.getDataType(value);\r\n                                    if (consoletostring.includes("dat_8") && type == DataType.dat_8) { //Konstante hat Datentyp \'dat_8\' und ist erwartet\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_8") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat8Const(strings[1])); //CONST ANIMATION????\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(this.formatGefunden("Konstante " + `<span class="labelBlue">${strings[1]}</span>` + " mit dem Wert " + value, i.getFirstPart().toUpperCase() + " " + strings[0] + ", " + strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_16")) { //Konstante hat Datentyp \'dat_16\' und ist erwartet\r\n                                        matches = matches.filter(e => {\r\n                                            if (e.getSource() == "dat_16") {\r\n                                                return e;\r\n                                            }\r\n                                        });\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoIsDat16Const(strings[1])); //CONST ANIMATION????\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(this.formatGefunden("Konstante " + `<span class="labelBlue">${strings[1]}</span>` + " mit dem Wert " + value, i.getFirstPart().toUpperCase() + " " + strings[0] + ", " + strings[1]));\r\n                                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                        break;\r\n                                    }\r\n                                    else if (consoletostring.includes("dat_8")) {\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                                        // i.saveDescriptionLine(StringConstructor.infoNotDat8Const(strings[1]));\r\n                                        // if(consoletostring.includes("label")){\r\n                                        //     i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(strings[1]));\r\n                                        // }\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        // i.saveDescriptionLine(StringConstructor.expectedDat8Plus(strings[1])); //KONSTANTE ZU GROß?\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    else {\r\n                                        // if(consoletostring.includes("label")){\r\n                                        //     i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(strings[1]));\r\n                                        // }\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        return false;\r\n                                    }\r\n                                    break;\r\n                                case DataType.LABEL:\r\n                                    if (!consoletostring.includes("label")) {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    let value1 = this.symbollist.getSpecificLabelByName(strings[1]);\r\n                                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${value1?.getName()}</span>\'`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + value1?.getName()));\r\n                                    // WARNING EINSETZEN?\r\n                                    i.setThirdPart(strings[1]);\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "label") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                                    break;\r\n                                case DataType.ELLIGIBLE:\r\n                                    if (!consoletostring.includes("label")) {\r\n                                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                        i.setError(strings[1]);\r\n                                        i.setValid(false);\r\n                                        return false;\r\n                                    }\r\n                                    this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[1]}</span>\'`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", " + strings[1]));\r\n                                    i.setThirdPart(strings[1]);\r\n                                    matches = matches.filter(e => {\r\n                                        if (e.getSource() == "label") {\r\n                                            return e;\r\n                                        }\r\n                                    });\r\n                                    i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                                    break;\r\n                                default:\r\n                                    i.saveDescriptionLine(StringConstructor.bugSwitchDefault());\r\n                                    return false;\r\n                            }\r\n                            if (matches.length == 1) {\r\n                                i.setThirdPart(strings[1]);\r\n                                i.setType(InputLineType.TRANSLATED);\r\n                                i.setLength(matches[0].getSize());\r\n                                i.setHCode(matches[0].getHexCode());\r\n                                i.setValid(true);\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                                return false;\r\n                            }\r\n                        } //möglicher weise OFFSET Label\r\n                        else if (strings[1].toUpperCase().startsWith("OFFSET")) {\r\n                            let temp = Manipulator_Manipulator.splitStringHalf(strings[1], " ");\r\n                            if (temp.length < 2) {\r\n                                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                i.setError(strings[1]);\r\n                                return false;\r\n                            }\r\n                            if (this.getDataType(temp[1]) == DataType.LABEL) {\r\n                                if (!consoletostring.includes("dat_16")) {\r\n                                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                i.saveDescriptionLine(this.formatGefunden(`OFFSET`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", OFFSET " + temp[1]));\r\n                                matches = matches.filter(e => {\r\n                                    if (e.getSource() == "dat_16") {\r\n                                        return e;\r\n                                    }\r\n                                });\r\n                            }\r\n                            else if (this.getDataType(temp[1]) == DataType.ELLIGIBLE) {\r\n                                if (!consoletostring.includes("dat_16")) {\r\n                                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                    i.setError(strings[1]);\r\n                                    i.setValid(false);\r\n                                    return false;\r\n                                }\r\n                                this.symbollist.setLabelWithoutPosition(temp[1]);\r\n                                i.saveDescriptionLine(this.formatGefunden(`OFFSET`, i.getFirstPart().toUpperCase() + " " + i.getSecondPart().toUpperCase() + ", OFFSET " + temp[1]));\r\n                                if (temp[1].length > erlaubteLängeL_C) {\r\n                                    i.saveDescriptionLine(StringConstructor.warLabelZuLang(temp[1]));\r\n                                }\r\n                                matches = matches.filter(e => {\r\n                                    if (e.getSource() == "dat_16") {\r\n                                        return e;\r\n                                    }\r\n                                });\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(StringConstructor.noValidLabelAfterOffset());\r\n                                i.setError(strings[1]);\r\n                                return false;\r\n                            }\r\n                            if (matches.length == 1) {\r\n                                i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                                i.setThirdPart(strings[1]);\r\n                                i.setType(InputLineType.TRANSLATED);\r\n                                i.setLength(matches[0].getSize());\r\n                                i.setHCode(matches[0].getHexCode());\r\n                                i.setOffsetLabel(true);\r\n                                i.setValid(true);\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                                i.setError(strings[1]);\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (strings[1].trim() == "" || strings[1].trim() == " ") {\r\n                                i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                            }\r\n                            else {\r\n                                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            }\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.symbollist.isLabel(strings[0]) || this.symbollist.isEligible(strings[0])) { // MUSS label sein\r\n                    this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[0]}</span>\'`, i.getFirstPart().toUpperCase() + " " + strings[0] + " ..."));\r\n                    // WARNING EINSETZEN?\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    i.setSecondPart(strings[0]);\r\n                    if (!this.symbollist.isLabel(strings[0])) { //Wenn label unbekannt dann neue Ansetzen\r\n                        this.symbollist.setLabelWithoutPosition(strings[0]);\r\n                    }\r\n                    save4(i);\r\n                    consoletostring = this.getScources(matches).join(", ");\r\n                    i.saveDescriptionLine(this.formatErwartet(consoletostring)); //Ausgabe von erwartetten Befehlen\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (this.getScources(matches).includes(strings[1].toUpperCase())) {\r\n                        toSave = strings[1];\r\n                        strings[1] = strings[1].toUpperCase();\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], i.getFirstPart().toUpperCase() + " " + i.getSecondPart() + "," + strings[1]));\r\n                        matches = matches.filter(e => {\r\n                            if (e.getSource() == strings[1]) {\r\n                                return e;\r\n                            }\r\n                        });\r\n                        if (matches.length == 1) {\r\n                            i.setThirdPart(toSave);\r\n                            i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                            i.setType(InputLineType.TRANSLATED);\r\n                            i.setLength(matches[0].getSize());\r\n                            i.setHCode(matches[0].getHexCode());\r\n                            i.setValid(true);\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    if (strings[1] != undefined) {\r\n                        i.setRest("," + strings[1]);\r\n                    }\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'POP\':\r\n            case \'PUSH\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                // matches=this.mnemoCommands.filter(e=>{return e.getMCode()==\'PUSH\'});\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                else {\r\n                    // i.saveDescriptionLine(this.formatErkannt(stackBefehl));\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'IN\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'IN\'; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet("A"));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                strings = Manipulator_Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                if (strings[0].toUpperCase() == "A") {\r\n                    i.saveDescriptionLine(this.formatGefunden("Register A", "IN A ..."));\r\n                    i.setSecondPart(strings[0]);\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                    consoletostring = "dat_8";\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (this.symbollist.isConst(strings[1])) {\r\n                        if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                            this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                            // ??\r\n                            // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], "IN A, " + strings[1]));\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        // WARNING EINSETZEN?\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[1], "IN A, " + strings[1])); // DecOrHex\r\n                        // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),"IN A, "+Manipulator.formatHextoDat8(strings[1])));\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        i.setThirdPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    if (strings[1] != undefined) {\r\n                        i.setRest(", " + strings[1]);\r\n                    }\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'OUT\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == \'OUT\'; });\r\n                consoletostring = "dat_8";\r\n                i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                strings = Manipulator_Manipulator.splitStringHalf(strings[1], ",");\r\n                strings = this.filterForEmtpyStrings(strings);\r\n                this.saveExtraInfo(i, consoletostring, strings[0]);\r\n                if (this.symbollist.isConst(strings[0])) {\r\n                    if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[0]).getValue())) {\r\n                        // ??\r\n                        // this.saveExtraInfo(i,consoletostring,strings[0]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[0]));\r\n                        i.setError(strings[0]);\r\n                        return false;\r\n                    }\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0] + " ..."));\r\n                    // WARNING EINSETZEN?\r\n                    i.setSecondPart(strings[0]);\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("A"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (strings[1].toUpperCase() == "A") {\r\n                        i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + strings[0] + ", A"));\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        //ÄNDERUNG\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        // need?\r\n                        // this.saveExtraInfo(i,consoletostring,strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator_Manipulator.isDat_8(strings[0])) {\r\n                    // this.saveExtraInfo(i,consoletostring,strings[0]);\r\n                    i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[0], i.getFirstPart().toUpperCase() + " " + strings[0] + " ...")); // DecOrHex\r\n                    // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[0]),i.getFirstPart().toUpperCase()+" "+Manipulator.formatHextoDat8(strings[0])+" ..."));\r\n                    i.setSecondPart((strings[0]));\r\n                    save4(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("A"));\r\n                    if (strings.length < 2) {\r\n                        i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                        i.setError("");\r\n                        return false;\r\n                    }\r\n                    if (strings[1].toUpperCase() == "A") {\r\n                        // i.saveDescriptionLine(this.formatGefunden("Register A",i.getFirstPart().toUpperCase()+" "+Manipulator.formatHextoDat8(strings[0])+", A"));\r\n                        i.saveDescriptionLine(this.formatGefunden("Register A", i.getFirstPart().toUpperCase() + " " + strings[0] + ", A")); // DecOrHex\r\n                        i.saveDescriptionLine(this.formatErkannt(ioAdressierung));\r\n                        i.setThirdPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    // this.saveExtraInfo(i,consoletostring,strings[0]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                    i.setError(strings[0]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'INC\':\r\n            case \'DEC\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                toSave = strings[1];\r\n                strings[1] = strings[1].toUpperCase();\r\n                if (this.getDests(matches).includes(strings[1])) {\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1]) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        // i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'ADD\':\r\n            case \'SUB\':\r\n            case \'AND\':\r\n            case \'OR\':\r\n            case \'XOR\':\r\n            case \'CP\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                //ÄNDERUNG\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                if (this.getDests(matches).includes(strings[1].toUpperCase())) {\r\n                    //ÄNDERUNG\r\n                    toSave = strings[1];\r\n                    strings[1] = strings[1].toUpperCase();\r\n                    i.saveDescriptionLine(this.formatGefunden("Register " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == strings[1].toUpperCase()) {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                        //ÄNDERUNG\r\n                        i.setSecondPart(toSave);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.symbollist.isConst(strings[1])) {\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                        // ??\r\n                        // this.saveExtraInfo(i,consoletostring,strings[1]);\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        //console.log(matches[0].toString());\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    // i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));\r\n                    i.saveDescriptionLine(this.formatGefunden("8-bit Wert " + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                    matches = matches = matches.filter(e => {\r\n                        if (e.getDestination() == "dat_8") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return true;\r\n                }\r\n                break;\r\n            case \'SHL\':\r\n            case \'SHR\':\r\n            case \'RCL\':\r\n            case \'ROL\':\r\n            case \'RCR\':\r\n            case \'ROR\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.saveDescriptionLine(this.formatErkannt(registerAdressierung));\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'JPNZ\':\r\n            case \'JPZ\':\r\n            case \'JPNC\':\r\n            case \'JPC\':\r\n            case \'JPNO\':\r\n            case \'JPO\':\r\n            case \'JPNS\':\r\n            case \'JPS\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                consoletostring = "label";\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                if (this.symbollist.isLabel(strings[1]) || (this.symbollist.isEligible(strings[1]) && !this.symbollist.isConst(strings[1]))) { // MUSS label sein\r\n                    // WARNING EINSETZEN?\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[0]}</span>\'`, strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // if(strings[1].length>erlaubteLängeL_C){\r\n                        //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[1]));\r\n                        // }\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        // i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'JP\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "JP"; });\r\n                consoletostring = this.getDests(matches).join(", ");\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                if (this.symbollist.isLabel(strings[1]) || (this.symbollist.isEligible(strings[1]) && !this.symbollist.isConst(strings[1]))) { // MUSS label sein\r\n                    // WARNING EINSETZEN?\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[1]}</span>\'`, strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // if(strings[1].length>erlaubteLängeL_C){\r\n                        //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[1]));\r\n                        // }\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (strings[1].toUpperCase() == "[IX]") {\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "[IX]") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (matches.length == 1) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`Register [IX]`, "JP [IX]"));\r\n                        i.saveDescriptionLine(this.formatErkannt(indirekteRegAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'CALL\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0] + " ..."));\r\n                save3(i);\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "CALL"; });\r\n                consoletostring = "label";\r\n                i.saveDescriptionLine(this.formatErwartet(consoletostring));\r\n                if (strings.length < 2) {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n                this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                if (this.symbollist.isLabel(strings[1]) || (this.symbollist.isEligible(strings[1]) && !this.symbollist.isConst(strings[1]))) { // MUSS label sein\r\n                    // WARNING EINSETZEN?\r\n                    i.saveDescriptionLine(this.formatGefunden(`Label \'<span class="labelBlue">${strings[1]}</span>\'`, strings[0] + " " + strings[1]));\r\n                    matches = matches.filter(e => {\r\n                        if (e.getDestination() == "label") {\r\n                            return e;\r\n                        }\r\n                    });\r\n                    if (!this.symbollist.isLabel(strings[1])) {\r\n                        this.symbollist.setLabelWithoutPosition(strings[1]);\r\n                        // if(strings[1].length>erlaubteLängeL_C){\r\n                        //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(strings[1]));\r\n                        // }\r\n                    }\r\n                    if (matches.length == 1) {\r\n                        // i.saveDescriptionLine(this.formatErkannt(absoluteAdressierung));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(matches[0].getSize());\r\n                        i.setHCode(matches[0].getHexCode());\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'HALT\':\r\n            case \'NOP\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == strings[0]; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                    return false;\r\n                }\r\n                break;\r\n            case \'RET\':\r\n                i.saveDescriptionLine(this.formatGefunden("Mnemocode " + strings[0], strings[0]));\r\n                matches = this.mnemoCommands.filter(e => { return e.getMCode() == "RET"; });\r\n                if (strings.length > 1) {\r\n                    i.saveDescriptionLine(StringConstructor.tooManyCmd());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                }\r\n                if (matches.length == 1) {\r\n                    i.saveDescriptionLine(this.formatErkannt(stackBefehl));\r\n                    i.setType(InputLineType.TRANSLATED);\r\n                    i.setLength(matches[0].getSize());\r\n                    i.setHCode(matches[0].getHexCode());\r\n                    i.setValid(true);\r\n                    return true;\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.bugNoCommand());\r\n                    return false;\r\n                }\r\n                break;\r\n            default: //BUG\r\n                i.saveDescriptionLine(StringConstructor.bugSwitchDefault());\r\n                return false;\r\n        }\r\n    }\r\n    parsetoPseudoMnemoCode(i, strings) {\r\n        let temp;\r\n        let consoletostring;\r\n        if (this.pseudoMCodes.includes(strings[0].toUpperCase())) { //gefunden Pseudo-MnemoCode\r\n            this.constDefFlag = false;\r\n            i.setFirstPart(strings[0]);\r\n            strings[0] = strings[0].toUpperCase();\r\n            i.saveDescriptionLine(this.formatGefunden(`Pseudo-Mnemocode ${strings[0]}`, strings[0] + " ..."));\r\n            if (strings.length < 2) {\r\n                i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                i.setError("");\r\n                return false;\r\n            }\r\n            switch (strings[0]) {\r\n                case \'RS\':\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                    save3(i);\r\n                    consoletostring = "dat_8";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`8-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));\r\n                        i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setLength(strings[1]); // DecOrHex ??\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        let Hcode = "";\r\n                        for (let i = 0; i < Manipulator_Manipulator.hexToDec(Manipulator_Manipulator.formatHextoDat8(strings[1])); i++) {\r\n                            Hcode += \'00\';\r\n                        }\r\n                        i.setHCode(Hcode);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                            // ??\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setSecondPart((strings[1])); //KONST ??\r\n                        i.setLength(Manipulator_Manipulator.formatHextoDat8(this.symbollist.getSpecificConstantByName(strings[1]).getValue()));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        let Hcode = "";\r\n                        for (let i = 0; i < Manipulator_Manipulator.hexToDec(this.symbollist.getSpecificConstantByName(strings[1]).getValue()); i++) {\r\n                            Hcode += \'00\';\r\n                        }\r\n                        i.setHCode(Hcode);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8());\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'DW\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_16"));\r\n                    consoletostring = "dat_16";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (Manipulator_Manipulator.isDat_16(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        // i.saveDescriptionLine(this.formatGefunden(`16-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat16(strings[1])));\r\n                        i.setLength(2);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setLength(2);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (strings[1].toUpperCase().startsWith("OFFSET")) {\r\n                        temp = Manipulator_Manipulator.splitStringHalf(strings[1], " ");\r\n                        if (temp.length < 2) {\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        if (this.symbollist.isLabel(temp[1])) {\r\n                            this.symbollist.isEligible(temp[1]);\r\n                            i.saveDescriptionLine(this.formatGefunden(`OFFSET`, "DW OFFSET " + temp[1]));\r\n                        }\r\n                        else if (this.symbollist.isEligible(temp[1])) {\r\n                            this.symbollist.setLabelWithoutPosition(temp[1]);\r\n                            // if(strings[1].length>erlaubteLängeL_C){\r\n                            //     i.saveDescriptionLine(StringConstructor.warLabelZuLang(temp[1]));\r\n                            // }\r\n                            i.saveDescriptionLine(this.formatGefunden(`OFFSET`, "DW OFFSET " + temp[1]));\r\n                        }\r\n                        else {\r\n                            i.saveDescriptionLine(StringConstructor.noValidLabelAfterOffset());\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setLength(2);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setOffsetLabel(true);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat16Plus(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'DB\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_8"));\r\n                    consoletostring = "dat_8";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    if (Manipulator_Manipulator.isDat_8(strings[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`8-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));\r\n                        i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        i.setLength(1);\r\n                        i.setSecondPart((strings[1]));\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        if (!Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(strings[1]).getValue())) {\r\n                            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                            // i.saveDescriptionLine(StringConstructor.expectedDat8ConstToBig(strings[1]));\r\n                            i.setError(strings[1]);\r\n                            return false;\r\n                        }\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setLength(1);\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setType(InputLineType.TRANSLATED);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat8Plus(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'ORG\':\r\n                    save3(i);\r\n                    i.saveDescriptionLine(this.formatErwartet("dat_16"));\r\n                    consoletostring = "dat_16";\r\n                    this.saveExtraInfo(i, consoletostring, strings[1]);\r\n                    // console.log(strings[1]);\r\n                    // console.log(Manipulator.isDat_16(strings[1]));\r\n                    // console.log(this.symbollist.isConst(strings[1]));\r\n                    if (Manipulator_Manipulator.isDat_16(strings[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`16-bit Wert`,strings[0]+" "+Manipulator.formatHextoDat16(strings[1]))); \r\n                        i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ` + strings[1], strings[0] + " " + strings[1])); // DecOrHex\r\n                        i.setLength(Manipulator_Manipulator.hexToDec(Manipulator_Manipulator.formatHextoDat16(strings[1])));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else if (this.symbollist.isConst(strings[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden("Konstante " + strings[1], strings[0] + " " + strings[1]));\r\n                        i.setLength(Manipulator_Manipulator.hexToDec(this.symbollist.getSpecificConstantByName(strings[1]).getValue()));\r\n                        i.setSecondPart(strings[1]);\r\n                        i.setValid(true);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(strings[1]));\r\n                        // i.saveDescriptionLine(StringConstructor.expectedDat16Plus(strings[1]));\r\n                        i.setError(strings[1]);\r\n                        return false;\r\n                    }\r\n                    break;\r\n                case \'EXT\':\r\n                case \'ENT\':\r\n                    i.saveDescriptionLine(this.formatErrorMassage(`Pseudo-Mnemocode \'${strings[0].toUpperCase()}\' ist nicht unterstützt!`));\r\n                    i.setFirstPart(strings[0].toUpperCase());\r\n                    i.setError(strings[0]);\r\n                    return false;\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.bugSwitchDefault());\r\n                    i.setError(strings[1]);\r\n                    return false;\r\n                    break;\r\n            }\r\n        }\r\n        else if (!this.constDefFlag) {\r\n            i.saveDescriptionLine(StringConstructor.noConstDefAllowed());\r\n            i.setError(strings[0]);\r\n            return false;\r\n        }\r\n        else if (this.symbollist.isEligible_Const(strings[0]) && !this.symbollist.isConst(strings[0]) && !this.symbollist.isLabel(strings[0]) && i.getLabel() == "") {\r\n            i.saveDescriptionLine(this.formatGefunden(`Konstante ${strings[0]}`, strings[0] + " ..."));\r\n            save2(i);\r\n            i.saveDescriptionLine(this.formatErwartet(`EQU`));\r\n            if (strings.length < 2) {\r\n                i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                i.setError("");\r\n                // i.setError(strings[0]);\r\n                return false;\r\n            }\r\n            let new_commands = Manipulator_Manipulator.splitStringHalf(strings[1], " ");\r\n            new_commands = this.filterForEmtpyStrings(new_commands);\r\n            i.setFirstPart(strings[0]);\r\n            if (new_commands[0].toUpperCase() == "EQU") {\r\n                i.saveDescriptionLine(this.formatGefunden("EQU", i.getFirstPart() + " EQU" + " ..."));\r\n                i.saveDescriptionLine(`<span class="gray">parse Operandenfeld:</span>`);\r\n                i.saveDescriptionLine(this.formatErwartet(`dat_16`));\r\n                i.setSecondPart(new_commands[0]);\r\n                if (new_commands.length > 1) {\r\n                    if (Manipulator_Manipulator.isDat_8(new_commands[1])) {\r\n                        i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ${new_commands[1]}`, i.getFirstPart() + " " + new_commands[0] + " " + new_commands[1])); // DecOrHex\r\n                        // i.saveDescriptionLine(this.formatGefunden(`8-bit Wert ${Manipulator.formatHextoDat8(new_commands[1])}`,i.getFirstPart()+" "+new_commands[0]+" "+Manipulator.formatHextoDat8(new_commands[1]))); \r\n                        i.setThirdPart((new_commands[1]));\r\n                        i.setValid(true);\r\n                        this.symbollist.setConst(strings[0], new_commands[1]);\r\n                        return true;\r\n                    }\r\n                    else if (Manipulator_Manipulator.isDat_16(new_commands[1])) {\r\n                        // i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ${Manipulator.formatHextoDat16(new_commands[1])}`,i.getFirstPart()+" "+new_commands[0]+" "+Manipulator.formatHextoDat16(new_commands[1])));\r\n                        i.saveDescriptionLine(this.formatGefunden(`16-bit Wert ${new_commands[1]}`, i.getFirstPart() + " " + new_commands[0] + " " + new_commands[1])); // DecOrHex\r\n                        i.setThirdPart((new_commands[1]));\r\n                        i.setValid(true);\r\n                        this.symbollist.setConst(strings[0], new_commands[1]);\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        i.saveDescriptionLine(StringConstructor.invalidCmd(new_commands[1]));\r\n                        i.setError(new_commands[1]);\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    i.saveDescriptionLine(StringConstructor.toofewCmd());\r\n                    i.setError("");\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(StringConstructor.invalidCmd(new_commands[0]));\r\n                i.setError(new_commands[0]);\r\n                i.setRest(new_commands[1]);\r\n                return false;\r\n            }\r\n        }\r\n        else if (this.symbollist.isConst(strings[0])) {\r\n            i.saveDescriptionLine(StringConstructor.errConstDef(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (this.symbollist.isLabel(strings[0])) {\r\n            if ((this.symbollist.getPositionOfSpecificLabel(strings[0]) == "????")) {\r\n                i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n                i.setError(strings[0]);\r\n                return false;\r\n            }\r\n            i.saveDescriptionLine(StringConstructor.nameTakenForLabel(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (!this.symbollist.isEligible_Const(strings[0])) {\r\n            i.saveDescriptionLine(StringConstructor.noValidConstOrOperand(strings[0]));\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else if (i.getLabel() != "") {\r\n            i.saveDescriptionLine(StringConstructor.noConstafterLabelDef());\r\n            i.setError(strings[0]);\r\n            if (strings[1] != undefined) {\r\n                i.setRest(" " + strings[1]);\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            i.saveDescriptionLine(StringConstructor.invalidCmd(strings[0]));\r\n            i.setError(strings[0]);\r\n            return false;\r\n        }\r\n    }\r\n    getDataType(addr) {\r\n        if (this.Regs.includes(addr) || this.pseudoMCodes.includes(addr) || this.mCodes.includes(addr)) {\r\n            return DataType.NONE;\r\n        }\r\n        if (addr.trim() == " " || addr.trim() == "") {\r\n            return DataType.NONE;\r\n        }\r\n        if (Manipulator_Manipulator.isDat_8(addr)) {\r\n            return DataType.dat_8;\r\n        }\r\n        else if (Manipulator_Manipulator.isDat_16(addr)) {\r\n            return DataType.dat_16;\r\n        }\r\n        else if (this.symbollist.isConst(addr)) {\r\n            return DataType.CONSTANT;\r\n        }\r\n        else if (this.symbollist.isLabel(addr)) {\r\n            return DataType.LABEL;\r\n        }\r\n        else if (this.symbollist.isEligible(addr)) {\r\n            return DataType.ELLIGIBLE;\r\n        }\r\n        else\r\n            return DataType.NONE;\r\n    }\r\n    saveExtraInfo(i, consoleString, s) {\r\n        let typeData = this.getDataType(s);\r\n        if (this.Regs.includes(s) || this.mCodes.includes(s) || this.pseudoMCodes.includes(s)) {\r\n            return;\r\n        }\r\n        if (consoleString.includes("dat_8")) {\r\n            switch (typeData) {\r\n                case DataType.dat_8:\r\n                    i.saveDescriptionLine(StringConstructor.infoIsDat8());\r\n                    return;\r\n                case DataType.CONSTANT:\r\n                    if (Manipulator_Manipulator.isDat_8(this.symbollist.getSpecificConstantByName(s).getValue())) {\r\n                        i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                        i.saveDescriptionLine(StringConstructor.infoIsDat8Const(s));\r\n                        return;\r\n                    }\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8Const(s));\r\n                    // i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(s));\r\n                    // return;\r\n                    break;\r\n                case DataType.LABEL:\r\n                case DataType.ELLIGIBLE:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    if (this.symbollist.isEligible_Const(s)) {\r\n                        i.saveDescriptionLine(StringConstructor.infoNotDat8Const(s));\r\n                    }\r\n                    else\r\n                        i.saveDescriptionLine(StringConstructor.infoInvalidConst(s));\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    i.saveDescriptionLine(StringConstructor.infoInvalidConst(s));\r\n                    // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    break;\r\n            }\r\n        }\r\n        else if (consoleString.includes("dat_16")) {\r\n            switch (typeData) {\r\n                case DataType.dat_8:\r\n                case DataType.dat_16:\r\n                    i.saveDescriptionLine(StringConstructor.infoIsDat16());\r\n                    return;\r\n                case DataType.CONSTANT:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                    i.saveDescriptionLine(StringConstructor.infoIsDat16Const(s));\r\n                    return;\r\n                    // i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(s));\r\n                    // return;\r\n                    break;\r\n                case DataType.LABEL:\r\n                case DataType.ELLIGIBLE:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                    if (this.symbollist.isEligible_Const(s)) {\r\n                        i.saveDescriptionLine(StringConstructor.infoNotDat16Const(s));\r\n                    }\r\n                    else\r\n                        i.saveDescriptionLine(StringConstructor.infoInvalidConst(s));\r\n                    break;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.infoNotDat16());\r\n                    i.saveDescriptionLine(StringConstructor.infoInvalidConst(s));\r\n                    // i.saveDescriptionLine(StringConstructor.infoNotDat8());\r\n                    break;\r\n            }\r\n        }\r\n        if (consoleString.includes("label")) {\r\n            switch (typeData) {\r\n                case DataType.CONSTANT:\r\n                    i.saveDescriptionLine(StringConstructor.notValidLabelSinceItsConst(s));\r\n                    break;\r\n                case DataType.ELLIGIBLE:\r\n                case DataType.LABEL:\r\n                    // i.saveDescriptionLine(StringConstructor.infoIsLabel(s));\r\n                    return;\r\n                default:\r\n                    i.saveDescriptionLine(StringConstructor.infoInvalidLabel(s));\r\n                    break;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    getMaxLen(m) {\r\n        let n = [];\r\n        m.forEach(e => {\r\n            if (!n.includes(e.getLength())) {\r\n                n.push(e.getLength());\r\n            }\r\n        });\r\n        return Math.max(...n);\r\n    }\r\n    getMCodes() {\r\n        let addr = [];\r\n        this.mnemoCommands.forEach(element => {\r\n            if (!addr.includes(element.getMCode())) {\r\n                addr.push(element.getMCode());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n    getDests(commands) {\r\n        let addr = [];\r\n        commands.forEach(element => {\r\n            if (!addr.includes(element.getDestination()) && element.getDestination() != "") {\r\n                addr.push(element.getDestination());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n    getScources(commands) {\r\n        let addr = [];\r\n        commands.forEach(element => {\r\n            if (!addr.includes(element.getSource()) && element.getSource() != "") {\r\n                addr.push(element.getSource());\r\n            }\r\n        });\r\n        return addr;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Backend/InputLineControl.ts\n\r\n\r\n\r\n\r\n\r\nclass InputLineControl {\r\n    constructor() {\r\n        this.inputstrings = [];\r\n        this.inputlines = [];\r\n        this.symbolliste = SymbolList.getInstance();\r\n        this.map = CommandMap.getInstance();\r\n        this.IDcounter = 0;\r\n        this.translatedIDs = [];\r\n        this.invalidIDs = [];\r\n        this.startingAddrOfTranslated = 0;\r\n        this.addressTable = [];\r\n        this.filterables = () => {\r\n            return this.map.filterableString();\r\n        };\r\n        this.hasInvalid = () => {\r\n            if (this.invalidIDs.length == 0) {\r\n                return false;\r\n            }\r\n            else\r\n                return true;\r\n        };\r\n        this.getInvalidIDs = () => {\r\n            return this.invalidIDs;\r\n        };\r\n        this.getInvalidInputLines = () => {\r\n            let invalidInputllines = [];\r\n            this.inputlines.forEach(e => {\r\n                if (this.invalidIDs.includes(e.getId())) {\r\n                    invalidInputllines.push(e);\r\n                }\r\n            });\r\n            return invalidInputllines;\r\n        };\r\n        this.reset = () => {\r\n            this.IDcounter = 0;\r\n            this.startingAddrOfTranslated = 0;\r\n            this.inputlines = [];\r\n            this.translatedIDs = [];\r\n            this.invalidIDs = [];\r\n            this.symbolliste.empty();\r\n            this.map.resetConstDefFlag();\r\n            this.addressTable = [];\r\n        };\r\n        this.addInputLines = (inputStrings) => {\r\n            this.reset();\r\n            inputStrings.forEach(e => {\r\n                this.addInputLine(e);\r\n            });\r\n        };\r\n        this.isFreeAddr = (s, n) => {\r\n            let start = Manipulator_Manipulator.hexToDec(s);\r\n            let end = Number(n);\r\n            let i = 0;\r\n            let addrEnd;\r\n            let addrStart;\r\n            if (start == end) {\r\n                return true;\r\n            }\r\n            for (let i = 0; i < this.addressTable.length - 2; i++) {\r\n                if (((i + 1) % 2) == 0) {\r\n                    addrStart = this.addressTable[i - 1];\r\n                    addrEnd = this.addressTable[i];\r\n                    if (addrStart == addrEnd) {\r\n                        continue;\r\n                    }\r\n                    if ((addrStart <= start && addrEnd > start) || (addrStart <= end && addrEnd > end)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        this.addInputLine = (inputString) => {\r\n            let i = new InputLine(inputString, this.IDcounter);\r\n            if (i.getType() == InputLineType.EMPTY) {\r\n                this.inputlines.push(i);\r\n                this.IDcounter = this.IDcounter + 1;\r\n                return;\r\n            }\r\n            else if (i.getType() == InputLineType.PSEUDOTRANSLATED) {\r\n                this.map.mapInputLineByCase(i);\r\n                this.inputlines.push(i);\r\n                if (i.getValid()) { // UPDATE FOR ORG?????\r\n                    i.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n                else {\r\n                    if (i.getLabel() != "") {\r\n                        this.symbolliste.removeLabel(i.getLabel());\r\n                    }\r\n                    this.invalidIDs.push(this.IDcounter);\r\n                }\r\n                this.IDcounter = this.IDcounter + 1;\r\n                return;\r\n            }\r\n            this.map.mapInputLineByCase(i);\r\n            this.inputlines.push(i);\r\n            if (i.getValid()) {\r\n                this.createSummary(i);\r\n                this.calculateStartingAddr(i);\r\n                this.calculateTranslation(i, false);\r\n                if (i.hasLabel()) {\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n            }\r\n            else {\r\n                this.calculateStartingAddr(i);\r\n                if (i.hasLabel()) {\r\n                    this.symbolliste.updateLabel(i.getLabel(), i.getStartingAddr());\r\n                }\r\n                this.invalidIDs.push(this.IDcounter);\r\n            }\r\n            this.IDcounter = this.IDcounter + 1;\r\n            // console.log(i);\r\n        };\r\n        this.calculateStartingAddr = (i) => {\r\n            let e = (i != null ? i : this.inputlines[this.IDcounter]);\r\n            if (e.getValid() != true) {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                return;\r\n            }\r\n            if (e.getType() == InputLineType.TRANSLATED) {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                this.addressTable.push(this.startingAddrOfTranslated);\r\n                this.translatedIDs.push(this.IDcounter);\r\n                this.startingAddrOfTranslated = this.startingAddrOfTranslated + e.getLength();\r\n                this.addressTable.push(this.startingAddrOfTranslated);\r\n                return;\r\n            }\r\n            if (e.getFirstPart().toUpperCase() == \'ORG\') {\r\n                e.setStartingAddr(this.fHD16(String(this.startingAddrOfTranslated)));\r\n                this.startingAddrOfTranslated = e.getLength();\r\n                this.addressTable.push(this.startingAddrOfTranslated);\r\n                this.addressTable.push(this.startingAddrOfTranslated);\r\n                return;\r\n            }\r\n        };\r\n        this.calculateRest = (...addr) => {\r\n            let n = 0;\r\n            let rest;\r\n            let newS = addr;\r\n            addr.forEach(e => {\r\n                if (e == "????" || undefined || "") {\r\n                }\r\n                else if (Manipulator_Manipulator.isHex(e)) {\r\n                    if (Manipulator_Manipulator.isDat_8(e)) {\r\n                        n = n - Manipulator_Manipulator.hexToDec(e);\r\n                    }\r\n                    else {\r\n                        rest = Manipulator_Manipulator.splitDat16InDat8(e);\r\n                        n = n - Manipulator_Manipulator.hexToDec(rest[0]);\r\n                        n = n - Manipulator_Manipulator.hexToDec(rest[1]);\r\n                    }\r\n                }\r\n                else if (Manipulator_Manipulator.isBin(e)) {\r\n                    e = Manipulator_Manipulator.binToHex(e);\r\n                    if (Manipulator_Manipulator.isDat_8(e)) {\r\n                        n = n - Manipulator_Manipulator.hexToDec(e);\r\n                    }\r\n                    else {\r\n                        rest = Manipulator_Manipulator.splitDat16InDat8(e);\r\n                        n = n - Manipulator_Manipulator.hexToDec(rest[0]);\r\n                        n = n - Manipulator_Manipulator.hexToDec(rest[1]);\r\n                    }\r\n                }\r\n                else {\r\n                    n = n - Number(e);\r\n                }\r\n            });\r\n            while (n < 0) {\r\n                n = n + 256;\r\n            }\r\n            return String(n);\r\n        };\r\n        this.calculateTranslation = (i, flag) => {\r\n            let e = (i != null ? i : this.inputlines[this.IDcounter]);\r\n            if (e.getType() != InputLineType.TRANSLATED) {\r\n                return;\r\n            }\r\n            let rest = "";\r\n            let addr = this.fHD16(e.getStartingAddr());\r\n            let h = "";\r\n            let hex = e.getHCode();\r\n            /*         if(e.getStartingAddr()==\'0000h\'){\r\n                        addr=\'0000h\'\r\n                    }\r\n                    else{\r\n                        addr=this.fHD16(e.getStartingAddr());\r\n                    } */\r\n            if (e.getFirstPart().toUpperCase() == \'RS\') {\r\n                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr));\r\n                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${hex}${this.fHD8WH(rest)}`);\r\n            }\r\n            else if (e.getFirstPart().toUpperCase() == \'DB\') {\r\n                h = e.getSecondPart();\r\n                if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                    h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n                }\r\n                else {\r\n                    h = i.getSecondPart();\r\n                }\r\n                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n            }\r\n            else if (e.getFirstPart().toUpperCase() == \'DW\') {\r\n                if (e.hasOffsetLabel()) {\r\n                    h = (this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset()) == undefined ? "????" : this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset()));\r\n                    h = flag ? "????" : h;\r\n                }\r\n                else {\r\n                    if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                        h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n                    }\r\n                    else {\r\n                        h = i.getSecondPart();\r\n                    }\r\n                }\r\n                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n            }\r\n            else {\r\n                switch (e.getLength()) {\r\n                    case 1:\r\n                        if (Manipulator_Manipulator.isDat_8(hex)) {\r\n                            rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr));\r\n                            e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(rest)}`);\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8`);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        if (Manipulator_Manipulator.isDat_8(hex)) {\r\n                            /* let type= this.map.getDataType(e.getSecondPart()); */\r\n                            if (Manipulator_Manipulator.isDat_8(e.getSecondPart())) {\r\n                                h = e.getSecondPart();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (Manipulator_Manipulator.isDat_8(e.getThirdPart())) {\r\n                                h = e.getThirdPart();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, e.getThirdPart()));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getSecondPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getSecondPart()).getValue();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getThirdPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getThirdPart()).getValue();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.fHD8WH(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! Case2 failed!`);\r\n                            }\r\n                        }\r\n                        else if (Manipulator_Manipulator.isDat_16(hex)) {\r\n                            rest = this.fHD8(this.calculateRest(String(e.getLength()), hex, addr));\r\n                            e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.fHD8WH(rest)}`);\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8 or dat_16`);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        if (Manipulator_Manipulator.isDat_8(hex)) {\r\n                            if (this.symbolliste.isLabel(e.getSecondPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${flag?this.getLittleEndianOf(h.replace(/h$/,"")):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isLabel(e.getThirdPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getThirdPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${flag?this.getLittleEndianOf(h.replace(/h$/,"")):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (Manipulator_Manipulator.isDat_16(e.getThirdPart())) {\r\n                                h = e.getThirdPart();\r\n                                // console.log(h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getThirdPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getThirdPart()).getValue();\r\n                                console.log(h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (e.hasOffsetLabel()) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getLabelOfOffset());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! Case3 failed!`);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is no dat_8`);\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        if (Manipulator_Manipulator.isDat_16(hex)) {\r\n                            if (this.symbolliste.isLabel(e.getSecondPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getSecondPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${flag?h.replace(/h$/,""):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isLabel(e.getThirdPart())) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getThirdPart());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${flag?h.replace(/h$/,""):"????"}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (Manipulator_Manipulator.isDat_16(e.getThirdPart())) {\r\n                                h = e.getThirdPart();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (this.symbolliste.isConst(e.getThirdPart())) {\r\n                                h = this.symbolliste.getSpecificConstantByName(e.getThirdPart()).getValue();\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                // e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD8WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.fHD16WH(hex)}${this.getLittleEndianOf(h)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else if (e.hasOffsetLabel()) {\r\n                                h = this.symbolliste.getPositionOfSpecificLabel(e.getLabelOfOffset());\r\n                                h = (h == undefined ? "????" : h);\r\n                                rest = this.fHD8(this.calculateRest(String(e.getLength()), (hex), addr, h));\r\n                                e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${this.getSpeicherAbbild(e, flag)}${this.fHD8WH(rest)}`);\r\n                            }\r\n                            else {\r\n                                console.log(`${e.getId()} cannot be translated! Case4 failed!`);\r\n                            }\r\n                        }\r\n                        else {\r\n                            console.log(`${e.getId()} cannot be translated! ${hex} is not dat_16`);\r\n                        }\r\n                        break;\r\n                    /*  default:\r\n                         rest=this.fHD8(this.calculateRest(String(e.getLength()),(hex),addr));\r\n                         e.setTranslation(`${this.fHD8WH(String(e.getLength()))}${this.fHD16WH(addr)}00${hex}${this.fHD8WH(rest)}`);\r\n                         break;\r\n                  */\r\n                }\r\n            }\r\n        };\r\n        this.getInputLines = () => {\r\n            return this.inputlines;\r\n        };\r\n        this.getTranslatedIDs = () => {\r\n            return this.translatedIDs;\r\n        };\r\n    }\r\n    static getInstance() {\r\n        if (!InputLineControl.instance) {\r\n            InputLineControl.instance = new InputLineControl();\r\n        }\r\n        return InputLineControl.instance;\r\n    }\r\n    setInputStrings(s) {\r\n        this.inputstrings = s;\r\n    }\r\n    getInputStrings() {\r\n        return this.inputstrings;\r\n    }\r\n    getLittleEndianOf(h) {\r\n        return Manipulator_Manipulator.splitDat16InDat8(h).join("");\r\n    }\r\n    checkTranslationForUnknownLabel(i) {\r\n        if (i.getType() == InputLineType.TRANSLATED) {\r\n            if (i.getTranslation().includes("????")) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    fHD16(h) {\r\n        return Manipulator_Manipulator.formatHextoDat16(h);\r\n    }\r\n    fHD16WH(h) {\r\n        return Manipulator_Manipulator.formatHextoDat16WithoutH(h);\r\n    }\r\n    fHD8(h) {\r\n        return Manipulator_Manipulator.formatHextoDat8(h);\r\n    }\r\n    fHD8WH(h) {\r\n        return Manipulator_Manipulator.formatHextoDat8WithoutH(h);\r\n    }\r\n    retranslate(i) {\r\n        this.calculateTranslation(i, true);\r\n    }\r\n    getDisplayableSpeicherabbild(i, flag) {\r\n        let s = this.getSpeicherAbbild(i, flag);\r\n        if (i.getFirstPart().toUpperCase() == "RS") {\r\n            return s;\r\n        }\r\n        let toReturn = "";\r\n        for (let j = 0; j < s.length; j++) {\r\n            if (j != 0 && (j % 2) == 0) {\r\n                toReturn = toReturn.concat(" ");\r\n            }\r\n            toReturn = toReturn.concat(s[j]);\r\n        }\r\n        return toReturn;\r\n    }\r\n    getSpeicherAbbild(i, flag) {\r\n        let s = i.commandLinetoString(true);\r\n        let h = i.getHCode();\r\n        let l = "";\r\n        // console.log(i.getCommandLine()+" ... "+i.getLength()+" ... "+i.getHCode());\r\n        if (i.getFirstPart().toUpperCase() == "RS") {\r\n            // return "00 ... ("+i.getLength()+"x)";\r\n            return (h.length > 4 ? "00 ... (" + i.getLength() + "x)" : h);\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == "ORG") {\r\n            return "";\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == \'DB\') {\r\n            if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n            }\r\n            else {\r\n                h = i.getSecondPart();\r\n            }\r\n            return `${this.fHD8WH(h)}`;\r\n        }\r\n        else if (i.getFirstPart().toUpperCase() == \'DW\') {\r\n            if (i.hasOffsetLabel()) {\r\n                return ((this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset()) == undefined || !flag) ? "????" : this.getLittleEndianOf(this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset())));\r\n            }\r\n            if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                h = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n            }\r\n            else {\r\n                h = i.getSecondPart();\r\n            }\r\n            return this.getLittleEndianOf(h);\r\n        }\r\n        else {\r\n            switch (i.getLength()) {\r\n                case 1:\r\n                    return this.fHD8WH(h);\r\n                    break;\r\n                case 2:\r\n                    if (Manipulator_Manipulator.isDat_8(i.getSecondPart())) {\r\n                        return this.fHD8WH(h) + this.fHD8WH(i.getSecondPart());\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue();\r\n                        return this.fHD8WH(h) + this.fHD8WH(l);\r\n                    }\r\n                    else if (Manipulator_Manipulator.isDat_8(i.getThirdPart())) {\r\n                        return this.fHD8WH(h) + this.fHD8WH(i.getThirdPart());\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart()).getValue();\r\n                        return this.fHD8WH(h) + this.fHD8WH(l);\r\n                    }\r\n                    else {\r\n                        return this.fHD16WH(h);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    if (this.symbolliste.isLabel(i.getSecondPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getSecondPart());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getThirdPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getThirdPart());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart())?.getValue();\r\n                        return this.fHD8WH(h) + (l != undefined ? this.getLittleEndianOf(l) : l);\r\n                    }\r\n                    else if (i.hasOffsetLabel()) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset());\r\n                        return this.fHD8WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else {\r\n                        return this.fHD8WH(h) + this.getLittleEndianOf(i.getThirdPart());\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    if (this.symbolliste.isConst(i.getThirdPart())) {\r\n                        l = this.symbolliste.getSpecificConstantByName(i.getThirdPart())?.getValue();\r\n                        return this.fHD16WH(h) + (l != undefined ? this.getLittleEndianOf(l) : l);\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getSecondPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getSecondPart());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (this.symbolliste.isLabel(i.getThirdPart())) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getThirdPart());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else if (i.hasOffsetLabel()) {\r\n                        l = this.symbolliste.getPositionOfSpecificLabel(i.getLabelOfOffset());\r\n                        return this.fHD16WH(h) + (l != undefined && flag ? this.getLittleEndianOf(l) : "????");\r\n                    }\r\n                    else {\r\n                        return this.fHD16WH(h) + this.getLittleEndianOf(i.getThirdPart());\r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n            return "";\r\n        }\r\n    }\r\n    createSummary(i) {\r\n        let s = i.commandLinetoString(true);\r\n        let h = i.getHCode();\r\n        let l = "";\r\n        let c;\r\n        if (i.getFirstPart().toUpperCase() == "ORG" && i.getValid()) {\r\n            saveInput(i, 5);\r\n            if (this.symbolliste.isConst(i.getSecondPart())) {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Addresszähler = <span id="addressbyte${i.getId()}">` + this.fHD16WH(this.symbolliste.getSpecificConstantByName(i.getSecondPart()).getValue()) + `</span></span>`);\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Addresszähler = <span id="addressbyte${i.getId()}">` + i.getSecondPart() + `</span></span>`);\r\n            }\r\n        }\r\n        else if (i.getType() == InputLineType.TRANSLATED) {\r\n            saveInput(i, 5);\r\n            if (i.getFirstPart().toUpperCase() == "RS") {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + s + " -> " + (h.length > 4 ? "00 (" + i.getLength() + "x)" : h) + `</span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Anzahl der Bytes: <span id="addressbyte${i.getId()}">` + i.getLength() + `</span></span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Erhöhe Adresszähler</span>`);\r\n            }\r\n            else {\r\n                i.saveDescriptionLine(`<span class="eingeruckt">` + s + " -> " + this.getDisplayableSpeicherabbild(i, false) + `</span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Anzahl der Bytes: <span id="addressbyte${i.getId()}">` + i.getLength() + `</span></span>`);\r\n                i.saveDescriptionLine(`<span class="eingeruckt">Erhöhe Adresszähler</span>`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/Animator.ts\n\r\n\r\n\r\n\r\nconst arrowHeadID = "arrowHead";\r\nconst arrowVerticalID = "arrowVertical";\r\nconst arrowJointID = "arrowJoint";\r\nconst arrowHorizontalID = "arrowHorizontal";\r\nconst arrowUp_DownCN = "arrowUP_Down";\r\nconst arrowLeft_RightCN = "arrowLeft_Right";\r\nconst arrowHorizontalID2 = "arrowHorizontal2";\r\nconst arrowJointID2 = "arrowJoint2";\r\nconst UP = "up";\r\nconst DOWN = "down";\r\nconst LEFT = "left";\r\nconst RIGHT = "right";\r\nconst JQ1 = "jq1";\r\nconst JQ2 = "jq2";\r\nconst JQ3 = "jq3";\r\nconst JQ4 = "jq4";\r\nconst addressbyte = "addressbyte";\r\nconst overlapdivider = 50;\r\nconst aniTp2TimeAdjuster = 8;\r\nconst bodyElem = getHtmlElement("body");\r\nclass Animator {\r\n    constructor() {\r\n        this.frameSleepTime = 10;\r\n        this.arrowElems = [];\r\n        this.targetElemTop = 0;\r\n        this.targetElemLeft = 0;\r\n        this.turnSleepTime = 1000;\r\n        this.createMovable = () => {\r\n            let newElem;\r\n            newElem = document.createElement("div");\r\n            newElem.id = "Movable";\r\n            newElem.style.top = `${0}`;\r\n            newElem.style.left = `${0}`;\r\n            // newElem.style.width=`${50}px`;\r\n            // newElem.style.height=`${50}px`;\r\n            newElem.classList.add("testElemStyle");\r\n            newElem.style.visibility = "hidden";\r\n            newElem.style.zIndex = "3";\r\n            getHtmlElement("body").appendChild(newElem);\r\n            return newElem;\r\n        };\r\n        this.createMovableHelper = () => {\r\n            let newElem;\r\n            newElem = document.createElement("div");\r\n            newElem.id = "MovableHelper";\r\n            newElem.style.top = `${0}`;\r\n            newElem.style.left = `${0}`;\r\n            // newElem.style.width=`${50}px`;\r\n            // newElem.style.height=`${50}px`;\r\n            newElem.classList.add("testElemStyle");\r\n            newElem.style.visibility = "hidden";\r\n            newElem.style.zIndex = "3";\r\n            getHtmlElement("body").appendChild(newElem);\r\n            return newElem;\r\n        };\r\n        this.movingElementFlag = false;\r\n        this.movableElem = this.createMovable();\r\n        this.movableHelper = this.createMovableHelper();\r\n        this.inputText = getHtmlElement("InputText");\r\n        this.currentLineElem = getHtmlElement("currentLine");\r\n        this.descriptionLineElem = getHtmlElement("descriptionLines");\r\n        this.vorgangElem = getHtmlElement("Description");\r\n        this.symbolTableElem = getHtmlElement("symbolTableLines");\r\n        this.symbolTableBox = getHtmlElement("SymbolTable");\r\n        this.outPutLinesElem = getHtmlElement("OutputLines");\r\n        this.descriptionTableBox = getHtmlElement("descriptionSymboltableBox");\r\n        this.outPutText = getHtmlElement("OutputText");\r\n        this.addresszaehlerElem = getHtmlElement("Addresszahler");\r\n        this.translatedinfoDividerDiv = getHtmlElement("translatedinfoDividerDiv");\r\n    }\r\n    reset() {\r\n        this.movingElementFlag = false;\r\n        this.turnMovableHidden();\r\n        this.turnMovableHelperHidden();\r\n        this.turnArrowElemsHidden();\r\n        this.frameSleepTime = 10;\r\n        this.turnSleepTime = 1000;\r\n    }\r\n    async moveConstToSymbolTable(line) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let targetElem = getHtmlElement(targetSymbolTableLine);\r\n        this.movableElem.innerHTML = this.formatLineString("h4", line);\r\n        this.targetElemLeft = this.descriptionLineElem.offsetLeft;\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight), this.targetElemLeft);\r\n        let n = updateScrollOfSymbolTable(targetSymbolTableLine);\r\n        this.targetElemTop = targetElem.offsetTop - n + targetElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableHelper.innerHTML = this.formatLineString("h4", line);\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + arrowHead.offsetTop - this.movableElem.offsetTop - this.movableElem.offsetHeight + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async moveLabeltoSymboltableALTMoveableHelper(hex) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        this.movableHelper.style.top = this.addresszaehlerElem.offsetTop + "px";\r\n        this.movableHelper.style.left = this.addresszaehlerElem.offsetLeft + "px";\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", hex);\r\n        let placeholder = document.getElementById(targetlabelValuePlaceholder);\r\n        if (placeholder == null) {\r\n            throw new Error("BRUV");\r\n        }\r\n        let n = updateScrollOfSymbolTable(targetlabelValuePlaceholder);\r\n        this.targetElemTop = placeholder.offsetTop - n + placeholder.offsetHeight * 1 / 2 - this.movableHelper.offsetHeight * 1 / 2;\r\n        this.targetElemLeft = placeholder.offsetLeft;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableHelperVisible();\r\n            await sleepStopStartTime();\r\n            while (placeholder.offsetLeft > this.movableHelper.offsetLeft) {\r\n                await this.moveHelperSleepCheck(0, this.getPixeljump());\r\n            }\r\n            this.movableHelper.style.left = placeholder.offsetLeft + "px";\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableHelper.offsetTop) {\r\n                await this.moveHelperSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHelperHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableElem.innerHTML = this.formatLineString("h3", hex);\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n            let arrowJoint = this.getArrowElem(arrowJointID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.setClassOfJoint(1, JQ1);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = (this.movableElem.offsetTop - arrowHead.offsetHeight) + "px";\r\n            arrowHead.style.left = (this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowHead.offsetWidth / 2) + "px";\r\n            arrowVertical.style.left = (arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2) + "px";\r\n            arrowHorizontal.style.top = (this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2) + "px";\r\n            arrowJoint.style.top = (arrowHorizontal.offsetTop) + "px";\r\n            arrowJoint.style.left = (arrowVertical.offsetLeft) + "px";\r\n            arrowHorizontal.style.width = (this.movableHelper.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider - this.movableHelper.offsetLeft + arrowJoint.offsetLeft - this.movableHelper.offsetWidth) + "px";\r\n            arrowHorizontal.style.left = (this.movableHelper.offsetLeft + this.movableHelper.offsetWidth - this.movableHelper.offsetWidth / overlapdivider) + "px";\r\n            arrowVertical.style.height = (arrowJoint.offsetHeight / overlapdivider + arrowHead.offsetHeight / overlapdivider + arrowHead.offsetTop - arrowJoint.offsetTop) + "px";\r\n            arrowVertical.style.top = (arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider) + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async moveLabeltoSymboltableALTMoveable(line) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let targetElem = getHtmlElement(targetSymbolTableLine);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight), this.descriptionLineElem.offsetLeft);\r\n        let n = updateScrollOfSymbolTable(targetSymbolTableLine);\r\n        this.targetElemTop = targetElem.offsetTop - n + targetElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + arrowHead.offsetTop - this.movableElem.offsetTop - this.movableElem.offsetHeight + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async exchangeLabelWithSymbolTable(toLine, returnLine, id) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let targetElem = getHtmlElement(`symbol${id}`);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", toLine);\r\n        this.setMovableParameters((this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.movableElem.offsetHeight), this.descriptionLineElem.offsetLeft);\r\n        if (targetElem != null) {\r\n            let n = updateScrollOfSymbolTable(targetElem.id);\r\n            this.targetElemTop = targetElem.offsetTop - (n > 0 ? n : 0) + targetElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2;\r\n        }\r\n        else {\r\n            this.targetElemTop = this.symbolTableElem.offsetTop;\r\n        }\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            if (id < 0) {\r\n                this.turnMovableHidden();\r\n                return;\r\n            }\r\n            // await sleepStopStartTime();\r\n            // this.movableElem.innerHTML=`<h3 class="moveableText">${returnLine}</h3>`;\r\n            this.movableElem.innerHTML = this.formatLineString("h3", returnLine);\r\n            this.targetElemTop = this.descriptionLineElem.offsetTop + this.descriptionLineElem.offsetHeight - this.vorgangElem.offsetHeight;\r\n            while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.movableHelper.innerHTML = this.formatLineString("h3", toLine);\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + arrowHead.offsetTop - this.movableElem.offsetTop - this.movableElem.offsetHeight + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            if (id < 0) {\r\n                return;\r\n            }\r\n            this.movableHelper.innerHTML = this.formatLineString("h3", returnLine);\r\n            this.movableElem.innerHTML = this.formatLineString("h3", returnLine);\r\n            await sleepStopStartTime();\r\n            this.setClassOfHead(UP);\r\n            arrowHead.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = arrowHead.offsetTop + arrowHead.offsetHeight - arrowHead.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.height = arrowHead.offsetHeight / overlapdivider + this.movableHelper.offsetHeight / overlapdivider - arrowHead.offsetTop - arrowHead.offsetHeight + this.movableHelper.offsetTop + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n            this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n        }\r\n    }\r\n    async searchEntryInSymboltablephaseOne(idToSearch, entryName, idToFind) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let isSuccessful = false;\r\n        let fromElem = document.getElementById(idToSearch);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", entryName);\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        this.setClassOfHead(DOWN);\r\n        this.setClassOfJoint(1, JQ2);\r\n        this.toggleToUp(true);\r\n        //setup parameters\r\n        let toElem;\r\n        toElem = this.symbolTableElem.firstChild;\r\n        let n = updateScrollOfSymbolTable(toElem.id);\r\n        arrowHead.style.top = toElem.offsetTop - (n > 0 ? n : 0) - arrowHead.offsetHeight + "px";\r\n        if (fromElem != null) {\r\n            this.movableElem.style.left = fromElem.offsetLeft + fromElem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n            this.movableElem.style.top = fromElem.offsetTop - this.descriptionLineElem.scrollTop + fromElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.descriptionTableBox.offsetLeft + this.descriptionTableBox.offsetWidth / 100 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowJoint.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.width = this.movableElem.offsetLeft - arrowJoint.offsetLeft + arrowJoint.offsetWidth / overlapdivider + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowJoint.offsetLeft + arrowJoint.offsetWidth - arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowHead.offsetTop - arrowJoint.offsetTop + arrowHead.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider + "px";\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        }\r\n        else {\r\n            this.movableElem.style.left = this.descriptionTableBox.offsetLeft + "px";\r\n            this.movableElem.style.top = this.descriptionTableBox.offsetTop + this.descriptionTableBox.offsetHeight - this.movableElem.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight - this.movableElem.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowHead.offsetTop - this.movableElem.offsetTop + arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + "px";\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID]);\r\n        }\r\n        this.turnMovableVisible();\r\n        if (idToFind >= 0 && this.symbolTableElem.childElementCount - 2 >= idToFind) {\r\n            isSuccessful = true;\r\n        }\r\n        else {\r\n            idToFind = this.symbolTableElem.childElementCount > 1 ? this.symbolTableElem.childElementCount - 2 : 0;\r\n        }\r\n        for (let i = 0; i <= idToFind; i++) {\r\n            if (i == 0) {\r\n                await sleepStaticAnimationHalf();\r\n                continue;\r\n            }\r\n            if (this.symbolTableElem.childElementCount == i) {\r\n                //probably wont happen but just to make sure\r\n                break;\r\n            }\r\n            toElem = this.symbolTableElem.children[i];\r\n            n = updateScrollOfSymbolTable(toElem.id);\r\n            //ArrowSetup\r\n            arrowHead.style.top = toElem.offsetTop - (n > 0 ? n : 0) - arrowHead.offsetHeight + "px";\r\n            if (fromElem != null) {\r\n                arrowVertical.style.height = arrowHead.offsetTop - arrowJoint.offsetTop + arrowHead.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider + "px";\r\n            }\r\n            else {\r\n                arrowVertical.style.height = arrowHead.offsetTop - this.movableElem.offsetTop + arrowHead.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + "px";\r\n            }\r\n            // arrowVertical.style.height=arrowVertical.offsetHeight+toElem.offsetHeight+"px";\r\n            //wait for a step\r\n            await sleepStaticAnimationHalf();\r\n            //next turn\r\n        }\r\n        //set everything invisible\r\n        await this.turnArrowElemsHidden();\r\n        // await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async searchEntryInSymboltablephaseTwo(fromId, valueToReturn) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let fromElem = getHtmlElement(symboladdress + (fromId));\r\n        ;\r\n        let toElem = getHtmlElement(p2LabelValuePlaceholder);\r\n        if (toElem == null) {\r\n            throw new Error("placeholder-div was not found");\r\n        }\r\n        //setup return value\r\n        this.movableElem.innerHTML = this.formatLineString("h3", valueToReturn);\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", valueToReturn);\r\n        let n = updateScrollOfSymbolTable(fromElem.id);\r\n        this.movableElem.style.left = fromElem.offsetLeft + fromElem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n        this.movableElem.style.top = fromElem.offsetTop - (n > 0 ? n : 0) + fromElem.offsetHeight / 2 - this.movableElem.offsetHeight / 2 + "px";\r\n        this.movableHelper.style.top = toElem.offsetTop - this.descriptionLineElem.scrollTop + toElem.offsetHeight / 2 - this.movableHelper.offsetHeight / 2 + "px";\r\n        this.movableHelper.style.left = toElem.offsetLeft + toElem.offsetWidth / 2 - this.movableHelper.offsetWidth / 2 + "px";\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft < this.movableHelper.offsetLeft) {\r\n                await this.moveSleepCheck(0, this.getPixeljump());\r\n            }\r\n            this.movableElem.style.left = this.movableHelper.offsetLeft + "px";\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetTop > this.movableHelper.offsetTop) {\r\n                await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.movableHelper.offsetTop + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n            let arrowJoint = this.getArrowElem(arrowJointID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(UP);\r\n            this.setClassOfJoint(1, JQ4);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.top = arrowHead.offsetTop + arrowHead.offsetHeight - arrowHead.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowHorizontal.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n            arrowHorizontal.style.width = -this.movableElem.offsetLeft + arrowJoint.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.height = -arrowHead.offsetTop + arrowJoint.offsetTop - arrowHead.offsetHeight + arrowHead.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowHorizontalID, arrowJointID]);\r\n            this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n    }\r\n    async pushAufzulosendestoCurrentLine(i, line) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        let childelem = getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP`);\r\n        let n = updateScrollOfIn_Out(this.outPutText.id, childelem.id);\r\n        // console.log(n);\r\n        await this.setMovableParameters(childelem.offsetTop - n, this.outPutText.offsetLeft);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        this.targetElemTop = this.currentLineElem.offsetTop + this.currentLineElem.offsetHeight - this.movableElem.offsetHeight;\r\n        this.targetElemLeft = this.currentLineElem.offsetLeft;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            if (this.targetElemTop > this.movableElem.offsetTop) {\r\n                while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n            }\r\n            else {\r\n                while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            await sleepStopStartTime();\r\n            while (this.targetElemLeft < this.movableElem.offsetLeft) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n        this.movableHelper.style.top = this.targetElemTop + "px";\r\n        this.movableHelper.style.left = this.targetElemLeft + "px";\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        this.setClassOfHead(LEFT);\r\n        this.setClassOfJoint(1, JQ1);\r\n        this.toggleToUp(false);\r\n        arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n        arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth + "px";\r\n        arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n        if (this.movableHelper.offsetTop + 2 * this.movableHelper.offsetHeight > this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 < this.movableElem.offsetTop) {\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ3);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft - arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft + arrowHorizontal.offsetWidth - arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = arrowJoint2.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth - arrowJoint2.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = -arrowJoint2.offsetLeft - arrowJoint2.offsetWidth / overlapdivider\r\n                + this.movableElem.offsetLeft - arrowJoint2.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        arrowVertical.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n        arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n        arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n        arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider - arrowHead.offsetLeft - arrowHead.offsetWidth + arrowJoint.offsetLeft + "px";\r\n        arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth - arrowHead.offsetWidth / overlapdivider + "px";\r\n        arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + this.movableElem.offsetTop - arrowJoint.offsetTop + "px";\r\n        arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n        this.turnMovableVisible();\r\n        this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        await this.turnMovableHelperVisible();\r\n        await sleepStaticAnimation();\r\n        await this.turnArrowElemsHidden();\r\n        await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async animationInputLineToCurrentLine(id, line) {\r\n        if (aniControl.isAni3()) {\r\n            return;\r\n        }\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        await this.setStartTopToInputLine(id);\r\n        this.targetElemTop = this.currentLineElem.offsetTop + this.currentLineElem.offsetHeight - this.movableElem.offsetHeight;\r\n        this.targetElemLeft = this.currentLineElem.offsetLeft;\r\n        this.turnMovableVisible();\r\n        if (aniControl.isAni1()) {\r\n            await sleepStopStartTime();\r\n            if (this.targetElemTop > this.movableElem.offsetTop) {\r\n                while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n            }\r\n            else {\r\n                while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            await sleepStopStartTime();\r\n            while (this.targetElemLeft > this.movableElem.offsetLeft) {\r\n                await this.moveSleepCheck(0, this.getPixeljump());\r\n            }\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n        this.movableHelper.style.top = this.targetElemTop + "px";\r\n        this.movableHelper.style.left = this.targetElemLeft + "px";\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        this.setClassOfHead(RIGHT);\r\n        this.setClassOfJoint(1, JQ2);\r\n        this.toggleToUp(false);\r\n        arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n        arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n        arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n        if (this.movableHelper.offsetTop + 2 * this.movableHelper.offsetHeight > this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 < this.movableElem.offsetTop) {\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ4);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft - arrowJoint.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = arrowJoint2.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth\r\n                - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth / overlapdivider\r\n                - this.movableElem.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        arrowVertical.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n        arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n        arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n        arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider + arrowHead.offsetLeft - arrowJoint.offsetLeft - arrowJoint.offsetWidth + "px";\r\n        arrowHorizontal.style.left = arrowJoint.offsetLeft + arrowJoint.offsetWidth - arrowJoint.offsetWidth / overlapdivider + "px";\r\n        arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + this.movableElem.offsetHeight / overlapdivider + this.movableElem.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight + "px";\r\n        arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n        this.turnMovableVisible();\r\n        this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        await this.turnMovableHelperVisible();\r\n        await sleepStaticAnimation();\r\n        await this.turnArrowElemsHidden();\r\n        await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async moveDetailToSpeicherabbild(line, id) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        this.setMovableParameters(this.addresszaehlerElem.offsetTop, this.descriptionTableBox.offsetLeft);\r\n        this.movableElem.innerHTML = this.formatLineString("h3", line);\r\n        await this.setTargetTopToSpeicherabbild(id);\r\n        this.targetElemLeft = this.outPutText.offsetLeft;\r\n        if (aniControl.isAni1()) {\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            // await sleepStopStartTime();\r\n            while (this.targetElemLeft > this.movableElem.offsetLeft) {\r\n                await this.moveSleepCheck(0, this.getPixeljump());\r\n                // await this.adjustWidthOfMovable(this.getPixeljump(),this.outPutText.offsetWidth);\r\n            }\r\n            this.movableElem.style.left = this.targetElemLeft + "px";\r\n            // this.movableElem.style.width=this.outPutText.offsetWidth+"px";\r\n            await sleepStopStartTime();\r\n            if (this.targetElemTop > this.movableElem.offsetTop) {\r\n                while (this.targetElemTop > this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            else if (this.targetElemTop == this.movableElem.offsetTop) {\r\n            }\r\n            else {\r\n                while (this.targetElemTop < this.movableElem.offsetTop) {\r\n                    await this.moveSleepCheck(-this.getPixeljump(), 0);\r\n                }\r\n                this.movableElem.style.top = this.targetElemTop + "px";\r\n            }\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n        this.movableHelper.innerHTML = this.formatLineString("h3", line);\r\n        this.movableHelper.style.top = this.targetElemTop + "px";\r\n        this.movableHelper.style.left = this.targetElemLeft + "px";\r\n        let arrowHead = this.getArrowElem(arrowHeadID);\r\n        let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n        let arrowJoint = this.getArrowElem(arrowJointID);\r\n        let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n        if (this.movableHelper.offsetTop + this.movableHelper.offsetHeight * 2 < this.movableElem.offsetTop) {\r\n            this.setClassOfHead(UP);\r\n            this.setClassOfJoint(1, JQ4);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n            arrowHorizontal.style.width = this.movableElem.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider + arrowJoint.offsetLeft - this.movableElem.offsetLeft - this.movableElem.offsetWidth + "px";\r\n            arrowHorizontal.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + arrowJoint.offsetHeight / overlapdivider - arrowHead.offsetTop - arrowHead.offsetHeight + arrowJoint.offsetTop + "px";\r\n            arrowVertical.style.top = arrowHead.offsetTop + arrowHead.offsetHeight - arrowHead.offsetHeight / overlapdivider + "px";\r\n        }\r\n        else if (this.movableHelper.offsetTop + 2 * this.movableHelper.offsetHeight > this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 4 <= this.movableElem.offsetTop) {\r\n            this.setClassOfJoint(1, JQ2);\r\n            this.setClassOfHead(RIGHT);\r\n            this.toggleToUp(false);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n            arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            console.log(arrowHorizontal2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ4);\r\n            console.log(arrowJoint2);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft - arrowJoint.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = arrowJoint2.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth\r\n                - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth / overlapdivider\r\n                - this.movableElem.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else if (this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 4 >= this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop <= this.movableElem.offsetTop) {\r\n            this.setClassOfHead(RIGHT);\r\n            this.toggleToUp(false);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n            arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowHorizontal.style.width = arrowHead.offsetLeft - this.movableElem.offsetLeft - this.movableElem.offsetWidth\r\n                + arrowHead.offsetWidth / overlapdivider + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowHorizontalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else if (this.movableHelper.offsetTop - 2 * this.movableHelper.offsetHeight < this.movableElem.offsetTop\r\n            && this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 4 > this.movableElem.offsetTop) {\r\n            this.setClassOfHead(RIGHT);\r\n            this.setClassOfJoint(1, JQ3);\r\n            this.toggleToUp(false);\r\n            arrowHead.style.top = this.movableHelper.offsetTop + this.movableHelper.offsetHeight / 2 - arrowHead.offsetHeight / 2 + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft - arrowHead.offsetWidth + "px";\r\n            arrowHorizontal.style.top = arrowHead.offsetTop + arrowHead.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            let arrowHorizontal2 = this.getArrowElem(arrowHorizontalID2);\r\n            let arrowJoint2 = this.getArrowElem(arrowJointID2);\r\n            this.setClassOfJoint(2, JQ1);\r\n            arrowHorizontal.style.width = arrowHead.offsetWidth / overlapdivider + arrowHead.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / overlapdivider - arrowHorizontal.offsetWidth + "px";\r\n            arrowHorizontal2.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal2.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowHorizontal.offsetLeft - arrowJoint.offsetWidth + arrowJoint.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.left = arrowJoint.offsetLeft + "px";\r\n            arrowJoint2.style.top = arrowHorizontal2.offsetTop + "px";\r\n            arrowVertical.style.height = -arrowJoint2.offsetTop + arrowJoint.offsetTop - arrowJoint2.offsetHeight\r\n                + arrowJoint.offsetHeight / overlapdivider + arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowVertical.style.top = arrowJoint2.offsetTop + arrowJoint2.offsetHeight - arrowJoint2.offsetHeight / overlapdivider + "px";\r\n            arrowHorizontal2.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth\r\n                - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowHorizontal2.style.width = arrowJoint2.offsetLeft + arrowJoint2.offsetWidth / overlapdivider\r\n                - this.movableElem.offsetLeft - this.movableElem.offsetWidth + this.movableElem.offsetWidth / overlapdivider + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID, arrowHorizontalID2, arrowJointID2]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHelperHidden();\r\n            await this.turnMovableHidden();\r\n            return;\r\n        }\r\n        else {\r\n            this.setClassOfHead(DOWN);\r\n            this.setClassOfJoint(1, JQ1);\r\n            this.toggleToUp(true);\r\n            arrowHead.style.top = this.movableHelper.offsetTop - arrowHead.offsetHeight + "px";\r\n            arrowHead.style.left = this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2 + "px";\r\n            arrowVertical.style.left = arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2 + "px";\r\n            arrowHorizontal.style.top = this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2 + "px";\r\n            arrowJoint.style.top = arrowHorizontal.offsetTop + "px";\r\n            arrowJoint.style.left = arrowVertical.offsetLeft + "px";\r\n            arrowHorizontal.style.width = this.movableElem.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider - this.movableElem.offsetLeft + arrowJoint.offsetLeft - this.movableElem.offsetWidth + "px";\r\n            arrowHorizontal.style.left = this.movableElem.offsetLeft + this.movableElem.offsetWidth - this.movableElem.offsetWidth / overlapdivider + "px";\r\n            arrowVertical.style.height = arrowJoint.offsetHeight / overlapdivider + arrowHead.offsetHeight / overlapdivider + arrowHead.offsetTop - arrowJoint.offsetTop - arrowJoint.offsetHeight + "px";\r\n            arrowVertical.style.top = arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider + "px";\r\n        }\r\n        this.turnMovableVisible();\r\n        this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n        await this.turnMovableHelperVisible();\r\n        await sleepStaticAnimation();\r\n        await this.turnArrowElemsHidden();\r\n        await this.turnMovableHelperHidden();\r\n        await this.turnMovableHidden();\r\n    }\r\n    async displayAddresserhoehung(id, i, pre, hex) {\r\n        if (aniControl.isAni3())\r\n            return;\r\n        console.log(addressbyte + id);\r\n        let targetelem = document.getElementById(addressbyte + id);\r\n        this.movableElem.innerHTML = this.formatLineString("h1", pre + i);\r\n        let endaddr = this.addresszaehlerElem.innerHTML;\r\n        console.log(i);\r\n        /* if(Manipulator.isBin(i)){\r\n            endaddr = Manipulator.formatHextoDat16(String(Manipulator.hexToDec(hex)-Manipulator.binToDec(i)));\r\n        }\r\n        else if(Manipulator.isHex(i)){\r\n            endaddr = Manipulator.formatHextoDat16(String(Manipulator.hexToDec(hex)-Manipulator.hexToDec(i)));\r\n        }\r\n        else endaddr = Manipulator.formatHextoDat16(String(Manipulator.hexToDec(hex)-Number(i)))\r\n         */\r\n        // let endaddr:string = String(Manipulator.hexToDec(hex)-i); // DecOrHex\r\n        // console.log(endaddr);\r\n        if (targetelem != null) {\r\n            this.movableElem.style.top = targetelem.offsetTop - this.descriptionLineElem.scrollTop + targetelem.offsetHeight / 2 - this.movableElem.offsetHeight / 2 + "px";\r\n            this.movableElem.style.left = targetelem.offsetLeft + targetelem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n        }\r\n        else {\r\n            console.log("elem not found");\r\n            this.movableElem.style.top = this.descriptionTableBox.offsetTop + this.descriptionTableBox.offsetHeight - this.movableElem.offsetHeight + "px";\r\n            this.movableElem.style.left = this.descriptionTableBox.offsetLeft + this.descriptionTableBox.offsetWidth / 2 + "px";\r\n        }\r\n        this.targetElemLeft = this.addresszaehlerElem.offsetLeft + this.addresszaehlerElem.offsetWidth;\r\n        this.targetElemTop = this.translatedinfoDividerDiv.offsetTop;\r\n        if (aniControl.isAni1()) {\r\n            this.movableHelper.innerHTML = this.formatLineString("h1", endaddr);\r\n            this.movableHelper.style.left = this.addresszaehlerElem.offsetLeft + this.addresszaehlerElem.offsetWidth / 2 - this.movableHelper.offsetWidth / 2 + "px";\r\n            this.movableHelper.style.top = this.translatedinfoDividerDiv.offsetTop + "px";\r\n            this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft > this.targetElemLeft) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetTop < this.targetElemTop) {\r\n                await this.moveSleepCheck(this.getPixeljump(), 0);\r\n            }\r\n            this.movableElem.style.top = this.targetElemTop + "px";\r\n            this.turnMovableHelperVisible();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft + this.movableElem.offsetWidth > this.movableHelper.offsetLeft + this.movableHelper.offsetWidth) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            this.turnMovableHidden();\r\n            this.movableHelper.innerHTML = this.formatLineString("h1", Manipulator_Manipulator.formatHextoDat16(hex));\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            this.turnMovableHelperHidden();\r\n            return;\r\n        }\r\n        else {\r\n            let arrowHead = this.getArrowElem(arrowHeadID);\r\n            let arrowHorizontal = this.getArrowElem(arrowHorizontalID);\r\n            let arrowJoint = this.getArrowElem(arrowJointID);\r\n            let arrowVertical = this.getArrowElem(arrowVerticalID);\r\n            this.setClassOfHead(DOWN);\r\n            this.setClassOfJoint(1, JQ2);\r\n            this.toggleToUp(true);\r\n            this.movableHelper.innerHTML = this.formatLineString("h1", "+" + i);\r\n            this.movableHelper.style.left = this.targetElemLeft + "px";\r\n            this.movableHelper.style.top = this.targetElemTop + "px";\r\n            arrowHead.style.top = (this.movableHelper.offsetTop - arrowHead.offsetHeight) + "px";\r\n            arrowHead.style.left = (this.movableHelper.offsetLeft + this.movableHelper.offsetWidth / 2 - arrowHead.offsetWidth / 2) + "px";\r\n            arrowVertical.style.left = (arrowHead.offsetLeft + arrowHead.offsetWidth / 2 - arrowVertical.offsetWidth / 2) + "px";\r\n            arrowHorizontal.style.top = (this.movableElem.offsetTop + this.movableElem.offsetHeight / 2 - arrowHorizontal.offsetHeight / 2) + "px";\r\n            arrowJoint.style.top = (arrowHorizontal.offsetTop) + "px";\r\n            arrowJoint.style.left = (arrowVertical.offsetLeft) + "px";\r\n            arrowHorizontal.style.width = (this.movableElem.offsetWidth / overlapdivider + arrowJoint.offsetWidth / overlapdivider + this.movableElem.offsetLeft - arrowJoint.offsetLeft - arrowJoint.offsetWidth) + "px";\r\n            arrowHorizontal.style.left = (arrowJoint.offsetLeft + arrowJoint.offsetWidth - arrowJoint.offsetWidth / overlapdivider) + "px";\r\n            arrowVertical.style.height = (arrowJoint.offsetHeight / overlapdivider + arrowHead.offsetHeight / overlapdivider + arrowHead.offsetTop - arrowJoint.offsetTop) + "px";\r\n            arrowVertical.style.top = (arrowJoint.offsetTop + arrowJoint.offsetHeight - arrowJoint.offsetHeight / overlapdivider) + "px";\r\n            this.turnMovableVisible();\r\n            this.turnArrowElemVisible([arrowHeadID, arrowVerticalID, arrowJointID, arrowHorizontalID]);\r\n            await this.turnMovableHelperVisible();\r\n            await sleepStaticAnimation();\r\n            await this.turnArrowElemsHidden();\r\n            await this.turnMovableHidden();\r\n            this.movableElem.innerHTML = this.formatLineString("h1", endaddr);\r\n            this.movableElem.style.left = this.addresszaehlerElem.offsetLeft + this.addresszaehlerElem.offsetWidth / 2 - this.movableElem.offsetWidth / 2 + "px";\r\n            this.movableElem.style.top = this.translatedinfoDividerDiv.offsetTop + "px";\r\n            await this.turnMovableVisible();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            while (this.movableElem.offsetLeft + this.movableElem.offsetWidth > this.movableHelper.offsetLeft + this.movableHelper.offsetWidth) {\r\n                await this.moveSleepCheck(0, -this.getPixeljump());\r\n            }\r\n            this.turnMovableHelperHidden();\r\n            this.movableElem.innerHTML = this.formatLineString("h1", Manipulator_Manipulator.formatHextoDat16(hex));\r\n            await sleepStopStartTime();\r\n            await sleepStopStartTime();\r\n            this.turnMovableHidden();\r\n            return;\r\n        }\r\n    }\r\n    async moveSleepCheck(t, l) {\r\n        await this.updateMovingElement(t, l);\r\n        await sleepForFrame();\r\n        await checkIfPaused();\r\n    }\r\n    async moveHelperSleepCheck(t, l) {\r\n        await this.updateMovingHelperElement(t, l);\r\n        await sleepForFrame();\r\n        await checkIfPaused();\r\n    }\r\n    formatLineString(tag, line) {\r\n        if (line.length > 30) {\r\n            line = line.substring(0, 25);\r\n            return `<${tag} class="moveableText">${line}...</${tag}>`;\r\n        }\r\n        return `<${tag} class="moveableText">${line}</${tag}>`;\r\n    }\r\n    getArrowElem(s) {\r\n        for (let i = 0; i < this.arrowElems.length; i++) {\r\n            if (this.arrowElems[i].id === s) {\r\n                return this.arrowElems[i];\r\n            }\r\n        }\r\n        return this.createArrowBodyElem(s);\r\n    }\r\n    toggleToUp(b) {\r\n        let elem = this.getArrowElem(arrowHeadID);\r\n        if (b) {\r\n            elem.classList.add(arrowUp_DownCN);\r\n            elem.classList.remove(arrowLeft_RightCN);\r\n        }\r\n        else {\r\n            elem.classList.remove(arrowUp_DownCN);\r\n            elem.classList.add(arrowLeft_RightCN);\r\n        }\r\n    }\r\n    setMovableParameters(t, l) {\r\n        this.movableElem.style.top = t + "px";\r\n        this.movableElem.style.left = l + "px";\r\n        // this.movableElem.style.height=h+"px";\r\n        // this.movableElem.style.width=w+"px";\r\n    }\r\n    getPixeljump() {\r\n        return aniControl.speed + 1;\r\n    }\r\n    async adjustWidthOfMovable(n, w) {\r\n        if (this.movableElem.offsetWidth + n > w && this.movableElem.offsetWidth - n < w) {\r\n            this.movableElem.style.width = this.movableElem.offsetWidth + "px";\r\n        }\r\n        else if (this.movableElem.offsetWidth > w) {\r\n            this.movableElem.style.width = (this.movableElem.offsetWidth - n) + "px";\r\n        }\r\n        else {\r\n            this.movableElem.style.width = (this.movableElem.offsetWidth + n) + "px";\r\n        }\r\n    }\r\n    async adjustHeightOfMovable(n, h) {\r\n        if (this.movableElem.offsetHeight + n > h && this.movableElem.offsetHeight - n < h) {\r\n            this.movableElem.style.height = this.movableElem.offsetHeight + "px";\r\n        }\r\n        else if (this.movableElem.offsetHeight > h) {\r\n            this.movableElem.style.height = (this.movableElem.offsetHeight - n) + "px";\r\n        }\r\n        else {\r\n            this.movableElem.style.height = (this.movableElem.offsetHeight + n) + "px";\r\n        }\r\n    }\r\n    createArrowBodyElem(s) {\r\n        let newElem;\r\n        newElem = document.createElement("div");\r\n        newElem.id = s;\r\n        newElem.style.top = `${0}`;\r\n        newElem.style.left = `${0}`;\r\n        newElem.style.visibility = "hidden";\r\n        newElem.style.zIndex = "2";\r\n        switch (s) {\r\n            case arrowHeadID:\r\n                newElem.style.zIndex = "3";\r\n                newElem.classList.add("bgI_C_C");\r\n                break;\r\n            case arrowHorizontalID:\r\n            case arrowHorizontalID2:\r\n                newElem.classList.add("bgI_C_C", "horizontalBody");\r\n                break;\r\n            case arrowJointID:\r\n            case arrowJointID2:\r\n                newElem.classList.add("bgI_C_C", "jointBody");\r\n                break;\r\n            case arrowVerticalID:\r\n                newElem.classList.add("bgI_C_C", "verticalBody");\r\n                break;\r\n            default:\r\n                alert("someshit gone down");\r\n                break;\r\n        }\r\n        getHtmlElement("body").appendChild(newElem);\r\n        this.arrowElems.push(newElem);\r\n        return newElem;\r\n    }\r\n    setClassOfHead(s) {\r\n        let elem = this.getArrowElem(arrowHeadID);\r\n        switch (s) {\r\n            case UP:\r\n                elem.classList.add("arrowU");\r\n                elem.classList.remove("arrowD");\r\n                elem.classList.remove("arrowLeft");\r\n                elem.classList.remove("arrowRight");\r\n                break;\r\n            case DOWN:\r\n                elem.classList.remove("arrowU");\r\n                elem.classList.add("arrowD");\r\n                elem.classList.remove("arrowLeft");\r\n                elem.classList.remove("arrowRight");\r\n                break;\r\n            case LEFT:\r\n                elem.classList.remove("arrowU");\r\n                elem.classList.remove("arrowD");\r\n                elem.classList.add("arrowLeft");\r\n                elem.classList.remove("arrowRight");\r\n                break;\r\n            case RIGHT:\r\n                elem.classList.remove("arrowU");\r\n                elem.classList.remove("arrowD");\r\n                elem.classList.remove("arrowLeft");\r\n                elem.classList.add("arrowRight");\r\n                break;\r\n        }\r\n    }\r\n    setClassOfJoint(id, s) {\r\n        let elem = id == 1 ? this.getArrowElem(arrowJointID) : this.getArrowElem(arrowJointID2);\r\n        switch (s) {\r\n            case JQ1:\r\n                elem.classList.add("jointQ1");\r\n                elem.classList.remove("jointQ2");\r\n                elem.classList.remove("jointQ3");\r\n                elem.classList.remove("jointQ4");\r\n                break;\r\n            case JQ2:\r\n                elem.classList.remove("jointQ1");\r\n                elem.classList.add("jointQ2");\r\n                elem.classList.remove("jointQ3");\r\n                elem.classList.remove("jointQ4");\r\n                break;\r\n            case JQ3:\r\n                elem.classList.remove("jointQ1");\r\n                elem.classList.remove("jointQ2");\r\n                elem.classList.add("jointQ3");\r\n                elem.classList.remove("jointQ4");\r\n                break;\r\n            case JQ4:\r\n                elem.classList.remove("jointQ1");\r\n                elem.classList.remove("jointQ2");\r\n                elem.classList.remove("jointQ3");\r\n                elem.classList.add("jointQ4");\r\n                break;\r\n            default:\r\n                throw new Error("Error occured at JointSVG assigment");\r\n        }\r\n    }\r\n    async setStartTopToInputLine(id) {\r\n        let childElem = document.getElementById(`${(id + 1) < 10 ? "0" + (id + 1) : (id + 1)}inputP`);\r\n        if (childElem != null) {\r\n            let n = updateScrollOfIn_Out(this.outPutText.id, childElem.id);\r\n            this.movableElem.style.top = childElem.offsetTop - n - 1 / 2 * this.movableElem.offsetHeight + 1 / 2 * childElem.offsetHeight + "px";\r\n            if (this.movableElem.offsetTop < this.inputText.offsetTop) {\r\n                this.movableElem.style.top = this.inputText.offsetTop + "px";\r\n            }\r\n            this.movableElem.style.left = childElem.offsetLeft + "px";\r\n        }\r\n    }\r\n    async setTargetTopToSpeicherabbild(id) {\r\n        let childElem = document.getElementById(`${(id + 1) < 10 ? "0" + (id + 1) : (id + 1)}outputP`);\r\n        if (childElem != null) {\r\n            let n = updateScrollOfIn_Out(this.outPutText.id, childElem.id);\r\n            console.log(n);\r\n            this.targetElemTop = childElem.offsetTop - n - 1 / 2 * this.movableElem.offsetHeight + 1 / 2 * childElem.offsetHeight;\r\n        }\r\n    }\r\n    async turnArrowElemVisible(s) {\r\n        this.arrowElems.forEach(e => {\r\n            if (s.includes(e.id)) {\r\n                e.style.visibility = "visible";\r\n            }\r\n        });\r\n    }\r\n    async turnArrowElemsHidden() {\r\n        this.arrowElems.forEach(e => {\r\n            if (e.id == arrowHorizontalID || e.id == arrowHorizontalID2) {\r\n                e.style.width = 0 + "px";\r\n            }\r\n            if (e.id == arrowVerticalID) {\r\n                e.style.height = 0 + "px";\r\n            }\r\n            e.style.visibility = "hidden";\r\n        });\r\n    }\r\n    async turnMovableHidden() {\r\n        this.movableElem.style.visibility = "hidden";\r\n    }\r\n    async turnMovableVisible() {\r\n        this.movableElem.style.visibility = "visible";\r\n    }\r\n    async turnMovableHelperHidden() {\r\n        this.movableHelper.style.visibility = "hidden";\r\n    }\r\n    async turnMovableHelperVisible() {\r\n        this.movableHelper.style.visibility = "visible";\r\n    }\r\n    async updateMovingElement(mTop, mLeft) {\r\n        this.movableElem.style.top = (this.movableElem.offsetTop + mTop) + "px";\r\n        this.movableElem.style.left = (this.movableElem.offsetLeft + mLeft) + "px";\r\n        /* this.movableElem.style.top = (100*this.movableElem.offsetTop/bodyElem.offsetHeight+mTop/5)+"%";\r\n        this.movableElem.style.left = (100*this.movableElem.offsetLeft/bodyElem.offsetWidth+mLeft/5)+"%"; */\r\n    }\r\n    async updateMovingHelperElement(mTop, mLeft) {\r\n        this.movableHelper.style.top = (this.movableHelper.offsetTop + mTop) + "px";\r\n        this.movableHelper.style.left = (this.movableHelper.offsetLeft + mLeft) + "px";\r\n        /* this.movableHelper.style.top = (100*this.movableHelper.offsetTop/bodyElem.offsetHeight+mTop/5)+"%";\r\n        this.movableHelper.style.left = (100*this.movableHelper.offsetLeft/bodyElem.offsetWidth+mLeft/5)+"%"; */\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ProjectWindow.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst descriptionLines = getHtmlElement(\'descriptionLines\');\r\nconst symbolTableLines = getHtmlElement(\'symbolTableLines\');\r\nconst currentLine = getHtmlElement(\'currentLine\');\r\nconst outputText = getHtmlElement(\'OutputText\');\r\nconst inputText = getHtmlElement(\'InputText\');\r\nconst addresszahler = getHtmlElement(\'Addresszahler\');\r\nconst machinenbefehl = getHtmlElement(\'Machinenbefehl\');\r\nconst outputwindowContainer = getHtmlElement(\'OutputWindowContainer\');\r\nconst OutputTextAreaElement = getHtmlElement(\'OutputTextArea\');\r\nconst InputID = getHtmlElement(\'InputID\');\r\nconst InputLines = getHtmlElement(\'InputLines\');\r\nconst OutputAddresses = getHtmlElement(\'OutputAddresses\');\r\nconst OutputLines = getHtmlElement(\'OutputLines\');\r\nconst currentLineLine = getHtmlElement("currentLineLine");\r\nconst windowOutputAddresses = getHtmlElement("OutputWindowAddresses");\r\nconst windowOutputLines = getHtmlElement("OutputWindowLines");\r\nconst OutputWindowMachineCode = getHtmlElement("OutputWindowMachineCode");\r\nconst targetSymbolTableLine = "bufferTargetSymbolTable";\r\nconst targetlabelValuePlaceholder = "labelValuePlaceholder";\r\nconst p2LabelValuePlaceholder = "p2LabelValuePlaceholder";\r\nlet skipped = false;\r\nconst searchEntryLabel = "searchEntryLabel";\r\nconst symboladdress = "symboladdress";\r\nconst translating = getHtmlElement("translatingContainer");\r\nconst translatingInfo = getHtmlElement("translatingInfo");\r\nconst setTranslatingDivHidden = () => {\r\n    translating.style.visibility = "hidden";\r\n};\r\nconst setTranslatingDivVisible = () => {\r\n    if (aniControl.isAni3() && aniControl.speed == 4 && aniControl.play && translating.getAttribute("displayable") == "true") {\r\n        // console.log("set");\r\n        translating.style.visibility = "visible";\r\n    }\r\n};\r\nconst setWarningSign = (b) => {\r\n    document.getElementById("warningSign").setAttribute("selected", b.toString());\r\n};\r\nclass ProjectWindow {\r\n    constructor() {\r\n        this.inputLineControl = InputLineControl.getInstance();\r\n        this.symbolList = SymbolList.getInstance();\r\n        this.iWindow = new InputWindow(this);\r\n        this.linkerAuflosungB = false;\r\n        this.nextParseID = 0;\r\n        this.inputLines = [];\r\n        this.inputstrings = [];\r\n        this.potentialConsts = [];\r\n        this.symbols = [];\r\n        this.partialReset = async () => {\r\n            this.inputLines = [];\r\n            await this.clearMachinenbefehlandCurrentLine();\r\n            symbolTableLines.innerHTML = `<h4 id="${targetSymbolTableLine}"> &nbsp; </h4>`;\r\n            descriptionLines.innerHTML = "";\r\n            addresszahler.innerHTML = "0000h";\r\n            translating.setAttribute("displayable", "true");\r\n            this.nextParseID = 0;\r\n            OutputAddresses.innerHTML = "";\r\n            OutputLines.innerHTML = "";\r\n            OutputTextAreaElement.innerHTML = "";\r\n            windowOutputAddresses.innerHTML = "";\r\n            windowOutputLines.innerHTML = "";\r\n            await this.inputLineControl.reset();\r\n            await this.anim.reset();\r\n            await aniControl.resetFlags();\r\n            getHtmlElement("InputText").scrollTop = 0;\r\n            setWarningSign(false);\r\n        };\r\n        this.refreshInputListItems = () => {\r\n            InputID.innerHTML = "";\r\n            InputLines.innerHTML = "";\r\n            OutputAddresses.innerHTML = "";\r\n            OutputLines.innerHTML = "";\r\n            let ss = [];\r\n            let e;\r\n            var inputstring;\r\n            for (let i = 0; i < this.inputstrings.length; i++) {\r\n                e = this.inputLines[i];\r\n                if (e != null) {\r\n                    if (e.getType() == InputLineType.EMPTY) {\r\n                        InputID.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputLineId" class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                        InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP" class="overflowElipsis">${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}</p>`;\r\n                    }\r\n                    else {\r\n                        InputID.innerHTML += `<p  class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                        InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP" class="overflowElipsis">${Manipulator_Manipulator.formatLabelandBefehlDisplay(e.getLabel(), e.getFirstPart(), e.commandLinetoString(false))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}</p>`;\r\n                    }\r\n                    OutputAddresses.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}oAddress" class="gray">&nbsp;</p>`;\r\n                    OutputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP" class="overflowElipsis">&nbsp;</p>`;\r\n                }\r\n                else {\r\n                    inputstring = this.inputstrings[i];\r\n                    this.potentialConsts.forEach(e => {\r\n                        // var var1:RegExp = new RegExp(\'.*,(\\s*|\\s+)\'+e+\'.*\');\r\n                        var var1 = new RegExp("\\\\s*" + e + "\\\\s*,", "i");\r\n                        var var2 = new RegExp(",\\\\s*" + e + "\\\\s*", "i");\r\n                        var var3 = new RegExp("(\\\\s+|^\\\\s*)" + e + "\\\\s+", "i");\r\n                        if (inputstring.match(var1) != null) {\r\n                            inputstring = inputstring.replace(e, `<span class="purple">${e}</span>`);\r\n                        }\r\n                        else if (inputstring.match(var2) != null) {\r\n                            inputstring = inputstring.replace(e, `<span class="purple">${e}</span>`);\r\n                        }\r\n                        else if (inputstring.match(var3) != null) {\r\n                            inputstring = inputstring.replace(e, `<span class="purple">${e}</span>`);\r\n                        }\r\n                    });\r\n                    InputID.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputLineId" class="gray">${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}:</p>`;\r\n                    InputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP"  class="overflowElipsis">${inputstring} &nbsp;</p>`;\r\n                    OutputAddresses.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}oAddress" class="gray">&nbsp;</p>`;\r\n                    OutputLines.innerHTML += `<p id="${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP" class="overflowElipsis">&nbsp;</p>`;\r\n                }\r\n            }\r\n            // console.log("items refreshed");\r\n        };\r\n        this.refreshInputListItem = (i) => {\r\n            if (i < this.inputLines.length) {\r\n                let e = this.inputLines[i];\r\n                let idString = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`;\r\n                let inputLineHTML = getHtmlElement(idString);\r\n                // console.log(inputLineHTML);\r\n                if (e.getType() == InputLineType.EMPTY) {\r\n                    inputLineHTML.innerHTML = `${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n                else if (e.getType() == InputLineType.PSEUDOTRANSLATED) {\r\n                    inputLineHTML.innerHTML = `${Manipulator_Manipulator.formatLabelDisplay(e.getLabel(), true)}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                }\r\n                else {\r\n                    if (this.symbolList.isConst(e.getFirstPart())) {\r\n                        inputLineHTML.innerHTML = `${Manipulator_Manipulator.formatConstandBefehlDisplay(e.getFirstPart(), e.getSecondPart(), e.commandLinetoString(true))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                        inputLineHTML.innerHTML = inputLineHTML.innerHTML.replace(e.getFirstPart(), `<span class="purple">${e.getFirstPart()}</span>`);\r\n                    }\r\n                    else {\r\n                        inputLineHTML.innerHTML = `${Manipulator_Manipulator.formatLabelandBefehlDisplay(e.getLabel(), e.getFirstPart(), e.commandLinetoString(true))}${e.getCommentary() == "" ? "" : ";" + e.getCommentary()}`;\r\n                        if (this.symbolList.isConst(e.getSecondPart())) {\r\n                            // console.log(e.getSecondPart()+" found!")\r\n                            inputLineHTML.innerHTML = inputLineHTML.innerHTML.replace(e.getSecondPart() + ",", `<span class="purple">${e.getSecondPart()}</span>,`);\r\n                        }\r\n                        else if (this.symbolList.isConst(e.getThirdPart())) {\r\n                            // console.log(e.getThirdPart()+" found!")\r\n                            inputLineHTML.innerHTML = inputLineHTML.innerHTML.replace("," + e.getThirdPart(), `,<span class="purple">${e.getThirdPart()}</span>&nbsp;`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.repushSpeicherabbildOf = (i, b) => {\r\n            if (i < this.inputLines.length) {\r\n                let e = this.inputLines[i];\r\n                let idString = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}outputP`;\r\n                let outputLineHTML = getHtmlElement(idString);\r\n                if (e.getType() == InputLineType.TRANSLATED) {\r\n                    // console.log(b);\r\n                    if (!b) {\r\n                        getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}oAddress`).innerHTML = `${Manipulator_Manipulator.formatHextoDat16(e.getStartingAddr()) + ":"}`;\r\n                    }\r\n                    if (e.getTranslation().includes("????")) {\r\n                        // outputLineHTML.innerHTML=`${this.inputLineControl.getDisplayableSpeicherabbild(e,false)}&nbsp;${this.getLabelIfUnknown(i,b)}`;\r\n                        outputLineHTML.innerHTML = `${Manipulator_Manipulator.formatSpeicherabbildandLabel(this.inputLineControl.getDisplayableSpeicherabbild(e, false), this.getLabelIfUnknown(i, b))}`;\r\n                    }\r\n                    else {\r\n                        outputLineHTML.innerHTML = `${this.inputLineControl.getDisplayableSpeicherabbild(e, true)}&nbsp;`;\r\n                    }\r\n                }\r\n                else {\r\n                    outputLineHTML.innerHTML = `&nbsp;`;\r\n                }\r\n            }\r\n        };\r\n        this.rePushSymbols = () => {\r\n            this.symbols = this.symbolList.getSequence();\r\n            let s;\r\n            let n, p;\r\n            let idString = "";\r\n            symbolTableLines.innerHTML = "";\r\n            if (this.symbols.length != 0) {\r\n                for (let i = 0; i < this.symbols.length; i++) {\r\n                    idString = `symbol${i}`;\r\n                    if (this.symbols[i] != null) {\r\n                        s = this.symbols[i];\r\n                        if (s instanceof Label) {\r\n                            n = s.getName();\r\n                            p = s.getPosition();\r\n                            symbolTableLines.innerHTML += `<h4 id="${idString}"><span class="gray">L:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = <span id="${symboladdress}${i}">${this.inputLineControl.fHD16(p)}</span> (${this.inputLineControl.getLittleEndianOf(p)})</h4>`;\r\n                        }\r\n                        if (s instanceof Constant) {\r\n                            n = s.getName();\r\n                            p = s.getValue();\r\n                            if (Manipulator_Manipulator.isDat_8(p)) {\r\n                                symbolTableLines.innerHTML += `<h4 id="${idString}"><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = <span id="${symboladdress}${i}">&nbsp;&nbsp;${this.inputLineControl.fHD8(p)}</span></h4>`;\r\n                            }\r\n                            else {\r\n                                symbolTableLines.innerHTML += `<h4 id="${idString}"><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = <span id="${symboladdress}${i}">${this.inputLineControl.fHD16(p)}</span></h4>`;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                symbolTableLines.innerHTML += `<h4 id="${targetSymbolTableLine}"> &nbsp;</h4>`;\r\n            }\r\n            updateScroll("symbolTableLines");\r\n        };\r\n        this.repushTranslations = async () => {\r\n            OutputTextAreaElement.innerHTML = "";\r\n            windowOutputLines.innerHTML = "";\r\n            windowOutputAddresses.innerHTML = "";\r\n            let i;\r\n            for (let j = 0; j <= this.inputLines.length; j++) {\r\n                i = this.inputLines[j];\r\n                if (i != undefined) {\r\n                    if (i.getType() != InputLineType.TRANSLATED) {\r\n                        continue;\r\n                    }\r\n                    if (i.getTranslation().includes("??")) {\r\n                        windowOutputLines.innerHTML += `<p class="overflowElipsis">\r\n                    ${Manipulator_Manipulator.formatSpeicherabbildandLabel(this.inputLineControl.getDisplayableSpeicherabbild(i, false), this.getLabelIfUnknown(i.getId(), false))}</p>`;\r\n                    }\r\n                    else {\r\n                        windowOutputLines.innerHTML += `<p class="overflowElipsis">\r\n                    ${this.inputLineControl.getDisplayableSpeicherabbild(i, true)}&nbsp;</p>`;\r\n                    }\r\n                    windowOutputAddresses.innerHTML += `<p class="gray">${i.getStartingAddr()}</p>`;\r\n                    OutputTextAreaElement.innerHTML += ":" + i.getTranslation() + "\\n";\r\n                }\r\n                else {\r\n                    windowOutputAddresses.innerHTML += `<p class="gray">&nbsp;</p>`;\r\n                    windowOutputLines.innerHTML += `<p class="overflowElipsis">&nbsp;</p>`;\r\n                    OutputTextAreaElement.innerHTML += ":00000001FF";\r\n                }\r\n            }\r\n        };\r\n        this.repushTranslationOf = async (i) => {\r\n            let e;\r\n            windowOutputAddresses.innerHTML = "";\r\n            windowOutputLines.innerHTML = "";\r\n            if (this.inputLines.length == this.inputstrings.length) {\r\n                e = this.inputLines[i];\r\n                if (i == this.inputLines.length - 1) {\r\n                    if (e.getType() == InputLineType.TRANSLATED) {\r\n                        OutputTextAreaElement.innerHTML += ":" + e.getTranslation() + "\\n";\r\n                    }\r\n                    OutputTextAreaElement.innerHTML += ":00000001FF";\r\n                }\r\n            }\r\n            if (i < this.inputLines.length) {\r\n                e = this.inputLines[i];\r\n                if (e.getType() == InputLineType.TRANSLATED) {\r\n                    OutputTextAreaElement.innerHTML += ":" + e.getTranslation() + "\\n";\r\n                }\r\n            }\r\n        };\r\n        this.linkerAuflosung = async () => {\r\n            this.repushTranslations();\r\n            if (this.linkerAuflosungB) {\r\n                await this.displaySecondPhase();\r\n                // this.toggleStop();\r\n                for (let i = 0; i < this.inputLines.length; i++) {\r\n                    await this.checkInputLine(this.inputLines[i]);\r\n                    await this.clearMachinenbefehlandCurrentLine();\r\n                }\r\n            }\r\n        };\r\n        this.displaySecondPhase = async () => {\r\n            let sleeptime = 400;\r\n            let newElem;\r\n            let lineBuffer = [];\r\n            let blockAnimation = this.checkForNoAniStep();\r\n            newElem = document.createElement("div");\r\n            newElem.id = "linkerTitelDiv";\r\n            newElem.classList.add("noMP");\r\n            if (!this.checkForSkip()) {\r\n                newElem.classList.add("hiddenDescriptionDiv");\r\n            }\r\n            descriptionLines.appendChild(newElem);\r\n            for (let i = 0; i < 7; i++) {\r\n                if (i < 2 || i > 4) {\r\n                    lineBuffer.push(`<p>&nbsp;&nbsp;&nbsp;</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>&nbsp;&nbsp;&nbsp;</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                }\r\n                if (i == 2 || i == 4) {\r\n                    lineBuffer.push(`<p>************************</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>************************</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                }\r\n                if (i == 3) {\r\n                    lineBuffer.push(`<p>2.Phase LinkerAuflösung</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>2.Phase LinkerAuflösung</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                }\r\n            }\r\n            if (!blockAnimation) {\r\n                lineBuffer.forEach(e => {\r\n                    newElem.innerHTML += e;\r\n                });\r\n            }\r\n        };\r\n        this.checkInputLine = async (e) => {\r\n            let s = "";\r\n            let n = "";\r\n            let k;\r\n            if (e.getType() != InputLineType.TRANSLATED) {\r\n                return;\r\n            }\r\n            let newElem;\r\n            let lineBuffer = [];\r\n            let blockAnimation = this.checkForNoAniStep();\r\n            newElem = document.createElement("div");\r\n            newElem.id = `${e.getId()}LinkerDiv`;\r\n            newElem.classList.add("noMP");\r\n            if (!this.checkForSkip()) {\r\n                newElem.classList.add("hiddenDescriptionDiv");\r\n            }\r\n            descriptionLines.appendChild(newElem);\r\n            if (e.getTranslation().includes("????") || e.hasOffsetLabel()) {\r\n                k = this.symbolList.getLabels().find(i => {\r\n                    if (e.hasOffsetLabel()) {\r\n                        if (i.getName().toLowerCase() == e.getLabelOfOffset().toLowerCase()) {\r\n                            return i;\r\n                        }\r\n                    }\r\n                    if (i.getName().toLowerCase() == e.getSecondPart().toLowerCase() || i.getName().toLowerCase() == e.getThirdPart().toLowerCase()) {\r\n                        return i;\r\n                    }\r\n                });\r\n                // console.log(this.getLinkerAufloesungLine(e.getId()));\r\n                if (aniControl.singleStepFlag)\r\n                    await aniControl.setPaused();\r\n                if (blockAnimation)\r\n                    await checkIfPaused();\r\n                await updateScrollOfIn_Out("OutputText", `${(e.getId() + 1) < 10 ? "0" + (e.getId() + 1) : (e.getId() + 1)}outputP`);\r\n                if (blockAnimation) {\r\n                    await this.anim.pushAufzulosendestoCurrentLine(e.getId(), this.getLinkerAufloesungLine(e.getId(), false));\r\n                }\r\n                currentLineLine.innerHTML = `${e.getStartingAddr()}: ${this.inputLineControl.getDisplayableSpeicherabbild(e, false)} <span>${this.getLabelIfUnknown(e.getId(), false)}</span>`;\r\n                addresszahler.innerHTML = `${e.getStartingAddr()}`;\r\n                machinenbefehl.innerHTML = `${this.inputLineControl.getDisplayableSpeicherabbild(e, false)}`;\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                //  id="${e.getId()}LD+${}\r\n                lineBuffer.push(`<p>Suche Label \'<span id="${searchEntryLabel}${e.getId()}" class="labelBlue">${k.getName()}</span>\' in SymbolTabelle</p>`);\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                    newElem.innerHTML += `<p>Suche Label \'<span id="${searchEntryLabel}${e.getId()}" class="labelBlue">${k.getName()}</span>\' in SymbolTabelle</p>`;\r\n                    updateScroll(descriptionLines.id);\r\n                }\r\n                currentLineLine.innerHTML = `${e.getStartingAddr()}: ${this.inputLineControl.getDisplayableSpeicherabbild(e, false)} <span class="crInvert">${this.getLabelIfUnknown(e.getId(), false)}</span>`;\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                if (k.getPosition() == "????") {\r\n                    if (blockAnimation) {\r\n                        await this.anim.searchEntryInSymboltablephaseOne(`${searchEntryLabel}${e.getId()}`, k.getName(), this.symbols.indexOf(k));\r\n                    }\r\n                    currentLineLine.innerHTML = `${e.getStartingAddr()}: ${this.inputLineControl.getDisplayableSpeicherabbild(e, false)} <span class="crInvert bkError">${this.getLabelIfUnknown(e.getId(), false)}</span>`;\r\n                    lineBuffer.push(`<p><span class="errorRed eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' konnte nicht aufgelöst werden!</span></p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p><span class="errorRed eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' konnte nicht aufgelöst werden!</span></p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    if (!blockAnimation) {\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                    }\r\n                    await sleepFor(10);\r\n                    aniControl.setStop();\r\n                    throw Error(\'Stop pressed\');\r\n                }\r\n                else {\r\n                    s = this.inputLineControl.getDisplayableSpeicherabbild(e, false);\r\n                    this.inputLineControl.retranslate(e);\r\n                    n = this.inputLineControl.getDisplayableSpeicherabbild(e, true);\r\n                    /* if(blockAnimation){\r\n                        await this.anim.exchangeLabelWithSymbolTable("Label \'"+k.getName()+"\'?","Label \'"+k.getName()+"\' = "+Manipulator.hexToDec(k.getPosition()!)+" ("+k.getPosition()!+")",this.symbols.indexOf(k));\r\n                    } */\r\n                    if (blockAnimation) {\r\n                        await this.anim.searchEntryInSymboltablephaseOne(`${searchEntryLabel}${e.getId()}`, k.getName(), this.symbols.indexOf(k));\r\n                    }\r\n                    lineBuffer.push(`<p class="eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' in Symboltabelle gefunden &nbsp;&nbsp;&nbsp; <span id="${p2LabelValuePlaceholder}"><span></p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML += `<p class="eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' in Symboltabelle gefunden &nbsp;&nbsp;&nbsp; <span id="${p2LabelValuePlaceholder}"><span></p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                        await sleepUntilNextStep();\r\n                    }\r\n                    if (blockAnimation) {\r\n                        await this.anim.searchEntryInSymboltablephaseTwo(this.symbols.indexOf(k), k.getPosition());\r\n                    }\r\n                    lineBuffer.pop();\r\n                    lineBuffer.push(`<p class="eingeruckt">Label \'<span class="labelBlue">${k.getName()}</span>\' in Symboltabelle gefunden, Wert: ${Manipulator_Manipulator.hexToDec(k.getPosition()) + " (" + k.getPosition() + ")"}</p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML = "";\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                        updateScroll(descriptionLines.id);\r\n                        await sleepUntilNextStep();\r\n                    }\r\n                    lineBuffer.push(`<p class="eingeruckt">Ersetzung im Speicherabbild: ${s}--\x3e${n}</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p class="eingeruckt">Ersetzung im Speicherabbild: ${s}--\x3e${n}</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    this.repushTranslations();\r\n                    machinenbefehl.innerHTML = `${n}`;\r\n                    if (blockAnimation) {\r\n                        await this.anim.moveDetailToSpeicherabbild(this.getLinkerAufloesungLine(e.getId(), true), e.getId());\r\n                    }\r\n                    this.repushSpeicherabbildOf(e.getId(), true);\r\n                    lineBuffer.push(`<p>&nbsp;</p>`);\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        newElem.innerHTML += `<p>&nbsp;</p>`;\r\n                        updateScroll(descriptionLines.id);\r\n                    }\r\n                    if (!blockAnimation) {\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                    }\r\n                }\r\n                updateScroll(descriptionLines.id);\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                if (this.checkForSkip()) { //bufferZeit für AnimationsTyp3 mit speed==3\r\n                    await sleepFor(40);\r\n                }\r\n            }\r\n        };\r\n        this.pushLines = async (isSkipped) => {\r\n            let input;\r\n            let iP;\r\n            skipped = isSkipped;\r\n            if (this.inputstrings.length > 0) {\r\n                for (let i = 0; i < this.inputstrings.length; i++) {\r\n                    this.translateInputStringOfId(i);\r\n                    translatingInfo.innerHTML = `${i + 1}/${this.inputstrings.length}`;\r\n                    if (this.inputLines.length > i) {\r\n                        input = this.inputLines[i];\r\n                        iP = getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`);\r\n                        await updateScrollOfIn_Out("InputText", `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`);\r\n                        if (input.getType() == InputLineType.EMPTY) {\r\n                            if (this.checkForNoAniStep())\r\n                                await checkIfPaused();\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            if (aniControl.start && aniControl.speed < 3 && aniControl.animationType != AnimationsTyp.Typ3)\r\n                                await sleepFor(1200 - (aniControl.speed) * 200);\r\n                            if (this.checkForNoAniStep()) {\r\n                                await this.anim.animationInputLineToCurrentLine(i, this.inputstrings[i].split(";")[0]);\r\n                            }\r\n                            this.nextParseID = 0;\r\n                            currentLineLine.innerHTML = `${input.getCommandLineToCurrentLine()}`;\r\n                            for (let i = 0; i < this.potentialConsts.length; i++) {\r\n                                let s = this.potentialConsts[i];\r\n                                if (currentLineLine.innerHTML.includes(s)) {\r\n                                    var regex1 = new RegExp(\'(>)\' + s + \'(<)\');\r\n                                    var regex2 = new RegExp(\'(\\\\s|>|,)\' + s + \'(<|,|\\\\s|\\\\b)\');\r\n                                    let match;\r\n                                    // console.log("regex1:")\r\n                                    match = currentLineLine.innerHTML.match(regex1);\r\n                                    // console.log(match);\r\n                                    if (match != null) {\r\n                                        currentLineLine.innerHTML = currentLineLine.innerHTML.replace(match[1] + s + match[2], match[1] + `<span class="purple">${s}</span>` + match[2]);\r\n                                        break;\r\n                                    }\r\n                                    // console.log("regex2:")\r\n                                    match = currentLineLine.innerHTML.match(regex2);\r\n                                    if (match != null) {\r\n                                        currentLineLine.innerHTML = currentLineLine.innerHTML.replace(match[1] + s + match[2], match[1] + `<span class="purple">${s}</span>` + match[2]);\r\n                                        break;\r\n                                    }\r\n                                    // console.log(match);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            await this.pushDescriptionLinesOf(i);\r\n                        }\r\n                        await this.repushTranslationOf(i);\r\n                    }\r\n                    if (aniControl.singleStepFlag)\r\n                        await this.pause();\r\n                    if (!skipped)\r\n                        await checkIfPaused();\r\n                    if (!this.checkForSkip()) {\r\n                        await sleepFor(1);\r\n                    }\r\n                }\r\n                descriptionLines.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> -------------------------------------------------------- </p>`;\r\n                this.linkerAuflosungB = this.aufzulosendeLabel();\r\n                await this.linkerAuflosung();\r\n                await updateScroll(descriptionLines.id);\r\n                // aniControl.setEnd();\r\n            }\r\n        };\r\n        this.pushDescriptionLinesOf = async (i) => {\r\n            let e;\r\n            let ss;\r\n            let l;\r\n            let newElem;\r\n            let lineBuffer = [];\r\n            let blockAnimation = this.checkForNoAniStep();\r\n            if (this.inputLines.length <= i) {\r\n                throw new Error("Expected was an ID of an Inputline smaller than " + this.inputLines.length + " but got " + i);\r\n            }\r\n            newElem = document.createElement("div");\r\n            newElem.id = `${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}DescriptionDiv`;\r\n            newElem.classList.add("noMP");\r\n            if (!this.checkForSkip()) {\r\n                newElem.classList.add("hiddenDescriptionDiv");\r\n            }\r\n            descriptionLines.appendChild(newElem);\r\n            l = this.inputLines[i];\r\n            ss = l.getDescriptionLine();\r\n            lineBuffer.push(`<p style=" white-space: nowrap; overflow: hidden;"> ----<span class="bold"><${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}></span>------------------------------------------------ </p>`);\r\n            // newElem.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> ----<span class="bold"><${(i+1)<10?"0"+(i+1):(i+1)}></span>------------------------------------------------ </p>`;\r\n            if (blockAnimation) {\r\n                newElem.innerHTML += `<p style=" white-space: nowrap; overflow: hidden;"> ----<span class="bold"><${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}></span>------------------------------------------------ </p>`;\r\n            }\r\n            for (let j = 0; j < ss.length; j++) {\r\n                e = ss[j];\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                }\r\n                if (e.includes("parse")) {\r\n                    await this.nextInverted(l.getAllV());\r\n                }\r\n                if (e.includes(\'error\')) {\r\n                    console.log("error has been found");\r\n                    await this.nextInverted(l.getAllV());\r\n                    aniControl.setStop();\r\n                    lineBuffer.push(`<p>${e}</p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML += `<p>${e}</p>`;\r\n                    }\r\n                    else {\r\n                        lineBuffer.forEach(e => {\r\n                            newElem.innerHTML += e;\r\n                        });\r\n                    }\r\n                    addClassTo("crError", "bkError");\r\n                    updateScroll(descriptionLines.id);\r\n                    throw Error(\'Stop pressed\');\r\n                }\r\n                else {\r\n                    lineBuffer.push(`<p>${e}</p>`);\r\n                    if (blockAnimation) {\r\n                        newElem.innerHTML += `<p>${e}</p>`;\r\n                    }\r\n                    updateScroll(descriptionLines.id);\r\n                }\r\n                if (e.includes("gefunden: Doppelpunkt")) {\r\n                    if (blockAnimation) {\r\n                        await sleepUntilNextStep();\r\n                        await this.anim.moveLabeltoSymboltableALTMoveable(l.getLabel());\r\n                        await this.rePushLastSymbolEmpty();\r\n                        await sleepUntilNextStep();\r\n                        await this.anim.moveLabeltoSymboltableALTMoveableHelper(this.symbolList.getPositionOfSpecificLabel(l.getLabel()));\r\n                    }\r\n                    this.rePushSymbols();\r\n                }\r\n                if (j - 1 > 0) {\r\n                    if (ss[j - 1].includes("gesamter")) {\r\n                        if (l.getFirstPart().toUpperCase() == "ORG") {\r\n                            // this.pushTranslationOf(i);\r\n                            this.repushSpeicherabbildOf(i, false);\r\n                        }\r\n                        else if (l.getEndAddr() != "") {\r\n                            // machinenbefehl.innerHTML= `${this.inputLineControl.getDisplayableSpeicherabbild(l,false)}`;\r\n                            machinenbefehl.innerHTML = `${Manipulator_Manipulator.formatSpeicherabbildandLabel(this.inputLineControl.getDisplayableSpeicherabbild(l, false), this.getLabelIfUnknown(l.getId(), false))}`;\r\n                            console.log(this.inputLineControl.isFreeAddr(l.getStartingAddr(), l.getEndAddr()));\r\n                            if (!this.inputLineControl.isFreeAddr(l.getStartingAddr(), l.getEndAddr())) {\r\n                                lineBuffer.push(`<p>${StringConstructor.warAddrOverwriten()}</p>`);\r\n                                if (blockAnimation) {\r\n                                    newElem.innerHTML += `<p>${StringConstructor.warAddrOverwriten()}</p>`;\r\n                                }\r\n                            }\r\n                            if (blockAnimation) {\r\n                                await sleepUntilNextStep();\r\n                                await this.anim.moveDetailToSpeicherabbild(this.getLinkerAufloesungLine(i, false), i);\r\n                            }\r\n                            // this.pushTranslationOf(i);\r\n                            this.repushSpeicherabbildOf(i, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!blockAnimation) {\r\n                lineBuffer.forEach(e => {\r\n                    newElem.innerHTML += e;\r\n                });\r\n            }\r\n            if (this.symbolList.isConst(l.getFirstPart())) {\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                    await this.anim.moveConstToSymbolTable(this.symbolList.getSpecificConstantByName(l.getFirstPart()).toStringtoMovable());\r\n                }\r\n                this.rePushSymbols();\r\n                this.repushSpeicherabbildOf(i, false);\r\n            }\r\n            else if (l.getType() == InputLineType.PSEUDOTRANSLATED) {\r\n                this.repushSpeicherabbildOf(i, false);\r\n            }\r\n            else {\r\n                if (blockAnimation) {\r\n                    await sleepUntilNextStep();\r\n                    if (l.getFirstPart().toUpperCase() == "ORG") {\r\n                        // console.log("yes");\r\n                        let m = l.getSecondPart();\r\n                        if (this.symbolList.isConst(l.getSecondPart())) {\r\n                            m = this.symbolList.getSpecificConstantByName(l.getSecondPart()).getValue();\r\n                        }\r\n                        await this.anim.displayAddresserhoehung(l.getId(), m, "=", l.getEndAddr());\r\n                    }\r\n                    else\r\n                        await this.anim.displayAddresserhoehung(l.getId(), String(l.getLength()), "+", l.getEndAddr());\r\n                }\r\n                addresszahler.innerHTML = `${Manipulator_Manipulator.formatHextoDat16(l.getEndAddr())}`;\r\n            }\r\n            if (this.checkForSkip()) { //bufferZeit für AnimationsTyp3 mit speed==3\r\n                await sleepFor(30);\r\n            }\r\n            if (blockAnimation) {\r\n                await sleepUntilNextStep();\r\n            }\r\n            if (newElem.innerHTML.includes("Achtung")) {\r\n                setWarningSign(true);\r\n            }\r\n            removeClassOfAll("crInvert");\r\n            l.formatInputToDisplay();\r\n            this.refreshInputListItem(i);\r\n            await this.clearMachinenbefehlandCurrentLine();\r\n            updateScroll(descriptionLines.id);\r\n            getHtmlElement(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}inputP`).onclick = ((e) => {\r\n                if (!aniControl.play) {\r\n                    updateScrollOfDescriptionLines(`${(i + 1) < 10 ? "0" + (i + 1) : (i + 1)}DescriptionDiv`, descriptionLines.id);\r\n                }\r\n            });\r\n        };\r\n        this.aufzulosendeLabel = () => {\r\n            let b = false;\r\n            this.inputLines.forEach(e => {\r\n                if (e.getTranslation().includes("????")) {\r\n                    b = true;\r\n                }\r\n                if (e.hasOffsetLabel()) {\r\n                    b = true;\r\n                }\r\n            });\r\n            return b;\r\n        };\r\n        this.translateInputStringOfId = (n) => {\r\n            if (n < this.inputstrings.length) {\r\n                this.inputLineControl.addInputLine(this.inputstrings[n]);\r\n                this.refreshInputLines();\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.nextInverted = async (n) => {\r\n            if (this.checkForNoAniStep()) {\r\n                await sleepFor(30);\r\n            }\r\n            for (this.nextParseID; this.nextParseID < n.length; this.nextParseID++) {\r\n                if (n[this.nextParseID] == 1) {\r\n                    this.switchInvertedTo(this.nextParseID);\r\n                    this.nextParseID += 1;\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        this.switchInvertedTo = (n) => {\r\n            switch (n) {\r\n                case 0:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crLabel", "crInvert");\r\n                    break;\r\n                case 1:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crFirst", "crInvert");\r\n                    break;\r\n                case 2:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crSecond", "crInvert");\r\n                    break;\r\n                case 3:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crThird", "crInvert");\r\n                    break;\r\n                case 4:\r\n                    removeClassOfAll("crInvert");\r\n                    addClassTo("crError", "crInvert");\r\n                    break;\r\n                case 5:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        this.startPlaying = async () => {\r\n            if (aniControl.stop || aniControl.reset || aniControl.end)\r\n                throw new Error("Reset was pressed recently!");\r\n            if (this.inputstrings.length > 0) {\r\n                let date = Date.now();\r\n                await this.pushLines(false);\r\n                await this.clearMachinenbefehlandCurrentLine();\r\n                aniControl.setEnd();\r\n                console.log(Date.now() - date);\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n        };\r\n        this.toggleStop = async () => {\r\n            if (this.inputstrings.length > 0) {\r\n                if (aniControl.end || aniControl.stop) {\r\n                    throw new Error("Stop has been pressed or animation Finished!");\r\n                    return;\r\n                }\r\n                if (aniControl.reset) {\r\n                    throw new Error("Waiting until reset is finished!");\r\n                    return;\r\n                }\r\n                if (!aniControl.start) {\r\n                    await aniControl.setStart();\r\n                    await this.startPlaying();\r\n                }\r\n                else {\r\n                    if (aniControl.play) {\r\n                        await aniControl.setPaused();\r\n                    }\r\n                    else {\r\n                        await aniControl.setPlaying();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.log("no Input");\r\n            }\r\n        };\r\n        this.pause = () => {\r\n            aniControl.setPaused();\r\n        };\r\n        this.reset = async () => {\r\n            if (!aniControl.reset) {\r\n                aniControl.setReset();\r\n                await this.partialReset();\r\n                await this.refreshInputListItems();\r\n            }\r\n        };\r\n        this.displayInputLines = async () => {\r\n            await this.partialReset();\r\n            await this.refreshInputListItems();\r\n        };\r\n        this.setInputStrings = (s) => {\r\n            this.inputstrings = s;\r\n        };\r\n        this.refreshInputStrings = (s) => {\r\n            this.inputstrings = s;\r\n        };\r\n        this.refreshInputLines = () => {\r\n            this.inputLines = this.inputLineControl.getInputLines();\r\n        };\r\n        this.openOutputWindow = () => {\r\n            try {\r\n                aniControl.setPaused();\r\n                let b = window.getComputedStyle(outputwindowContainer);\r\n                if (b.getPropertyValue(\'visibility\') == "hidden") {\r\n                    outputwindowContainer.style.visibility = "visible";\r\n                }\r\n                else {\r\n                    outputwindowContainer.style.visibility = "hidden";\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.createListeners = () => {\r\n            try {\r\n                this.iWindow.createEventListeners();\r\n                createClickListener(\'CloseOutputWindow\', this.openOutputWindow);\r\n                createClickListener(\'TranslateWindow\', this.openOutputWindow);\r\n                createClickListener(\'play\', this.toggleStop);\r\n                createClickListener(\'reset\', this.reset);\r\n                aniControl.createEventListeners();\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        this.anim = new Animator();\r\n    }\r\n    setPotentialConsts(s) {\r\n        this.potentialConsts = s;\r\n    }\r\n    rePushLastSymbolEmpty() {\r\n        this.symbols = this.symbolList.getSequence();\r\n        let s;\r\n        let n, p;\r\n        let idString = "";\r\n        symbolTableLines.innerHTML = "";\r\n        if (this.symbols.length != 0) {\r\n            for (let i = 0; i < this.symbols.length; i++) {\r\n                if (this.symbols[i] != null) {\r\n                    s = this.symbols[i];\r\n                    if (i == this.symbols.length - 1) {\r\n                        if (s instanceof Label) {\r\n                            n = s.getName();\r\n                            p = s.getPosition();\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">L:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} =&nbsp;&nbsp;<span id="${targetlabelValuePlaceholder}"> </span></h4>`;\r\n                        }\r\n                        break;\r\n                    }\r\n                    if (s instanceof Label) {\r\n                        n = s.getName();\r\n                        p = s.getPosition();\r\n                        symbolTableLines.innerHTML += `<h4><span class="gray">L:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = ${this.inputLineControl.fHD16(p)} (${this.inputLineControl.getLittleEndianOf(p)})</h4>`;\r\n                    }\r\n                    if (s instanceof Constant) {\r\n                        n = s.getName();\r\n                        p = s.getValue();\r\n                        if (Manipulator_Manipulator.isDat_8(p)) {\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = &nbsp;&nbsp;${this.inputLineControl.fHD8(p)}</h4>`;\r\n                        }\r\n                        else {\r\n                            symbolTableLines.innerHTML += `<h4><span class="gray">K:</span> ${Manipulator_Manipulator.formatLabelDisplaytoSymbolTable(n)} = ${this.inputLineControl.fHD16(p)}</h4>`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            symbolTableLines.innerHTML += `<h4> &nbsp;<span id="${targetSymbolTableLine}"></span> </h4>`;\r\n        }\r\n        updateScroll("symbolTableLines");\r\n    }\r\n    getLabelIfUnknown(i, b) {\r\n        let e;\r\n        let addr, spa, l = "";\r\n        if (i < this.inputLines.length) {\r\n            e = this.inputLines[i];\r\n            spa = this.inputLineControl.getDisplayableSpeicherabbild(e, b);\r\n            if (spa.includes("??")) {\r\n                if (e.hasOffsetLabel()) {\r\n                    l = "(" + e.getLabelOfOffset() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getSecondPart())) {\r\n                    l = "(" + e.getSecondPart() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getThirdPart())) {\r\n                    l = "(" + e.getThirdPart() + ")";\r\n                }\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n    getLinkerAufloesungLine(i, b) {\r\n        let e;\r\n        let addr, spa, l = "";\r\n        if (i < this.inputLines.length) {\r\n            e = this.inputLines[i];\r\n            addr = e.getStartingAddr();\r\n            spa = this.inputLineControl.getDisplayableSpeicherabbild(e, b);\r\n            if (spa.includes("??")) {\r\n                if (e.hasOffsetLabel()) {\r\n                    l = "(" + e.getLabelOfOffset() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getSecondPart())) {\r\n                    l = "(" + e.getSecondPart() + ")";\r\n                }\r\n                else if (this.symbolList.isLabel(e.getThirdPart())) {\r\n                    l = "(" + e.getThirdPart() + ")";\r\n                }\r\n            }\r\n            return addr + ": " + spa + " " + l;\r\n        }\r\n        return "";\r\n    }\r\n    checkForSkip() {\r\n        if (skipped)\r\n            return false;\r\n        return !(aniControl.speed == 4 && aniControl.isAni3());\r\n    }\r\n    checkForNoAniStep() {\r\n        if (skipped)\r\n            return false;\r\n        return !(aniControl.speed >= 3 && aniControl.isAni3());\r\n    }\r\n    clearMachinenbefehlandCurrentLine() {\r\n        machinenbefehl.innerHTML = "&nbsp;";\r\n        currentLineLine.innerHTML = "&nbsp;";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\nconst onscrollIn_Out = () => {\r\n    /* let inputText= document.getElementById("InputText");\r\n    let outputText= document.getElementById("OutputText"); */\r\n    var ignoreScrollEvents = false;\r\n    try {\r\n        if (inputText != null && outputText != null) {\r\n            inputText.onscroll = function () {\r\n                if (aniControl.play)\r\n                    return;\r\n                var ignore = ignoreScrollEvents;\r\n                ignoreScrollEvents = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents = true;\r\n                if (inputText != null && outputText != null) {\r\n                    outputText.scrollTop = inputText.scrollTop;\r\n                }\r\n            };\r\n            outputText.onscroll = function () {\r\n                // if(inputText!=null && outputText!=null&&!aniControl.play){\r\n                if (aniControl.play)\r\n                    return;\r\n                var ignore = ignoreScrollEvents;\r\n                ignoreScrollEvents = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents = true;\r\n                if (inputText != null && outputText != null) {\r\n                    /* if(inputText.scrollTop>outputText.scrollTop && inputText.scrollTop+inputText.clientHeight>outputText.scrollHeight){\r\n\r\n                    } */\r\n                    inputText.scrollTop = outputText.scrollTop;\r\n                }\r\n            };\r\n        }\r\n        else\r\n            throw new Error("Element InputText oder OutputText ist null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst root = document.documentElement;\r\nconst rootVariables = getComputedStyle(root);\r\nlet contentloaded = false;\r\nconst switchToFullscreen = () => {\r\n    var elem = document.documentElement;\r\n    const elem2 = document.getElementById("vollbild");\r\n    if (elem != null && elem2 != null) {\r\n        if (!fullscreened) {\r\n            if (elem.requestFullscreen) {\r\n                elem.requestFullscreen();\r\n            }\r\n            else if (elem.webkitRequestFullscreen) { /* Safari */\r\n                elem.webkitRequestFullscreen();\r\n            }\r\n            else if (elem.msRequestFullscreen) { /* IE11 */\r\n                elem.msRequestFullscreen();\r\n            }\r\n            elem2.setAttribute("fullscreen", "on");\r\n            fullscreened = true;\r\n        }\r\n        else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            }\r\n            else if (document.webkitExitFullscreen) {\r\n                document.webkitExitFullscreen();\r\n            }\r\n            else if (document.msExitFullscreen) {\r\n                document.msExitFullscreen();\r\n            }\r\n            elem2.setAttribute("fullscreen", "off");\r\n            fullscreened = false;\r\n        }\r\n    }\r\n};\r\nconst consoleWindowsize = () => {\r\n    let s = Number(rootVariables.getPropertyValue("--arrowBodyW").replace("px", ""));\r\n    console.log("Innerwidth: " + window.innerWidth);\r\n    console.log("Innerheight: " + window.innerHeight);\r\n    console.log("Outerwidth: " + window.outerWidth);\r\n    console.log("Outerheight: " + window.outerHeight);\r\n};\r\nconst outputClip = () => {\r\n    var copyText = document.getElementById("OutputTextArea");\r\n    if (copyText != null) {\r\n        navigator.clipboard.writeText(copyText.value);\r\n    }\r\n};\r\nconst syncScroll_MachineCode_Hexadecimal = () => {\r\n    var ignoreScrollEvents2 = false;\r\n    // console.log(OutputWindowMachineCode.scrollTop);\r\n    // console.log(OutputTextAreaElement.scrollTop);\r\n    try {\r\n        if (OutputWindowMachineCode != null && OutputTextAreaElement != null) {\r\n            OutputWindowMachineCode.onscroll = function () {\r\n                var ignore = ignoreScrollEvents2;\r\n                ignoreScrollEvents2 = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents2 = true;\r\n                OutputTextAreaElement.scrollTop = OutputWindowMachineCode.scrollTop;\r\n            };\r\n            OutputTextAreaElement.onscroll = function () {\r\n                var ignore = ignoreScrollEvents2;\r\n                ignoreScrollEvents2 = false;\r\n                if (ignore)\r\n                    return;\r\n                ignoreScrollEvents2 = true;\r\n                OutputWindowMachineCode.scrollTop = OutputTextAreaElement.scrollTop;\r\n            };\r\n        }\r\n        else\r\n            throw new Error("Element OutputWindowMachineCode oder OutputTextAreaElement ist null!");\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\nconst setCurrentlyHovered = async (e) => {\r\n    let id;\r\n    if (e.target instanceof HTMLElement) {\r\n        removeClassOfAll("highlighted");\r\n        id = getIDOfSelected(e.target.id);\r\n        // console.log(id);\r\n        addClassTo(id + "inputP", "highlighted");\r\n        addClassTo(id + "outputP", "highlighted");\r\n    }\r\n    /* if(e instanceof PointerEvent){\r\n    } */\r\n    return false;\r\n};\r\nconst changeTheme = () => {\r\n    let theme = preferedTheme === "light" ? \'dark\' : \'light\';\r\n    preferedTheme = theme;\r\n    const root = document.querySelector(\':root\');\r\n    root.setAttribute(\'color-scheme\', `${theme}`);\r\n};\r\nlet preferedTheme = "dark";\r\nlet fullscreened = false;\r\nlet p = new ProjectWindow();\r\nwindow.addEventListener(\'DOMContentLoaded\', async () => {\r\n    const root1 = document.querySelector(\':root\');\r\n    root1.setAttribute(\'color-scheme\', `${preferedTheme}`);\r\n    contentloaded = true;\r\n    resizer.initialResize();\r\n    aniControl.setLoaded(true);\r\n});\r\nconst testBinToHex = () => {\r\n    let ss = [\r\n        Manipulator.binToHex("1111"),\r\n        Manipulator.binToHex("01111"),\r\n        Manipulator.binToHex("001111"),\r\n        Manipulator.binToHex("001111"),\r\n        Manipulator.binToHex("0001111"),\r\n        Manipulator.binToHex("00001111"),\r\n        Manipulator.binToHex("000001111")\r\n    ];\r\n    ss.forEach(e => console.log(e));\r\n};\r\nconst main = async () => {\r\n    p.createListeners();\r\n    onscrollIn_Out();\r\n    createClickListener("InputLines", setCurrentlyHovered);\r\n    InputLines.addEventListener("touchstart", setCurrentlyHovered);\r\n    createClickListener("light", changeTheme);\r\n    createClickListener("OutputClip", outputClip);\r\n    syncScroll_MachineCode_Hexadecimal();\r\n    createClickListener("vollbild", switchToFullscreen);\r\n    window.addEventListener("resize", consoleWindowsize);\r\n    document.getElementById("vollbild").setAttribute("fullscreen", "off");\r\n    // testBinToHex();\r\n};\r\nmain();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///851\n')}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F)},__webpack_exports__={};__webpack_modules__[851](0,__webpack_exports__,__webpack_require__)})();