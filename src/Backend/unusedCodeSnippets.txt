
                //COMMENTED BECAUSE SAME FUNCTIONALITY

            /*
            case 'OR':case'XOR':case'CP':
                 i.saveDescriptionLine(this.formatGefunden("Mnemocode "+strings[0],strings[0]+" ..."))

                save3(i);
                matches=this.mnemoCommands.filter(e=>{return e.getMCode()==strings[0]});
                consoletostring = this.getDests(matches).join(", ");
                i.saveDescriptionLine(this.formatErwartet(consoletostring));
                if(strings.length<2){
                    i.saveDescriptionLine(StringConstructor.toofewCmd());
                    return false;
                }
                if(this.getDests(matches).includes(strings[1].toUpperCase())){
                    toSave=strings[1];
                    strings[1]=strings[1].toUpperCase()
                    i.saveDescriptionLine(this.formatGefunden("Register "+strings[1],strings[0]+" "+strings[1]));
                    matches =matches=matches.filter(e=>{                                     //Alle treffer auf zutreffende Register filtriert
                        if(e.getDestination() ==strings[1].toUpperCase()){
                            return e;
                        }
                    });
                    if(matches.length==1){
                        i.saveDescriptionLine(this.formatErkannt(registerAdressierung));

                        i.setSecondPart(toSave);
                        i.setType(InputLineType.TRANSLATED);
                        i.setLength(matches[0].getSize());
                        i.setHCode(matches[0].getHexCode());
                        i.setValid(true);
                        //console.log(matches[0].toString());
                        return true;
                    }
                    else{
                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));
                        return false;
                    }
                }
                else if(this.symbollist.isConst(strings[1])){
                    
                    i.saveDescriptionLine(this.formatGefunden("Konstante "+strings[1],strings[0]+" "+strings[1]));
                    matches =matches=matches.filter(e=>{                                     //Alle treffer auf zutreffende Register filtriert
                        if(e.getDestination() =="dat_8"){
                            return e;
                        }
                    });
                    if(matches.length==1){
                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));

                        i.setSecondPart(strings[1]);
                        i.setType(InputLineType.TRANSLATED);
                        i.setLength(matches[0].getSize());
                        i.setHCode(matches[0].getHexCode());
                        i.setValid(true);
                        //console.log(matches[0].toString());
                        return true;
                    }
                    else{
                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));
                        return false;
                    }
                }
                else if(Manipulator.isDat_8(strings[1])){
                    i.saveDescriptionLine(this.formatGefunden("8-bit Wert "+Manipulator.formatHextoDat8(strings[1]),strings[0]+" "+Manipulator.formatHextoDat8(strings[1])));
                    matches =matches=matches.filter(e=>{                                     //Alle treffer auf zutreffende Register filtriert
                        if(e.getDestination() =="dat_8"){
                            return e;
                        }
                    });
                    if(matches.length==1){
                        // Änderung
                        // i.setSecondPart(Manipulator.formatHextoDat8(strings[1]));
                        i.saveDescriptionLine(this.formatErkannt(immediateAdressierung));

                        i.setSecondPart((strings[1]));
                        i.setType(InputLineType.TRANSLATED);
                        i.setLength(matches[0].getSize());
                        i.setHCode(matches[0].getHexCode());
                        i.setValid(true);
                        //console.log(matches[0].toString());
                        return true;
                    }
                    else{
                        i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));
                        return false;
                    }
                }
                else{
                    i.saveDescriptionLine(this.formatErrorMassage(strings[1]+" ist kein gültiger Operand!"));
                    i.setError(strings[1]);
                    return true;
                }
                break; */
                //Bruv PLS

                //COMMENTED BECAUSE SAME FUNCTIONALITY

            /* case 'SHL':case'SHR':
                i.saveDescriptionLine(this.formatGefunden("Mnemocode "+strings[0],strings[0]))

                matches=this.mnemoCommands.filter(e=>{return e.getMCode()==strings[0]});
                if(strings.length>1){
                    i.saveDescriptionLine(this.formatErrorMassage("zu viel Operanden!"));
                    i.setError(strings[1]);
                    return false;
                }
                if(matches.length==1){
                    i.saveDescriptionLine(this.formatErkannt(registerAdressierung));

                    i.setType(InputLineType.TRANSLATED);
                    i.setLength(matches[0].getSize());
                    i.setHCode(matches[0].getHexCode());
                    i.setValid(true);
                    //console.log(matches[0].toString());
                    return true;
                }
                else{
                    i.saveDescriptionLine(this.formatErrorMassage("keine passende Befehl gefunden!"));
                    return false;
                }
                break; */

                /* case 'POP':
                i.saveDescriptionLine(this.formatGefunden("Mnemocode "+strings[0],strings[0]))

                matches=this.mnemoCommands.filter(e=>{return e.getMCode()=='POP'});
                if(strings.length>1){
                    i.saveDescriptionLine(StringConstructor.tooManyCmd());
                    i.setError(strings[1]);
                    return false;
                }
                else{
                    i.saveDescriptionLine(this.formatErkannt(stackBefehl));

                    i.setType(InputLineType.TRANSLATED);
                    i.setLength(matches[0].getSize());
                    i.setHCode(matches[0].getHexCode());
                    i.setValid(true);
                    return true;
                    }
                break; */